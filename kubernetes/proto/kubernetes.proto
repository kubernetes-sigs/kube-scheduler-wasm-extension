syntax = "proto3";

package kubernetes;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

message ConnectCoreV1DeleteNamespacedPodProxyRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1DeleteNamespacedPodProxyWithPathRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1DeleteNamespacedServiceProxyRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1DeleteNodeProxyRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1DeleteNodeProxyWithPathRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1GetNamespacedPodAttachRequest {
    // The container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 1;

    // name of the PodAttachOptions
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
    bool stderr = 4;

    // Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 5;

    // Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
    bool stdout = 6;

    // TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
    bool tty = 7;
}

message ConnectCoreV1GetNamespacedPodExecRequest {
    // Command is the remote command to execute. argv array. Not executed within a shell.
    string command = 1;

    // Container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 2;

    // name of the PodExecOptions
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Redirect the standard error stream of the pod for this call.
    bool stderr = 5;

    // Redirect the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 6;

    // Redirect the standard output stream of the pod for this call.
    bool stdout = 7;

    // TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
    bool tty = 8;
}

message ConnectCoreV1GetNamespacedPodPortforwardRequest {
    // name of the PodPortForwardOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // List of ports to forward Required when using WebSockets
    int32 ports = 3;
}

message ConnectCoreV1GetNamespacedPodProxyRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1GetNamespacedPodProxyWithPathRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1GetNamespacedServiceProxyRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1GetNamespacedServiceProxyWithPathRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1GetNodeProxyRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1GetNodeProxyWithPathRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PatchNamespacedPodProxyRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PatchNamespacedPodProxyWithPathRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PatchNamespacedServiceProxyRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PatchNamespacedServiceProxyWithPathRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PatchNodeProxyRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PatchNodeProxyWithPathRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PostNamespacedPodAttachRequest {
    // The container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 1;

    // name of the PodAttachOptions
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
    bool stderr = 4;

    // Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 5;

    // Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
    bool stdout = 6;

    // TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
    bool tty = 7;
}

message ConnectCoreV1PostNamespacedPodExecRequest {
    // Command is the remote command to execute. argv array. Not executed within a shell.
    string command = 1;

    // Container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 2;

    // name of the PodExecOptions
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Redirect the standard error stream of the pod for this call.
    bool stderr = 5;

    // Redirect the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 6;

    // Redirect the standard output stream of the pod for this call.
    bool stdout = 7;

    // TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
    bool tty = 8;
}

message ConnectCoreV1PostNamespacedPodPortforwardRequest {
    // name of the PodPortForwardOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // List of ports to forward Required when using WebSockets
    int32 ports = 3;
}

message ConnectCoreV1PostNamespacedPodProxyRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PostNamespacedPodProxyWithPathRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PostNamespacedServiceProxyRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PostNamespacedServiceProxyWithPathRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PostNodeProxyRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PostNodeProxyWithPathRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PutNamespacedPodProxyRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PutNamespacedPodProxyWithPathRequest {
    // name of the PodProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PutNamespacedServiceProxyRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PutNamespacedServiceProxyWithPathRequest {
    // name of the ServiceProxyOptions
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PutNodeProxyRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PutNodeProxyWithPathRequest {
    // name of the NodeProxyOptions
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message CreateAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateApiextensionsV1CustomResourceDefinitionRequest {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateApiregistrationV1ApiServiceRequest {
    IoK8sKubeAggregatorPkgApisApiregistrationV1APIService body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAppsV1NamespacedControllerRevisionRequest {
    IoK8sApiAppsV1ControllerRevision body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAppsV1NamespacedDaemonSetRequest {
    IoK8sApiAppsV1DaemonSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAppsV1NamespacedDeploymentRequest {
    IoK8sApiAppsV1Deployment body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAppsV1NamespacedReplicaSetRequest {
    IoK8sApiAppsV1ReplicaSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAppsV1NamespacedStatefulSetRequest {
    IoK8sApiAppsV1StatefulSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAuthenticationV1SelfSubjectReviewRequest {
    IoK8sApiAuthenticationV1SelfSubjectReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAuthenticationV1TokenReviewRequest {
    IoK8sApiAuthenticationV1TokenReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAuthenticationV1alpha1SelfSubjectReviewRequest {
    IoK8sApiAuthenticationV1alpha1SelfSubjectReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAuthenticationV1beta1SelfSubjectReviewRequest {
    IoK8sApiAuthenticationV1beta1SelfSubjectReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1LocalSubjectAccessReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAuthorizationV1SelfSubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1SelfSubjectAccessReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAuthorizationV1SelfSubjectRulesReviewRequest {
    IoK8sApiAuthorizationV1SelfSubjectRulesReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAuthorizationV1SubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1SubjectAccessReview body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV1HorizontalPodAutoscaler body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV2HorizontalPodAutoscaler body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateBatchV1NamespacedCronJobRequest {
    IoK8sApiBatchV1CronJob body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateBatchV1NamespacedJobRequest {
    IoK8sApiBatchV1Job body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCertificatesV1CertificateSigningRequestRequest {
    IoK8sApiCertificatesV1CertificateSigningRequest body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateCertificatesV1alpha1ClusterTrustBundleRequest {
    IoK8sApiCertificatesV1alpha1ClusterTrustBundle body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateCoordinationV1NamespacedLeaseRequest {
    IoK8sApiCoordinationV1Lease body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespaceRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateCoreV1NamespacedBindingRequest {
    IoK8sApiCoreV1Binding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedConfigMapRequest {
    IoK8sApiCoreV1ConfigMap body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedEndpointsRequest {
    IoK8sApiCoreV1Endpoints body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedEventRequest {
    IoK8sApiCoreV1Event body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedLimitRangeRequest {
    IoK8sApiCoreV1LimitRange body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApiCoreV1PersistentVolumeClaim body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedPodBindingRequest {
    IoK8sApiCoreV1Binding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Binding
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message CreateCoreV1NamespacedPodEvictionRequest {
    IoK8sApiPolicyV1Eviction body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Eviction
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message CreateCoreV1NamespacedPodRequest {
    IoK8sApiCoreV1Pod body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedPodTemplateRequest {
    IoK8sApiCoreV1PodTemplate body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedReplicationControllerRequest {
    IoK8sApiCoreV1ReplicationController body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedResourceQuotaRequest {
    IoK8sApiCoreV1ResourceQuota body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedSecretRequest {
    IoK8sApiCoreV1Secret body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedServiceAccountRequest {
    IoK8sApiCoreV1ServiceAccount body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NamespacedServiceAccountTokenRequest {
    IoK8sApiAuthenticationV1TokenRequest body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the TokenRequest
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message CreateCoreV1NamespacedServiceRequest {
    IoK8sApiCoreV1Service body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateCoreV1NodeRequest {
    IoK8sApiCoreV1Node body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateCoreV1PersistentVolumeRequest {
    IoK8sApiCoreV1PersistentVolume body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateDiscoveryV1NamespacedEndpointSliceRequest {
    IoK8sApiDiscoveryV1EndpointSlice body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateEventsV1NamespacedEventRequest {
    IoK8sApiEventsV1Event body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateFlowcontrolApiserverV1beta2FlowSchemaRequest {
    IoK8sApiFlowcontrolV1beta2FlowSchema body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
    IoK8sApiFlowcontrolV1beta3FlowSchema body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateInternalApiserverV1alpha1StorageVersionRequest {
    IoK8sApiApiserverinternalV1alpha1StorageVersion body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateNetworkingV1IngressClassRequest {
    IoK8sApiNetworkingV1IngressClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateNetworkingV1NamespacedIngressRequest {
    IoK8sApiNetworkingV1Ingress body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApiNetworkingV1NetworkPolicy body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateNetworkingV1alpha1ClusterCidrRequest {
    IoK8sApiNetworkingV1alpha1ClusterCIDR body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateNetworkingV1alpha1IpAddressRequest {
    IoK8sApiNetworkingV1alpha1IPAddress body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateNodeV1RuntimeClassRequest {
    IoK8sApiNodeV1RuntimeClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreatePolicyV1NamespacedPodDisruptionBudgetRequest {
    IoK8sApiPolicyV1PodDisruptionBudget body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApiRbacV1ClusterRoleBinding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApiRbacV1ClusterRole body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApiRbacV1RoleBinding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApiRbacV1Role body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateResourceV1alpha2NamespacedPodSchedulingContextRequest {
    IoK8sApiResourceV1alpha2PodSchedulingContext body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateResourceV1alpha2NamespacedResourceClaimRequest {
    IoK8sApiResourceV1alpha2ResourceClaim body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    IoK8sApiResourceV1alpha2ResourceClaimTemplate body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateResourceV1alpha2ResourceClassRequest {
    IoK8sApiResourceV1alpha2ResourceClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateSchedulingV1PriorityClassRequest {
    IoK8sApiSchedulingV1PriorityClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateStorageV1CsiDriverRequest {
    IoK8sApiStorageV1CSIDriver body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateStorageV1CsiNodeRequest {
    IoK8sApiStorageV1CSINode body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateStorageV1NamespacedCsiStorageCapacityRequest {
    IoK8sApiStorageV1CSIStorageCapacity body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message CreateStorageV1StorageClassRequest {
    IoK8sApiStorageV1StorageClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message CreateStorageV1VolumeAttachmentRequest {
    IoK8sApiStorageV1VolumeAttachment body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the MutatingWebhookConfiguration
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ValidatingWebhookConfiguration
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ValidatingAdmissionPolicyBinding
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ValidatingAdmissionPolicy
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteApiextensionsV1CollectionCustomResourceDefinitionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteApiextensionsV1CustomResourceDefinitionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the CustomResourceDefinition
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteApiregistrationV1ApiServiceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the APIService
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteApiregistrationV1CollectionApiServiceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteAppsV1CollectionNamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAppsV1CollectionNamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAppsV1CollectionNamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAppsV1CollectionNamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAppsV1CollectionNamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAppsV1NamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ControllerRevision
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteAppsV1NamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the DaemonSet
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteAppsV1NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Deployment
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteAppsV1NamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ReplicaSet
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteAppsV1NamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the StatefulSet
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the HorizontalPodAutoscaler
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the HorizontalPodAutoscaler
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteBatchV1CollectionNamespacedCronJobRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteBatchV1CollectionNamespacedJobRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteBatchV1NamespacedCronJobRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the CronJob
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteBatchV1NamespacedJobRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Job
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCertificatesV1CertificateSigningRequestRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the CertificateSigningRequest
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteCertificatesV1CollectionCertificateSigningRequestRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteCertificatesV1alpha1ClusterTrustBundleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ClusterTrustBundle
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteCertificatesV1alpha1CollectionClusterTrustBundleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteCoordinationV1CollectionNamespacedLeaseRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoordinationV1NamespacedLeaseRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Lease
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1CollectionNamespacedConfigMapRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedEndpointsRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedLimitRangeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedPodRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedPodTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedReplicationControllerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedResourceQuotaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedSecretRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedServiceAccountRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNamespacedServiceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteCoreV1CollectionNodeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteCoreV1CollectionPersistentVolumeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteCoreV1NamespaceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Namespace
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedConfigMapRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ConfigMap
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedEndpointsRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Endpoints
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Event
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedLimitRangeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the LimitRange
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PersistentVolumeClaim
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedPodRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Pod
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedPodTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PodTemplate
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedReplicationControllerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ReplicationController
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedResourceQuotaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ResourceQuota
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedSecretRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Secret
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedServiceAccountRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ServiceAccount
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NamespacedServiceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Service
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteCoreV1NodeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Node
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteCoreV1PersistentVolumeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PersistentVolume
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteDiscoveryV1CollectionNamespacedEndpointSliceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteDiscoveryV1NamespacedEndpointSliceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the EndpointSlice
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteEventsV1CollectionNamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteEventsV1NamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Event
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteFlowcontrolApiserverV1beta2FlowSchemaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the FlowSchema
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PriorityLevelConfiguration
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the FlowSchema
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PriorityLevelConfiguration
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteInternalApiserverV1alpha1CollectionStorageVersionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteInternalApiserverV1alpha1StorageVersionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the StorageVersion
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteNetworkingV1CollectionIngressClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteNetworkingV1CollectionNamespacedIngressRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteNetworkingV1CollectionNamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteNetworkingV1IngressClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the IngressClass
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteNetworkingV1NamespacedIngressRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Ingress
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the NetworkPolicy
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteNetworkingV1alpha1ClusterCidrRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ClusterCIDR
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteNetworkingV1alpha1CollectionClusterCidrRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteNetworkingV1alpha1CollectionIpAddressRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteNetworkingV1alpha1IpAddressRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the IPAddress
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteNodeV1CollectionRuntimeClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteNodeV1RuntimeClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the RuntimeClass
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeletePolicyV1CollectionNamespacedPodDisruptionBudgetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeletePolicyV1NamespacedPodDisruptionBudgetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PodDisruptionBudget
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ClusterRoleBinding
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ClusterRole
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteRbacAuthorizationV1CollectionClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the RoleBinding
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the Role
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteResourceV1alpha2CollectionNamespacedResourceClaimRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteResourceV1alpha2CollectionResourceClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteResourceV1alpha2NamespacedPodSchedulingContextRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PodSchedulingContext
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteResourceV1alpha2NamespacedResourceClaimRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ResourceClaim
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ResourceClaimTemplate
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteResourceV1alpha2ResourceClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the ResourceClass
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteSchedulingV1CollectionPriorityClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteSchedulingV1PriorityClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the PriorityClass
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteStorageV1CollectionCsiDriverRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteStorageV1CollectionCsiNodeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteStorageV1CollectionNamespacedCsiStorageCapacityRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // object name and auth scope, such as for teams and projects
    string namespace = 8;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 9;

    // If 'true', then the output is pretty printed.
    string pretty = 10;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 11;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 12;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 13;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 14;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 15;
}

message DeleteStorageV1CollectionStorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteStorageV1CollectionVolumeAttachmentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 3;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 4;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 5;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 6;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 7;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 8;

    // If 'true', then the output is pretty printed.
    string pretty = 9;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 10;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 11;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 12;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 13;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 14;
}

message DeleteStorageV1CsiDriverRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the CSIDriver
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteStorageV1CsiNodeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the CSINode
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteStorageV1NamespacedCsiStorageCapacityRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the CSIStorageCapacity
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 8;
}

message DeleteStorageV1StorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the StorageClass
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

message DeleteStorageV1VolumeAttachmentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 3;

    // name of the VolumeAttachment
    string name = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

// MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.
message IoK8sApiAdmissionregistrationV1MatchCondition {
    // Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
    // 
    // 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
    //   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    // 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
    //   request resource.
    // Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
    // 
    // Required.
    string expression = 1;

    // Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
    // 
    // Required.
    string name = 2;
}

// MutatingWebhook describes an admission webhook and the resources and operations it applies to.
message IoK8sApiAdmissionregistrationV1MutatingWebhook {
    // AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
    repeated string admissionReviewVersions = 1;

    // ClientConfig defines how to communicate with the hook. Required
    IoK8sApiAdmissionregistrationV1WebhookClientConfig clientConfig = 2;

    // FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
    string failurePolicy = 3;

    // MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
    // 
    // The exact matching logic is (in order):
    //   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
    //   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
    //   3. If any matchCondition evaluates to an error (but none are FALSE):
    //      - If failurePolicy=Fail, reject the request
    //      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
    // 
    // This is an alpha feature and managed by the AdmissionWebhookMatchConditions feature gate.
    repeated IoK8sApiAdmissionregistrationV1MatchCondition matchConditions = 4;

    // matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
    // 
    // - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
    // 
    // - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
    // 
    // Defaults to "Equivalent"
    string matchPolicy = 5;

    // The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    string name = 6;

    // NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
    // 
    // For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
    //   "matchExpressions": [
    //     {
    //       "key": "runlevel",
    //       "operator": "NotIn",
    //       "values": [
    //         "0",
    //         "1"
    //       ]
    //     }
    //   ]
    // }
    // 
    // If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
    //   "matchExpressions": [
    //     {
    //       "key": "environment",
    //       "operator": "In",
    //       "values": [
    //         "prod",
    //         "staging"
    //       ]
    //     }
    //   ]
    // }
    // 
    // See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
    // 
    // Default to the empty LabelSelector, which matches everything.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 7;

    // ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
    IoK8sApimachineryPkgApisMetaV1LabelSelector objectSelector = 8;

    // reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
    // 
    // Never: the webhook will not be called more than once in a single admission evaluation.
    // 
    // IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
    // 
    // Defaults to "Never".
    string reinvocationPolicy = 9;

    // Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
    repeated IoK8sApiAdmissionregistrationV1RuleWithOperations rules = 10;

    // SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
    string sideEffects = 11;

    // TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
    int32 timeoutSeconds = 12;
}

// MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
message IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Webhooks is a list of webhooks and the affected resources and operations.
    repeated IoK8sApiAdmissionregistrationV1MutatingWebhook webhooks = 4;
}

// MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
message IoK8sApiAdmissionregistrationV1MutatingWebhookConfigurationList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of MutatingWebhookConfiguration.
    repeated IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
message IoK8sApiAdmissionregistrationV1RuleWithOperations {
    // APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
    repeated string apiGroups = 1;

    // APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
    repeated string apiVersions = 2;

    // Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
    repeated string operations = 3;

    // Resources is a list of resources this rule applies to.
    // 
    // For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
    // 
    // If wildcard is present, the validation rule will ensure resources do not overlap with each other.
    // 
    // Depending on the enclosing object, subresources might not be allowed. Required.
    repeated string resources = 4;

    // scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
    string scope = 5;
}

// ServiceReference holds a reference to Service.legacy.k8s.io
message IoK8sApiAdmissionregistrationV1ServiceReference {
    // `name` is the name of the service. Required
    string name = 1;

    // `namespace` is the namespace of the service. Required
    string namespace = 2;

    // `path` is an optional URL path which will be sent in any request to this service.
    string path = 3;

    // If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    int32 port = 4;
}

// ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
message IoK8sApiAdmissionregistrationV1ValidatingWebhook {
    // AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
    repeated string admissionReviewVersions = 1;

    // ClientConfig defines how to communicate with the hook. Required
    IoK8sApiAdmissionregistrationV1WebhookClientConfig clientConfig = 2;

    // FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
    string failurePolicy = 3;

    // MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
    // 
    // The exact matching logic is (in order):
    //   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
    //   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
    //   3. If any matchCondition evaluates to an error (but none are FALSE):
    //      - If failurePolicy=Fail, reject the request
    //      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
    // 
    // This is an alpha feature and managed by the AdmissionWebhookMatchConditions feature gate.
    repeated IoK8sApiAdmissionregistrationV1MatchCondition matchConditions = 4;

    // matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
    // 
    // - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
    // 
    // - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
    // 
    // Defaults to "Equivalent"
    string matchPolicy = 5;

    // The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    string name = 6;

    // NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
    // 
    // For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
    //   "matchExpressions": [
    //     {
    //       "key": "runlevel",
    //       "operator": "NotIn",
    //       "values": [
    //         "0",
    //         "1"
    //       ]
    //     }
    //   ]
    // }
    // 
    // If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
    //   "matchExpressions": [
    //     {
    //       "key": "environment",
    //       "operator": "In",
    //       "values": [
    //         "prod",
    //         "staging"
    //       ]
    //     }
    //   ]
    // }
    // 
    // See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.
    // 
    // Default to the empty LabelSelector, which matches everything.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 7;

    // ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
    IoK8sApimachineryPkgApisMetaV1LabelSelector objectSelector = 8;

    // Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
    repeated IoK8sApiAdmissionregistrationV1RuleWithOperations rules = 9;

    // SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
    string sideEffects = 10;

    // TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
    int32 timeoutSeconds = 11;
}

// ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
message IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Webhooks is a list of webhooks and the affected resources and operations.
    repeated IoK8sApiAdmissionregistrationV1ValidatingWebhook webhooks = 4;
}

// ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
message IoK8sApiAdmissionregistrationV1ValidatingWebhookConfigurationList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of ValidatingWebhookConfiguration.
    repeated IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook
message IoK8sApiAdmissionregistrationV1WebhookClientConfig {
    // `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
    bytes caBundle = 1;

    // `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
    // 
    // If the webhook is running within the cluster, then you should use `service`.
    IoK8sApiAdmissionregistrationV1ServiceReference service = 2;

    // `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
    // 
    // The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
    // 
    // Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
    // 
    // The scheme must be "https"; the URL must begin with "https://".
    // 
    // A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
    // 
    // Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    string url = 3;
}

// AuditAnnotation describes how to produce an audit annotation for an API request.
message IoK8sApiAdmissionregistrationV1alpha1AuditAnnotation {
    // key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
    // 
    // The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
    // 
    // If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
    // 
    // Required.
    string key = 1;

    // valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
    // 
    // If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.
    // 
    // Required.
    string valueExpression = 2;
}

// ExpressionWarning is a warning information that targets a specific expression.
message IoK8sApiAdmissionregistrationV1alpha1ExpressionWarning {
    // The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
    string fieldRef = 1;

    // The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
    string warning = 2;
}

message IoK8sApiAdmissionregistrationV1alpha1MatchCondition {
    // Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
    // 
    // 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
    //   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    // 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
    //   request resource.
    // Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
    // 
    // Required.
    string expression = 1;

    // Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
    // 
    // Required.
    string name = 2;
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
message IoK8sApiAdmissionregistrationV1alpha1MatchResources {
    // ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
    repeated IoK8sApiAdmissionregistrationV1alpha1NamedRuleWithOperations excludeResourceRules = 1;

    // matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
    // 
    // - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
    // 
    // - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
    // 
    // Defaults to "Equivalent"
    string matchPolicy = 2;

    // NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.
    // 
    // For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
    //   "matchExpressions": [
    //     {
    //       "key": "runlevel",
    //       "operator": "NotIn",
    //       "values": [
    //         "0",
    //         "1"
    //       ]
    //     }
    //   ]
    // }
    // 
    // If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
    //   "matchExpressions": [
    //     {
    //       "key": "environment",
    //       "operator": "In",
    //       "values": [
    //         "prod",
    //         "staging"
    //       ]
    //     }
    //   ]
    // }
    // 
    // See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
    // 
    // Default to the empty LabelSelector, which matches everything.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 3;

    // ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
    IoK8sApimachineryPkgApisMetaV1LabelSelector objectSelector = 4;

    // ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
    repeated IoK8sApiAdmissionregistrationV1alpha1NamedRuleWithOperations resourceRules = 5;
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
message IoK8sApiAdmissionregistrationV1alpha1NamedRuleWithOperations {
    // APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
    repeated string apiGroups = 1;

    // APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
    repeated string apiVersions = 2;

    // Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
    repeated string operations = 3;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    repeated string resourceNames = 4;

    // Resources is a list of resources this rule applies to.
    // 
    // For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
    // 
    // If wildcard is present, the validation rule will ensure resources do not overlap with each other.
    // 
    // Depending on the enclosing object, subresources might not be allowed. Required.
    repeated string resources = 5;

    // scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
    string scope = 6;
}

// ParamKind is a tuple of Group Kind and Version.
message IoK8sApiAdmissionregistrationV1alpha1ParamKind {
    // APIVersion is the API group version the resources belong to. In format of "group/version". Required.
    string apiVersion = 1;

    // Kind is the API kind the resources belong to. Required.
    string kind = 2;
}

// ParamRef references a parameter resource
message IoK8sApiAdmissionregistrationV1alpha1ParamRef {
    // Name of the resource being referenced.
    string name = 1;

    // Namespace of the referenced resource. Should be empty for the cluster-scoped resources
    string namespace = 2;
}

// TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
message IoK8sApiAdmissionregistrationV1alpha1TypeChecking {
    // The type checking warnings for each expression.
    repeated IoK8sApiAdmissionregistrationV1alpha1ExpressionWarning expressionWarnings = 1;
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the ValidatingAdmissionPolicy.
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpec spec = 4;

    // The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus status = 5;
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpec spec = 4;
}

// ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of PolicyBinding.
    repeated IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpec {
    // MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.
    IoK8sApiAdmissionregistrationV1alpha1MatchResources matchResources = 1;

    // ParamRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
    IoK8sApiAdmissionregistrationV1alpha1ParamRef paramRef = 2;

    // PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
    string policyName = 3;

    // validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.
    // 
    // Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.
    // 
    // validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.
    // 
    // The supported actions values are:
    // 
    // "Deny" specifies that a validation failure results in a denied request.
    // 
    // "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.
    // 
    // "Audit" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{"message": "Invalid value", {"policy": "policy.example.com", {"binding": "policybinding.example.com", {"expressionIndex": "1", {"validationActions": ["Audit"]}]"`
    // 
    // Clients should expect to handle additional values by ignoring any values not recognized.
    // 
    // "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
    // 
    // Required.
    repeated string validationActions = 4;
}

// ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of ValidatingAdmissionPolicy.
    repeated IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpec {
    // auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
    repeated IoK8sApiAdmissionregistrationV1alpha1AuditAnnotation auditAnnotations = 1;

    // failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
    // 
    // A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.
    // 
    // failurePolicy does not define how validations that evaluate to false are handled.
    // 
    // When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
    // 
    // Allowed values are Ignore or Fail. Defaults to Fail.
    string failurePolicy = 2;

    // MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
    // 
    // If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
    // 
    // The exact matching logic is (in order):
    //   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
    //   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
    //   3. If any matchCondition evaluates to an error (but none are FALSE):
    //      - If failurePolicy=Fail, reject the request
    //      - If failurePolicy=Ignore, the policy is skipped
    repeated IoK8sApiAdmissionregistrationV1alpha1MatchCondition matchConditions = 3;

    // MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
    IoK8sApiAdmissionregistrationV1alpha1MatchResources matchConstraints = 4;

    // ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.
    IoK8sApiAdmissionregistrationV1alpha1ParamKind paramKind = 5;

    // Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
    repeated IoK8sApiAdmissionregistrationV1alpha1Validation validations = 6;
}

// ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
message IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus {
    // The conditions represent the latest available observations of a policy's current state.
    repeated IoK8sApimachineryPkgApisMetaV1Condition conditions = 1;

    // The generation observed by the controller.
    int64 observedGeneration = 2;

    // The results of type checking for each expression. Presence of this field indicates the completion of the type checking.
    IoK8sApiAdmissionregistrationV1alpha1TypeChecking typeChecking = 3;
}

// Validation specifies the CEL expression which is used to apply the validation.
message IoK8sApiAdmissionregistrationV1alpha1Validation {
    // Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
    // 
    // - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
    //   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    // - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
    //   request resource.
    // 
    // The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
    // 
    // Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
    // 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
    // 	  "import", "let", "loop", "package", "namespace", "return".
    // Examples:
    //   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
    //   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
    //   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
    // 
    // Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
    //   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
    //     non-intersecting elements in `Y` are appended, retaining their partial order.
    //   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
    //     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
    //     non-intersecting keys are appended, retaining their partial order.
    // Required.
    string expression = 1;

    // Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
    string message = 2;

    // messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"
    string messageExpression = 3;

    // Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
    string reason = 4;
}

// An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
message IoK8sApiApiserverinternalV1alpha1ServerStorageVersion {
    // The ID of the reporting API server.
    string apiServerID = 1;

    // The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.
    repeated string decodableVersions = 2;

    // The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
    string encodingVersion = 3;
}

// Storage version of a specific resource.
message IoK8sApiApiserverinternalV1alpha1StorageVersion {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // The name is <group>.<resource>.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec is an empty spec. It is here to comply with Kubernetes API style.
    IoK8sApiApiserverinternalV1alpha1StorageVersionSpec spec = 4;

    // API server instances report the version they can decode and the version they encode objects to when persisting objects in the backend.
    IoK8sApiApiserverinternalV1alpha1StorageVersionStatus status = 5;
}

// Describes the state of the storageVersion at a certain point.
message IoK8sApiApiserverinternalV1alpha1StorageVersionCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // If set, this represents the .metadata.generation that the condition was set based upon.
    int64 observedGeneration = 3;

    // The reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of the condition.
    string type = 6;
}

// A list of StorageVersions.
message IoK8sApiApiserverinternalV1alpha1StorageVersionList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items holds a list of StorageVersion
    repeated IoK8sApiApiserverinternalV1alpha1StorageVersion items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// StorageVersionSpec is an empty spec.
message IoK8sApiApiserverinternalV1alpha1StorageVersionSpec {}

// API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
message IoK8sApiApiserverinternalV1alpha1StorageVersionStatus {
    // If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
    string commonEncodingVersion = 1;

    // The latest available observations of the storageVersion's state.
    repeated IoK8sApiApiserverinternalV1alpha1StorageVersionCondition conditions = 2;

    // The reported versions per API server instance.
    repeated IoK8sApiApiserverinternalV1alpha1ServerStorageVersion storageVersions = 3;
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
message IoK8sApiAppsV1ControllerRevision {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Data is the serialized representation of the state.
    IoK8sApimachineryPkgRuntimeRawExtension data = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // Revision indicates the revision of the state represented by Data.
    int64 revision = 5;
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
message IoK8sApiAppsV1ControllerRevisionList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of ControllerRevisions
    repeated IoK8sApiAppsV1ControllerRevision items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DaemonSet represents the configuration of a daemon set.
message IoK8sApiAppsV1DaemonSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiAppsV1DaemonSetSpec spec = 4;

    // The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiAppsV1DaemonSetStatus status = 5;
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
message IoK8sApiAppsV1DaemonSetCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of DaemonSet condition.
    string type = 5;
}

// DaemonSetList is a collection of daemon sets.
message IoK8sApiAppsV1DaemonSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // A list of daemon sets.
    repeated IoK8sApiAppsV1DaemonSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DaemonSetSpec is the specification of a daemon set.
message IoK8sApiAppsV1DaemonSetSpec {
    // The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
    int32 minReadySeconds = 1;

    // The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    int32 revisionHistoryLimit = 2;

    // A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;

    // An update strategy to replace existing DaemonSet pods with new pods.
    IoK8sApiAppsV1DaemonSetUpdateStrategy updateStrategy = 5;
}

// DaemonSetStatus represents the current status of a daemon set.
message IoK8sApiAppsV1DaemonSetStatus {
    // Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    int32 collisionCount = 1;

    // Represents the latest available observations of a DaemonSet's current state.
    repeated IoK8sApiAppsV1DaemonSetCondition conditions = 2;

    // The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 currentNumberScheduled = 3;

    // The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 desiredNumberScheduled = 4;

    // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    int32 numberAvailable = 5;

    // The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 numberMisscheduled = 6;

    // numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.
    int32 numberReady = 7;

    // The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    int32 numberUnavailable = 8;

    // The most recent generation observed by the daemon set controller.
    int64 observedGeneration = 9;

    // The total number of nodes that are running updated daemon pod
    int32 updatedNumberScheduled = 10;
}

// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
message IoK8sApiAppsV1DaemonSetUpdateStrategy {
    // Rolling update config params. Present only if type = "RollingUpdate".
    IoK8sApiAppsV1RollingUpdateDaemonSet rollingUpdate = 1;

    // Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
    string type = 2;
}

// Deployment enables declarative updates for Pods and ReplicaSets.
message IoK8sApiAppsV1Deployment {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the Deployment.
    IoK8sApiAppsV1DeploymentSpec spec = 4;

    // Most recently observed status of the Deployment.
    IoK8sApiAppsV1DeploymentStatus status = 5;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message IoK8sApiAppsV1DeploymentCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // The last time this condition was updated.
    string lastUpdateTime = 2;

    // A human readable message indicating details about the transition.
    string message = 3;

    // The reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of deployment condition.
    string type = 6;
}

// DeploymentList is a list of Deployments.
message IoK8sApiAppsV1DeploymentList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Deployments.
    repeated IoK8sApiAppsV1Deployment items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
message IoK8sApiAppsV1DeploymentSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Indicates that the deployment is paused.
    bool paused = 2;

    // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    int32 progressDeadlineSeconds = 3;

    // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    int32 replicas = 4;

    // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    int32 revisionHistoryLimit = 5;

    // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 6;

    // The deployment strategy to use to replace existing pods with new ones.
    IoK8sApiAppsV1DeploymentStrategy strategy = 7;

    // Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is "Always".
    IoK8sApiCoreV1PodTemplateSpec template = 8;
}

// DeploymentStatus is the most recently observed status of the Deployment.
message IoK8sApiAppsV1DeploymentStatus {
    // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    int32 availableReplicas = 1;

    // Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    int32 collisionCount = 2;

    // Represents the latest available observations of a deployment's current state.
    repeated IoK8sApiAppsV1DeploymentCondition conditions = 3;

    // The generation observed by the deployment controller.
    int64 observedGeneration = 4;

    // readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
    int32 readyReplicas = 5;

    // Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    int32 replicas = 6;

    // Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    int32 unavailableReplicas = 7;

    // Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    int32 updatedReplicas = 8;
}

// DeploymentStrategy describes how to replace existing pods with new ones.
message IoK8sApiAppsV1DeploymentStrategy {
    // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    IoK8sApiAppsV1RollingUpdateDeployment rollingUpdate = 1;

    // Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
    string type = 2;
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
message IoK8sApiAppsV1ReplicaSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiAppsV1ReplicaSetSpec spec = 4;

    // Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiAppsV1ReplicaSetStatus status = 5;
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
message IoK8sApiAppsV1ReplicaSetCondition {
    // The last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of replica set condition.
    string type = 5;
}

// ReplicaSetList is a collection of ReplicaSets.
message IoK8sApiAppsV1ReplicaSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    repeated IoK8sApiAppsV1ReplicaSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ReplicaSetSpec is the specification of a ReplicaSet.
message IoK8sApiAppsV1ReplicaSetSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    int32 replicas = 2;

    // Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
message IoK8sApiAppsV1ReplicaSetStatus {
    // The number of available replicas (ready for at least minReadySeconds) for this replica set.
    int32 availableReplicas = 1;

    // Represents the latest available observations of a replica set's current state.
    repeated IoK8sApiAppsV1ReplicaSetCondition conditions = 2;

    // The number of pods that have labels matching the labels of the pod template of the replicaset.
    int32 fullyLabeledReplicas = 3;

    // ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
    int64 observedGeneration = 4;

    // readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
    int32 readyReplicas = 5;

    // Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    int32 replicas = 6;
}

// Spec to control the desired behavior of daemon set rolling update.
message IoK8sApiAppsV1RollingUpdateDaemonSet {
    // The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.
    string maxSurge = 1;

    // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    string maxUnavailable = 2;
}

// Spec to control the desired behavior of rolling update.
message IoK8sApiAppsV1RollingUpdateDeployment {
    // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
    string maxSurge = 1;

    // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    string maxUnavailable = 2;
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
message IoK8sApiAppsV1RollingUpdateStatefulSetStrategy {
    // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
    string maxUnavailable = 1;

    // Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
    int32 partition = 2;
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
// 
// The StatefulSet guarantees that a given network identity will always map to the same storage identity.
message IoK8sApiAppsV1StatefulSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the desired identities of pods in this set.
    IoK8sApiAppsV1StatefulSetSpec spec = 4;

    // Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    IoK8sApiAppsV1StatefulSetStatus status = 5;
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
message IoK8sApiAppsV1StatefulSetCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of statefulset condition.
    string type = 5;
}

// StatefulSetList is a collection of StatefulSets.
message IoK8sApiAppsV1StatefulSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of stateful sets.
    repeated IoK8sApiAppsV1StatefulSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
message IoK8sApiAppsV1StatefulSetOrdinals {
    // start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:
    //   [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
    // If unset, defaults to 0. Replica indices will be in the range:
    //   [0, .spec.replicas).
    int32 start = 1;
}

// StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
message IoK8sApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy {
    // WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
    string whenDeleted = 1;

    // WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
    string whenScaled = 2;
}

// A StatefulSetSpec is the specification of a StatefulSet.
message IoK8sApiAppsV1StatefulSetSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a "0" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.
    IoK8sApiAppsV1StatefulSetOrdinals ordinals = 2;

    // persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.  +optional
    IoK8sApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy persistentVolumeClaimRetentionPolicy = 3;

    // podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    string podManagementPolicy = 4;

    // replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    int32 replicas = 5;

    // revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    int32 revisionHistoryLimit = 6;

    // selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 7;

    // serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
    string serviceName = 8;

    // template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format <statefulsetname>-<podindex>. For example, a pod in a StatefulSet named "web" with index number "3" would be named "web-3". The only allowed template.spec.restartPolicy value is "Always".
    IoK8sApiCoreV1PodTemplateSpec template = 9;

    // updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    IoK8sApiAppsV1StatefulSetUpdateStrategy updateStrategy = 10;

    // volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    repeated IoK8sApiCoreV1PersistentVolumeClaim volumeClaimTemplates = 11;
}

// StatefulSetStatus represents the current state of a StatefulSet.
message IoK8sApiAppsV1StatefulSetStatus {
    // Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
    int32 availableReplicas = 1;

    // collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    int32 collisionCount = 2;

    // Represents the latest available observations of a statefulset's current state.
    repeated IoK8sApiAppsV1StatefulSetCondition conditions = 3;

    // currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    int32 currentReplicas = 4;

    // currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    string currentRevision = 5;

    // observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    int64 observedGeneration = 6;

    // readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
    int32 readyReplicas = 7;

    // replicas is the number of Pods created by the StatefulSet controller.
    int32 replicas = 8;

    // updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    string updateRevision = 9;

    // updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    int32 updatedReplicas = 10;
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
message IoK8sApiAppsV1StatefulSetUpdateStrategy {
    // RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    IoK8sApiAppsV1RollingUpdateStatefulSetStrategy rollingUpdate = 1;

    // Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
    string type = 2;
}

// BoundObjectReference is a reference to an object that a token is bound to.
message IoK8sApiAuthenticationV1BoundObjectReference {
    // API version of the referent.
    string apiVersion = 1;

    // Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
    string kind = 2;

    // Name of the referent.
    string name = 3;

    // UID of the referent.
    string uid = 4;
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
message IoK8sApiAuthenticationV1SelfSubjectReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Status is filled in by the server with the user attributes.
    IoK8sApiAuthenticationV1SelfSubjectReviewStatus status = 4;
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
message IoK8sApiAuthenticationV1SelfSubjectReviewStatus {
    // User attributes of the user making this request.
    IoK8sApiAuthenticationV1UserInfo userInfo = 1;
}

// TokenRequest requests a token for a given service account.
message IoK8sApiAuthenticationV1TokenRequest {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthenticationV1TokenRequestSpec spec = 4;

    // Status is filled in by the server and indicates whether the token can be authenticated.
    IoK8sApiAuthenticationV1TokenRequestStatus status = 5;
}

// TokenRequestSpec contains client provided parameters of a token request.
message IoK8sApiAuthenticationV1TokenRequestSpec {
    // Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
    repeated string audiences = 1;

    // BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
    IoK8sApiAuthenticationV1BoundObjectReference boundObjectRef = 2;

    // ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
    int64 expirationSeconds = 3;
}

// TokenRequestStatus is the result of a token request.
message IoK8sApiAuthenticationV1TokenRequestStatus {
    // ExpirationTimestamp is the time of expiration of the returned token.
    string expirationTimestamp = 1;

    // Token is the opaque bearer token.
    string token = 2;
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
message IoK8sApiAuthenticationV1TokenReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthenticationV1TokenReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request can be authenticated.
    IoK8sApiAuthenticationV1TokenReviewStatus status = 5;
}

// TokenReviewSpec is a description of the token authentication request.
message IoK8sApiAuthenticationV1TokenReviewSpec {
    // Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
    repeated string audiences = 1;

    // Token is the opaque bearer token.
    string token = 2;
}

// TokenReviewStatus is the result of the token authentication request.
message IoK8sApiAuthenticationV1TokenReviewStatus {
    // Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
    repeated string audiences = 1;

    // Authenticated indicates that the token was associated with a known user.
    bool authenticated = 2;

    // Error indicates that the token couldn't be checked
    string error = 3;

    // User is the UserInfo associated with the provided token.
    IoK8sApiAuthenticationV1UserInfo user = 4;
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
message IoK8sApiAuthenticationV1UserInfo {
    // Any additional information provided by the authenticator.
    map<string, google.protobuf.ListValue> extra = 1;

    // The names of groups this user is a part of.
    repeated string groups = 2;

    // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
    string uid = 3;

    // The name that uniquely identifies this user among all active users.
    string username = 4;
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
message IoK8sApiAuthenticationV1alpha1SelfSubjectReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Status is filled in by the server with the user attributes.
    IoK8sApiAuthenticationV1alpha1SelfSubjectReviewStatus status = 4;
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
message IoK8sApiAuthenticationV1alpha1SelfSubjectReviewStatus {
    // User attributes of the user making this request.
    IoK8sApiAuthenticationV1UserInfo userInfo = 1;
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
message IoK8sApiAuthenticationV1beta1SelfSubjectReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Status is filled in by the server with the user attributes.
    IoK8sApiAuthenticationV1beta1SelfSubjectReviewStatus status = 4;
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
message IoK8sApiAuthenticationV1beta1SelfSubjectReviewStatus {
    // User attributes of the user making this request.
    IoK8sApiAuthenticationV1UserInfo userInfo = 1;
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
message IoK8sApiAuthorizationV1LocalSubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
    IoK8sApiAuthorizationV1SubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1SubjectAccessReviewStatus status = 5;
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
message IoK8sApiAuthorizationV1NonResourceAttributes {
    // Path is the URL path of the request
    string path = 1;

    // Verb is the standard HTTP verb
    string verb = 2;
}

// NonResourceRule holds information that describes a rule for the non-resource
message IoK8sApiAuthorizationV1NonResourceRule {
    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
    repeated string nonResourceURLs = 1;

    // Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
    repeated string verbs = 2;
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
message IoK8sApiAuthorizationV1ResourceAttributes {
    // Group is the API Group of the Resource.  "*" means all.
    string group = 1;

    // Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
    string name = 2;

    // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    string namespace = 3;

    // Resource is one of the existing resource types.  "*" means all.
    string resource = 4;

    // Subresource is one of the existing resource types.  "" means none.
    string subresource = 5;

    // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
    string verb = 6;

    // Version is the API Version of the Resource.  "*" means all.
    string version = 7;
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
message IoK8sApiAuthorizationV1ResourceRule {
    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
    repeated string apiGroups = 1;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
    repeated string resourceNames = 2;

    // Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
    //  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
    repeated string resources = 3;

    // Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
    repeated string verbs = 4;
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
message IoK8sApiAuthorizationV1SelfSubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.  user and groups must be empty
    IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1SubjectAccessReviewStatus status = 5;
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
message IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec {
    // NonResourceAttributes describes information for a non-resource access request
    IoK8sApiAuthorizationV1NonResourceAttributes nonResourceAttributes = 1;

    // ResourceAuthorizationAttributes describes information for a resource access request
    IoK8sApiAuthorizationV1ResourceAttributes resourceAttributes = 2;
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
message IoK8sApiAuthorizationV1SelfSubjectRulesReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.
    IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec spec = 4;

    // Status is filled in by the server and indicates the set of actions a user can perform.
    IoK8sApiAuthorizationV1SubjectRulesReviewStatus status = 5;
}

// SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
message IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec {
    // Namespace to evaluate rules for. Required.
    string namespace = 1;
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
message IoK8sApiAuthorizationV1SubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthorizationV1SubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1SubjectAccessReviewStatus status = 5;
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
message IoK8sApiAuthorizationV1SubjectAccessReviewSpec {
    // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
    map<string, google.protobuf.ListValue> extra = 1;

    // Groups is the groups you're testing for.
    repeated string groups = 2;

    // NonResourceAttributes describes information for a non-resource access request
    IoK8sApiAuthorizationV1NonResourceAttributes nonResourceAttributes = 3;

    // ResourceAuthorizationAttributes describes information for a resource access request
    IoK8sApiAuthorizationV1ResourceAttributes resourceAttributes = 4;

    // UID information about the requesting user.
    string uid = 5;

    // User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
    string user = 6;
}

// SubjectAccessReviewStatus
message IoK8sApiAuthorizationV1SubjectAccessReviewStatus {
    // Allowed is required. True if the action would be allowed, false otherwise.
    bool allowed = 1;

    // Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
    bool denied = 2;

    // EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
    string evaluationError = 3;

    // Reason is optional.  It indicates why a request was allowed or denied.
    string reason = 4;
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
message IoK8sApiAuthorizationV1SubjectRulesReviewStatus {
    // EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
    string evaluationError = 1;

    // Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
    bool incomplete = 2;

    // NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    repeated IoK8sApiAuthorizationV1NonResourceRule nonResourceRules = 3;

    // ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    repeated IoK8sApiAuthorizationV1ResourceRule resourceRules = 4;
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
message IoK8sApiAutoscalingV1CrossVersionObjectReference {
    // apiVersion is the API version of the referent
    string apiVersion = 1;

    // kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 3;
}

// configuration of a horizontal pod autoscaler.
message IoK8sApiAutoscalingV1HorizontalPodAutoscaler {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec spec = 4;

    // status is the current information about the autoscaler.
    IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus status = 5;
}

// list of horizontal pod autoscaler objects.
message IoK8sApiAutoscalingV1HorizontalPodAutoscalerList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of horizontal pod autoscaler objects.
    repeated IoK8sApiAutoscalingV1HorizontalPodAutoscaler items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// specification of a horizontal pod autoscaler.
message IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec {
    // maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
    int32 maxReplicas = 1;

    // minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
    int32 minReplicas = 2;

    // reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
    IoK8sApiAutoscalingV1CrossVersionObjectReference scaleTargetRef = 3;

    // targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
    int32 targetCPUUtilizationPercentage = 4;
}

// current status of a horizontal pod autoscaler
message IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus {
    // currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
    int32 currentCPUUtilizationPercentage = 1;

    // currentReplicas is the current number of replicas of pods managed by this autoscaler.
    int32 currentReplicas = 2;

    // desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
    int32 desiredReplicas = 3;

    // lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
    string lastScaleTime = 4;

    // observedGeneration is the most recent generation observed by this autoscaler.
    int64 observedGeneration = 5;
}

// Scale represents a scaling request for a resource.
message IoK8sApiAutoscalingV1Scale {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    IoK8sApiAutoscalingV1ScaleSpec spec = 4;

    // status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
    IoK8sApiAutoscalingV1ScaleStatus status = 5;
}

// ScaleSpec describes the attributes of a scale subresource.
message IoK8sApiAutoscalingV1ScaleSpec {
    // replicas is the desired number of instances for the scaled object.
    int32 replicas = 1;
}

// ScaleStatus represents the current status of a scale subresource.
message IoK8sApiAutoscalingV1ScaleStatus {
    // replicas is the actual number of observed instances of the scaled object.
    int32 replicas = 1;

    // selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    string selector = 2;
}

// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
message IoK8sApiAutoscalingV2ContainerResourceMetricSource {
    // container is the name of the container in the pods of the scaling target
    string container = 1;

    // name is the name of the resource in question.
    string name = 2;

    // target specifies the target value for the given metric
    IoK8sApiAutoscalingV2MetricTarget target = 3;
}

// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
message IoK8sApiAutoscalingV2ContainerResourceMetricStatus {
    // container is the name of the container in the pods of the scaling target
    string container = 1;

    // current contains the current value for the given metric
    IoK8sApiAutoscalingV2MetricValueStatus current = 2;

    // name is the name of the resource in question.
    string name = 3;
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
message IoK8sApiAutoscalingV2CrossVersionObjectReference {
    // apiVersion is the API version of the referent
    string apiVersion = 1;

    // kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 3;
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
message IoK8sApiAutoscalingV2ExternalMetricSource {
    // metric identifies the target metric by name and selector
    IoK8sApiAutoscalingV2MetricIdentifier metric = 1;

    // target specifies the target value for the given metric
    IoK8sApiAutoscalingV2MetricTarget target = 2;
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
message IoK8sApiAutoscalingV2ExternalMetricStatus {
    // current contains the current value for the given metric
    IoK8sApiAutoscalingV2MetricValueStatus current = 1;

    // metric identifies the target metric by name and selector
    IoK8sApiAutoscalingV2MetricIdentifier metric = 2;
}

// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
message IoK8sApiAutoscalingV2HPAScalingPolicy {
    // periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
    int32 periodSeconds = 1;

    // type is used to specify the scaling policy.
    string type = 2;

    // value contains the amount of change which is permitted by the policy. It must be greater than zero
    int32 value = 3;
}

// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
message IoK8sApiAutoscalingV2HPAScalingRules {
    // policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
    repeated IoK8sApiAutoscalingV2HPAScalingPolicy policies = 1;

    // selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
    string selectPolicy = 2;

    // stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
    int32 stabilizationWindowSeconds = 3;
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
message IoK8sApiAutoscalingV2HorizontalPodAutoscaler {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    IoK8sApiAutoscalingV2HorizontalPodAutoscalerSpec spec = 4;

    // status is the current information about the autoscaler.
    IoK8sApiAutoscalingV2HorizontalPodAutoscalerStatus status = 5;
}

// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
message IoK8sApiAutoscalingV2HorizontalPodAutoscalerBehavior {
    // scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).
    IoK8sApiAutoscalingV2HPAScalingRules scaleDown = 1;

    // scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:
    //   * increase no more than 4 pods per 60 seconds
    //   * double the number of pods per 60 seconds
    // No stabilization is used.
    IoK8sApiAutoscalingV2HPAScalingRules scaleUp = 2;
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
message IoK8sApiAutoscalingV2HorizontalPodAutoscalerCondition {
    // lastTransitionTime is the last time the condition transitioned from one status to another
    string lastTransitionTime = 1;

    // message is a human-readable explanation containing details about the transition
    string message = 2;

    // reason is the reason for the condition's last transition.
    string reason = 3;

    // status is the status of the condition (True, False, Unknown)
    string status = 4;

    // type describes the current condition
    string type = 5;
}

// HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
message IoK8sApiAutoscalingV2HorizontalPodAutoscalerList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of horizontal pod autoscaler objects.
    repeated IoK8sApiAutoscalingV2HorizontalPodAutoscaler items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // metadata is the standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
message IoK8sApiAutoscalingV2HorizontalPodAutoscalerSpec {
    // behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.
    IoK8sApiAutoscalingV2HorizontalPodAutoscalerBehavior behavior = 1;

    // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
    int32 maxReplicas = 2;

    // metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
    repeated IoK8sApiAutoscalingV2MetricSpec metrics = 3;

    // minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
    int32 minReplicas = 4;

    // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
    IoK8sApiAutoscalingV2CrossVersionObjectReference scaleTargetRef = 5;
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message IoK8sApiAutoscalingV2HorizontalPodAutoscalerStatus {
    // conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
    repeated IoK8sApiAutoscalingV2HorizontalPodAutoscalerCondition conditions = 1;

    // currentMetrics is the last read state of the metrics used by this autoscaler.
    repeated IoK8sApiAutoscalingV2MetricStatus currentMetrics = 2;

    // currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
    int32 currentReplicas = 3;

    // desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
    int32 desiredReplicas = 4;

    // lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
    string lastScaleTime = 5;

    // observedGeneration is the most recent generation observed by this autoscaler.
    int64 observedGeneration = 6;
}

// MetricIdentifier defines the name and optionally selector for a metric
message IoK8sApiAutoscalingV2MetricIdentifier {
    // name is the name of the given metric
    string name = 1;

    // selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 2;
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
message IoK8sApiAutoscalingV2MetricSpec {
    // containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
    IoK8sApiAutoscalingV2ContainerResourceMetricSource containerResource = 1;

    // external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
    IoK8sApiAutoscalingV2ExternalMetricSource external = 2;

    // object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
    IoK8sApiAutoscalingV2ObjectMetricSource object = 3;

    // pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
    IoK8sApiAutoscalingV2PodsMetricSource pods = 4;

    // resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
    IoK8sApiAutoscalingV2ResourceMetricSource resource = 5;

    // type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
    string type = 6;
}

// MetricStatus describes the last-read state of a single metric.
message IoK8sApiAutoscalingV2MetricStatus {
    // container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
    IoK8sApiAutoscalingV2ContainerResourceMetricStatus containerResource = 1;

    // external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
    IoK8sApiAutoscalingV2ExternalMetricStatus external = 2;

    // object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
    IoK8sApiAutoscalingV2ObjectMetricStatus object = 3;

    // pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
    IoK8sApiAutoscalingV2PodsMetricStatus pods = 4;

    // resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
    IoK8sApiAutoscalingV2ResourceMetricStatus resource = 5;

    // type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
    string type = 6;
}

// MetricTarget defines the target value, average value, or average utilization of a specific metric
message IoK8sApiAutoscalingV2MetricTarget {
    // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
    int32 averageUtilization = 1;

    // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
    string averageValue = 2;

    // type represents whether the metric type is Utilization, Value, or AverageValue
    string type = 3;

    // value is the target value of the metric (as a quantity).
    string value = 4;
}

// MetricValueStatus holds the current value for a metric
message IoK8sApiAutoscalingV2MetricValueStatus {
    // currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
    int32 averageUtilization = 1;

    // averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
    string averageValue = 2;

    // value is the current value of the metric (as a quantity).
    string value = 3;
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
message IoK8sApiAutoscalingV2ObjectMetricSource {
    // describedObject specifies the descriptions of a object,such as kind,name apiVersion
    IoK8sApiAutoscalingV2CrossVersionObjectReference describedObject = 1;

    // metric identifies the target metric by name and selector
    IoK8sApiAutoscalingV2MetricIdentifier metric = 2;

    // target specifies the target value for the given metric
    IoK8sApiAutoscalingV2MetricTarget target = 3;
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
message IoK8sApiAutoscalingV2ObjectMetricStatus {
    // current contains the current value for the given metric
    IoK8sApiAutoscalingV2MetricValueStatus current = 1;

    // DescribedObject specifies the descriptions of a object,such as kind,name apiVersion
    IoK8sApiAutoscalingV2CrossVersionObjectReference describedObject = 2;

    // metric identifies the target metric by name and selector
    IoK8sApiAutoscalingV2MetricIdentifier metric = 3;
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
message IoK8sApiAutoscalingV2PodsMetricSource {
    // metric identifies the target metric by name and selector
    IoK8sApiAutoscalingV2MetricIdentifier metric = 1;

    // target specifies the target value for the given metric
    IoK8sApiAutoscalingV2MetricTarget target = 2;
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
message IoK8sApiAutoscalingV2PodsMetricStatus {
    // current contains the current value for the given metric
    IoK8sApiAutoscalingV2MetricValueStatus current = 1;

    // metric identifies the target metric by name and selector
    IoK8sApiAutoscalingV2MetricIdentifier metric = 2;
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
message IoK8sApiAutoscalingV2ResourceMetricSource {
    // name is the name of the resource in question.
    string name = 1;

    // target specifies the target value for the given metric
    IoK8sApiAutoscalingV2MetricTarget target = 2;
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
message IoK8sApiAutoscalingV2ResourceMetricStatus {
    // current contains the current value for the given metric
    IoK8sApiAutoscalingV2MetricValueStatus current = 1;

    // name is the name of the resource in question.
    string name = 2;
}

// CronJob represents the configuration of a single cron job.
message IoK8sApiBatchV1CronJob {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiBatchV1CronJobSpec spec = 4;

    // Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiBatchV1CronJobStatus status = 5;
}

// CronJobList is a collection of cron jobs.
message IoK8sApiBatchV1CronJobList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of CronJobs.
    repeated IoK8sApiBatchV1CronJob items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
message IoK8sApiBatchV1CronJobSpec {
    // Specifies how to treat concurrent executions of a Job. Valid values are:
    // 
    // - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
    string concurrencyPolicy = 1;

    // The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
    int32 failedJobsHistoryLimit = 2;

    // Specifies the job that will be created when executing a CronJob.
    IoK8sApiBatchV1JobTemplateSpec jobTemplate = 3;

    // The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    string schedule = 4;

    // Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    int64 startingDeadlineSeconds = 5;

    // The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
    int32 successfulJobsHistoryLimit = 6;

    // This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
    bool suspend = 7;

    // The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
    string timeZone = 8;
}

// CronJobStatus represents the current state of a cron job.
message IoK8sApiBatchV1CronJobStatus {
    // A list of pointers to currently running jobs.
    repeated IoK8sApiCoreV1ObjectReference active = 1;

    // Information when was the last time the job was successfully scheduled.
    string lastScheduleTime = 2;

    // Information when was the last time the job successfully completed.
    string lastSuccessfulTime = 3;
}

// Job represents the configuration of a single job.
message IoK8sApiBatchV1Job {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiBatchV1JobSpec spec = 4;

    // Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiBatchV1JobStatus status = 5;
}

// JobCondition describes current state of a job.
message IoK8sApiBatchV1JobCondition {
    // Last time the condition was checked.
    string lastProbeTime = 1;

    // Last time the condition transit from one status to another.
    string lastTransitionTime = 2;

    // Human readable message indicating details about last transition.
    string message = 3;

    // (brief) reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of job condition, Complete or Failed.
    string type = 6;
}

// JobList is a collection of jobs.
message IoK8sApiBatchV1JobList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of Jobs.
    repeated IoK8sApiBatchV1Job items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// JobSpec describes how the job execution will look like.
message IoK8sApiBatchV1JobSpec {
    // Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
    int64 activeDeadlineSeconds = 1;

    // Specifies the number of retries before marking this job failed. Defaults to 6
    int32 backoffLimit = 2;

    // completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
    // 
    // `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
    // 
    // `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
    // 
    // More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
    string completionMode = 3;

    // Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    int32 completions = 4;

    // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
    bool manualSelector = 5;

    // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    int32 parallelism = 6;

    // Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.
    // 
    // This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).
    IoK8sApiBatchV1PodFailurePolicy podFailurePolicy = 7;

    // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 8;

    // suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
    bool suspend = 9;

    // Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    IoK8sApiCoreV1PodTemplateSpec template = 10;

    // ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
    int32 ttlSecondsAfterFinished = 11;
}

// JobStatus represents the current state of a Job.
message IoK8sApiBatchV1JobStatus {
    // The number of pending and running pods.
    int32 active = 1;

    // completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
    string completedIndexes = 2;

    // Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
    string completionTime = 3;

    // The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    repeated IoK8sApiBatchV1JobCondition conditions = 4;

    // The number of pods which reached phase Failed.
    int32 failed = 5;

    // The number of pods which have a Ready condition.
    // 
    // This field is beta-level. The job controller populates the field when the feature gate JobReadyPods is enabled (enabled by default).
    int32 ready = 6;

    // Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
    string startTime = 7;

    // The number of pods which reached phase Succeeded.
    int32 succeeded = 8;

    // uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
    // 
    // The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:
    // 
    // 1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding
    //     counter.
    // 
    // Old jobs might not be tracked using this field, in which case the field remains null.
    IoK8sApiBatchV1UncountedTerminatedPods uncountedTerminatedPods = 9;
}

// JobTemplateSpec describes the data a Job should have when created from a template
message IoK8sApiBatchV1JobTemplateSpec {
    // Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 1;

    // Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiBatchV1JobSpec spec = 2;
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
message IoK8sApiBatchV1PodFailurePolicy {
    // A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
    repeated IoK8sApiBatchV1PodFailurePolicyRule rules = 1;
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
message IoK8sApiBatchV1PodFailurePolicyOnExitCodesRequirement {
    // Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
    string containerName = 1;

    // Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
    // 
    // - In: the requirement is satisfied if at least one container exit code
    //   (might be multiple if there are multiple containers not restricted
    //   by the 'containerName' field) is in the set of specified values.
    // - NotIn: the requirement is satisfied if at least one container exit code
    //   (might be multiple if there are multiple containers not restricted
    //   by the 'containerName' field) is not in the set of specified values.
    // Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
    string operator = 2;

    // Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
    repeated int32 values = 3;
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
message IoK8sApiBatchV1PodFailurePolicyOnPodConditionsPattern {
    // Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
    string status = 1;

    // Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
    string type = 2;
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
message IoK8sApiBatchV1PodFailurePolicyRule {
    // Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
    // 
    // - FailJob: indicates that the pod's job is marked as Failed and all
    //   running pods are terminated.
    // - Ignore: indicates that the counter towards the .backoffLimit is not
    //   incremented and a replacement pod is created.
    // - Count: indicates that the pod is handled in the default way - the
    //   counter towards the .backoffLimit is incremented.
    // Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
    string action = 1;

    // Represents the requirement on the container exit codes.
    IoK8sApiBatchV1PodFailurePolicyOnExitCodesRequirement onExitCodes = 2;

    // Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
    repeated IoK8sApiBatchV1PodFailurePolicyOnPodConditionsPattern onPodConditions = 3;
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
message IoK8sApiBatchV1UncountedTerminatedPods {
    // failed holds UIDs of failed Pods.
    repeated string failed = 1;

    // succeeded holds UIDs of succeeded Pods.
    repeated string succeeded = 2;
}

// CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
// 
// Kubelets use this API to obtain:
//  1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
//  2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
// 
// This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
message IoK8sApiCertificatesV1CertificateSigningRequest {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.
    IoK8sApiCertificatesV1CertificateSigningRequestSpec spec = 4;

    // status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.
    IoK8sApiCertificatesV1CertificateSigningRequestStatus status = 5;
}

// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
message IoK8sApiCertificatesV1CertificateSigningRequestCondition {
    // lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
    string lastTransitionTime = 1;

    // lastUpdateTime is the time of the last update to this condition
    string lastUpdateTime = 2;

    // message contains a human readable message with details about the request state
    string message = 3;

    // reason indicates a brief reason for the request state
    string reason = 4;

    // status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
    string status = 5;

    // type of the condition. Known conditions are "Approved", "Denied", and "Failed".
    // 
    // An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
    // 
    // A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
    // 
    // A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
    // 
    // Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
    // 
    // Only one condition of a given type is allowed.
    string type = 6;
}

// CertificateSigningRequestList is a collection of CertificateSigningRequest objects
message IoK8sApiCertificatesV1CertificateSigningRequestList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a collection of CertificateSigningRequest objects
    repeated IoK8sApiCertificatesV1CertificateSigningRequest items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CertificateSigningRequestSpec contains the certificate request.
message IoK8sApiCertificatesV1CertificateSigningRequestSpec {
    // expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.
    // 
    // The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.
    // 
    // Certificate signers may not honor this field for various reasons:
    // 
    //   1. Old signer that is unaware of the field (such as the in-tree
    //      implementations prior to v1.22)
    //   2. Signer whose configured maximum is shorter than the requested duration
    //   3. Signer whose configured minimum is longer than the requested duration
    // 
    // The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
    int32 expirationSeconds = 1;

    // extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
    map<string, google.protobuf.ListValue> extra = 2;

    // groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
    repeated string groups = 3;

    // request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
    bytes request = 4;

    // signerName indicates the requested signer, and is a qualified name.
    // 
    // List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
    // 
    // Well-known Kubernetes signers are:
    //  1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
    //   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
    //  2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
    //   Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
    //  3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
    //   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
    // 
    // More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
    // 
    // Custom signerNames can also be specified. The signer defines:
    //  1. Trust distribution: how trust (CA bundles) are distributed.
    //  2. Permitted subjects: and behavior when a disallowed subject is requested.
    //  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
    //  4. Required, permitted, or forbidden key usages / extended key usages.
    //  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
    //  6. Whether or not requests for CA certificates are allowed.
    string signerName = 5;

    // uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
    string uid = 6;

    // usages specifies a set of key usages requested in the issued certificate.
    // 
    // Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
    // 
    // Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
    // 
    // Valid values are:
    //  "signing", "digital signature", "content commitment",
    //  "key encipherment", "key agreement", "data encipherment",
    //  "cert sign", "crl sign", "encipher only", "decipher only", "any",
    //  "server auth", "client auth",
    //  "code signing", "email protection", "s/mime",
    //  "ipsec end system", "ipsec tunnel", "ipsec user",
    //  "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
    repeated string usages = 7;

    // username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
    string username = 8;
}

// CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
message IoK8sApiCertificatesV1CertificateSigningRequestStatus {
    // certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.
    // 
    // If the certificate signing request is denied, a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added and this field remains empty.
    // 
    // Validation requirements:
    //  1. certificate must contain one or more PEM blocks.
    //  2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
    //   must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
    //  3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
    //   to allow for explanatory text as described in section 5.2 of RFC7468.
    // 
    // If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.
    // 
    // The certificate is encoded in PEM format.
    // 
    // When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
    // 
    //     base64(
    //     -----BEGIN CERTIFICATE-----
    //     ...
    //     -----END CERTIFICATE-----
    //     )
    bytes certificate = 1;

    // conditions applied to the request. Known conditions are "Approved", "Denied", and "Failed".
    repeated IoK8sApiCertificatesV1CertificateSigningRequestCondition conditions = 2;
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
// 
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
// 
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
message IoK8sApiCertificatesV1alpha1ClusterTrustBundle {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // metadata contains the object metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec contains the signer (if any) and trust anchors.
    IoK8sApiCertificatesV1alpha1ClusterTrustBundleSpec spec = 4;
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
message IoK8sApiCertificatesV1alpha1ClusterTrustBundleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a collection of ClusterTrustBundle objects
    repeated IoK8sApiCertificatesV1alpha1ClusterTrustBundle items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // metadata contains the list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
message IoK8sApiCertificatesV1alpha1ClusterTrustBundleSpec {
    // signerName indicates the associated signer, if any.
    // 
    // In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
    // 
    // If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
    // 
    // If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
    // 
    // List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
    string signerName = 1;

    // trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
    // 
    // The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
    // 
    // Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
    string trustBundle = 2;
}

// Lease defines a lease concept.
message IoK8sApiCoordinationV1Lease {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoordinationV1LeaseSpec spec = 4;
}

// LeaseList is a list of Lease objects.
message IoK8sApiCoordinationV1LeaseList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a list of schema objects.
    repeated IoK8sApiCoordinationV1Lease items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// LeaseSpec is a specification of a Lease.
message IoK8sApiCoordinationV1LeaseSpec {
    // acquireTime is a time when the current lease was acquired.
    string acquireTime = 1;

    // holderIdentity contains the identity of the holder of a current lease.
    string holderIdentity = 2;

    // leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed renewTime.
    int32 leaseDurationSeconds = 3;

    // leaseTransitions is the number of transitions of a lease between holders.
    int32 leaseTransitions = 4;

    // renewTime is a time when the current holder of a lease has last updated the lease.
    string renewTime = 5;
}

// Represents a Persistent Disk resource in AWS.
// 
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource {
    // fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    string fsType = 1;

    // partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    int32 partition = 2;

    // readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    bool readOnly = 3;

    // volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    string volumeID = 4;
}

// Affinity is a group of affinity scheduling rules.
message IoK8sApiCoreV1Affinity {
    // Describes node affinity scheduling rules for the pod.
    IoK8sApiCoreV1NodeAffinity nodeAffinity = 1;

    // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    IoK8sApiCoreV1PodAffinity podAffinity = 2;

    // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    IoK8sApiCoreV1PodAntiAffinity podAntiAffinity = 3;
}

// AttachedVolume describes a volume attached to a node
message IoK8sApiCoreV1AttachedVolume {
    // DevicePath represents the device path where the volume should be available
    string devicePath = 1;

    // Name of the attached volume
    string name = 2;
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
message IoK8sApiCoreV1AzureDiskVolumeSource {
    // cachingMode is the Host Caching mode: None, Read Only, Read Write.
    string cachingMode = 1;

    // diskName is the Name of the data disk in the blob storage
    string diskName = 2;

    // diskURI is the URI of data disk in the blob storage
    string diskURI = 3;

    // fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 4;

    // kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    string kind = 5;

    // readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 6;
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
message IoK8sApiCoreV1AzureFilePersistentVolumeSource {
    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 1;

    // secretName is the name of secret that contains Azure Storage Account Name and Key
    string secretName = 2;

    // secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
    string secretNamespace = 3;

    // shareName is the azure Share Name
    string shareName = 4;
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
message IoK8sApiCoreV1AzureFileVolumeSource {
    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 1;

    // secretName is the  name of secret that contains Azure Storage Account Name and Key
    string secretName = 2;

    // shareName is the azure share Name
    string shareName = 3;
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
message IoK8sApiCoreV1Binding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The target object that you want to bind to the standard object.
    IoK8sApiCoreV1ObjectReference target = 4;
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
message IoK8sApiCoreV1CSIPersistentVolumeSource {
    // controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    IoK8sApiCoreV1SecretReference controllerExpandSecretRef = 1;

    // controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    IoK8sApiCoreV1SecretReference controllerPublishSecretRef = 2;

    // driver is the name of the driver to use for this volume. Required.
    string driver = 3;

    // fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
    string fsType = 4;

    // nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    IoK8sApiCoreV1SecretReference nodeExpandSecretRef = 5;

    // nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    IoK8sApiCoreV1SecretReference nodePublishSecretRef = 6;

    // nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    IoK8sApiCoreV1SecretReference nodeStageSecretRef = 7;

    // readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
    bool readOnly = 8;

    // volumeAttributes of the volume to publish.
    map<string, string> volumeAttributes = 9;

    // volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
    string volumeHandle = 10;
}

// Represents a source location of a volume to mount, managed by an external CSI driver
message IoK8sApiCoreV1CSIVolumeSource {
    // driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    string driver = 1;

    // fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
    string fsType = 2;

    // nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
    IoK8sApiCoreV1LocalObjectReference nodePublishSecretRef = 3;

    // readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
    bool readOnly = 4;

    // volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
    map<string, string> volumeAttributes = 5;
}

// Adds and removes POSIX capabilities from running containers.
message IoK8sApiCoreV1Capabilities {
    // Added capabilities
    repeated string add = 1;

    // Removed capabilities
    repeated string drop = 2;
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1CephFSPersistentVolumeSource {
    // monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    repeated string monitors = 1;

    // path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    string path = 2;

    // readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    bool readOnly = 3;

    // secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    string secretFile = 4;

    // secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    IoK8sApiCoreV1SecretReference secretRef = 5;

    // user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    string user = 6;
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1CephFSVolumeSource {
    // monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    repeated string monitors = 1;

    // path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    string path = 2;

    // readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    bool readOnly = 3;

    // secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    string secretFile = 4;

    // secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    IoK8sApiCoreV1LocalObjectReference secretRef = 5;

    // user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    string user = 6;
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1CinderPersistentVolumeSource {
    // fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    string fsType = 1;

    // readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    bool readOnly = 2;

    // secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
    IoK8sApiCoreV1SecretReference secretRef = 3;

    // volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    string volumeID = 4;
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1CinderVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    string fsType = 1;

    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    bool readOnly = 2;

    // secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
    IoK8sApiCoreV1LocalObjectReference secretRef = 3;

    // volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    string volumeID = 4;
}

// ClaimSource describes a reference to a ResourceClaim.
// 
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
message IoK8sApiCoreV1ClaimSource {
    // ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
    string resourceClaimName = 1;

    // ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
    // 
    // The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
    // 
    // An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
    // 
    // This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
    string resourceClaimTemplateName = 2;
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
message IoK8sApiCoreV1ClientIPConfig {
    // timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
    int32 timeoutSeconds = 1;
}

// Information about the condition of a component.
message IoK8sApiCoreV1ComponentCondition {
    // Condition error code for a component. For example, a health check error code.
    string error = 1;

    // Message about the condition for a component. For example, information about a health check.
    string message = 2;

    // Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
    string status = 3;

    // Type of condition for a component. Valid value: "Healthy"
    string type = 4;
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
message IoK8sApiCoreV1ComponentStatus {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of component conditions observed
    repeated IoK8sApiCoreV1ComponentCondition conditions = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;
}

// Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
message IoK8sApiCoreV1ComponentStatusList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of ComponentStatus objects.
    repeated IoK8sApiCoreV1ComponentStatus items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ConfigMap holds configuration data for pods to consume.
message IoK8sApiCoreV1ConfigMap {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
    map<string, string> binaryData = 2;

    // Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
    map<string, string> data = 3;

    // Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
    bool immutable = 4;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 5;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 6;
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
// 
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
message IoK8sApiCoreV1ConfigMapEnvSource {
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;

    // Specify whether the ConfigMap must be defined
    bool optional = 2;
}

// Selects a key from a ConfigMap.
message IoK8sApiCoreV1ConfigMapKeySelector {
    // The key to select.
    string key = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // Specify whether the ConfigMap or its key must be defined
    bool optional = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message IoK8sApiCoreV1ConfigMapList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of ConfigMaps.
    repeated IoK8sApiCoreV1ConfigMap items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
message IoK8sApiCoreV1ConfigMapNodeConfigSource {
    // KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
    string kubeletConfigKey = 1;

    // Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
    string name = 2;

    // Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
    string namespace = 3;

    // ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
    string resourceVersion = 4;

    // UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
    string uid = 5;
}

// Adapts a ConfigMap into a projected volume.
// 
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
message IoK8sApiCoreV1ConfigMapProjection {
    // items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // optional specify whether the ConfigMap or its keys must be defined
    bool optional = 3;
}

// Adapts a ConfigMap into a volume.
// 
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1ConfigMapVolumeSource {
    // defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 2;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 3;

    // optional specify whether the ConfigMap or its keys must be defined
    bool optional = 4;
}

// A single application container that you want to run within a pod.
message IoK8sApiCoreV1Container {
    // Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string args = 1;

    // Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string command = 2;

    // List of environment variables to set in the container. Cannot be updated.
    repeated IoK8sApiCoreV1EnvVar env = 3;

    // List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    repeated IoK8sApiCoreV1EnvFromSource envFrom = 4;

    // Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    string image = 5;

    // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    string imagePullPolicy = 6;

    // Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    IoK8sApiCoreV1Lifecycle lifecycle = 7;

    // Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    IoK8sApiCoreV1Probe livenessProbe = 8;

    // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    string name = 9;

    // List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
    repeated IoK8sApiCoreV1ContainerPort ports = 10;

    // Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    IoK8sApiCoreV1Probe readinessProbe = 11;

    // Resources resize policy for the container.
    repeated IoK8sApiCoreV1ContainerResizePolicy resizePolicy = 12;

    // Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    IoK8sApiCoreV1ResourceRequirements resources = 13;

    // SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    IoK8sApiCoreV1SecurityContext securityContext = 14;

    // StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    IoK8sApiCoreV1Probe startupProbe = 15;

    // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    bool stdin = 16;

    // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    bool stdinOnce = 17;

    // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    string terminationMessagePath = 18;

    // Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    string terminationMessagePolicy = 19;

    // Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    bool tty = 20;

    // volumeDevices is the list of block devices to be used by the container.
    repeated IoK8sApiCoreV1VolumeDevice volumeDevices = 21;

    // Pod volumes to mount into the container's filesystem. Cannot be updated.
    repeated IoK8sApiCoreV1VolumeMount volumeMounts = 22;

    // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    string workingDir = 23;
}

// Describe a container image
message IoK8sApiCoreV1ContainerImage {
    // Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
    repeated string names = 1;

    // The size of the image in bytes.
    int64 sizeBytes = 2;
}

// ContainerPort represents a network port in a single container.
message IoK8sApiCoreV1ContainerPort {
    // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    int32 containerPort = 1;

    // What host IP to bind the external port to.
    string hostIP = 2;

    // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    int32 hostPort = 3;

    // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    string name = 4;

    // Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
    string protocol = 5;
}

// ContainerResizePolicy represents resource resize policy for the container.
message IoK8sApiCoreV1ContainerResizePolicy {
    // Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
    string resourceName = 1;

    // Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
    string restartPolicy = 2;
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
message IoK8sApiCoreV1ContainerState {
    // Details about a running container
    IoK8sApiCoreV1ContainerStateRunning running = 1;

    // Details about a terminated container
    IoK8sApiCoreV1ContainerStateTerminated terminated = 2;

    // Details about a waiting container
    IoK8sApiCoreV1ContainerStateWaiting waiting = 3;
}

// ContainerStateRunning is a running state of a container.
message IoK8sApiCoreV1ContainerStateRunning {
    // Time at which the container was last (re-)started
    string startedAt = 1;
}

// ContainerStateTerminated is a terminated state of a container.
message IoK8sApiCoreV1ContainerStateTerminated {
    // Container's ID in the format '<type>://<container_id>'
    string containerID = 1;

    // Exit status from the last termination of the container
    int32 exitCode = 2;

    // Time at which the container last terminated
    string finishedAt = 3;

    // Message regarding the last termination of the container
    string message = 4;

    // (brief) reason from the last termination of the container
    string reason = 5;

    // Signal from the last termination of the container
    int32 signal = 6;

    // Time at which previous execution of the container started
    string startedAt = 7;
}

// ContainerStateWaiting is a waiting state of a container.
message IoK8sApiCoreV1ContainerStateWaiting {
    // Message regarding why the container is not yet running.
    string message = 1;

    // (brief) reason the container is not yet running.
    string reason = 2;
}

// ContainerStatus contains details for the current status of this container.
message IoK8sApiCoreV1ContainerStatus {
    // AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
    map<string, string> allocatedResources = 1;

    // ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
    string containerID = 2;

    // Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
    string image = 3;

    // ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
    string imageID = 4;

    // LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
    IoK8sApiCoreV1ContainerState lastState = 5;

    // Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
    string name = 6;

    // Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
    // 
    // The value is typically used to determine whether a container is ready to accept traffic.
    bool ready = 7;

    // Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
    IoK8sApiCoreV1ResourceRequirements resources = 8;

    // RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
    int32 restartCount = 9;

    // Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
    bool started = 10;

    // State holds details about the container's current condition.
    IoK8sApiCoreV1ContainerState state = 11;
}

// DaemonEndpoint contains information about a single Daemon endpoint.
message IoK8sApiCoreV1DaemonEndpoint {
    // Port number of the given endpoint.
    int32 Port = 1;
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
message IoK8sApiCoreV1DownwardAPIProjection {
    // Items is a list of DownwardAPIVolume file
    repeated IoK8sApiCoreV1DownwardAPIVolumeFile items = 1;
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
message IoK8sApiCoreV1DownwardAPIVolumeFile {
    // Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    IoK8sApiCoreV1ObjectFieldSelector fieldRef = 1;

    // Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 mode = 2;

    // Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    string path = 3;

    // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    IoK8sApiCoreV1ResourceFieldSelector resourceFieldRef = 4;
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1DownwardAPIVolumeSource {
    // Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // Items is a list of downward API volume file
    repeated IoK8sApiCoreV1DownwardAPIVolumeFile items = 2;
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1EmptyDirVolumeSource {
    // medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    string medium = 1;

    // sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    string sizeLimit = 2;
}

// EndpointAddress is a tuple that describes single IP address.
message IoK8sApiCoreV1EndpointAddress {
    // The Hostname of this endpoint
    string hostname = 1;

    // The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
    string ip = 2;

    // Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
    string nodeName = 3;

    // Reference to object providing the endpoint.
    IoK8sApiCoreV1ObjectReference targetRef = 4;
}

// EndpointPort is a tuple that describes a single port.
message IoK8sApiCoreV1EndpointPort {
    // The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
    // 
    // * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
    // 
    // * Kubernetes-defined prefixed names:
    //   * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
    // 
    // * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
    string appProtocol = 1;

    // The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
    string name = 2;

    // The port number of the endpoint.
    int32 port = 3;

    // The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
    string protocol = 4;
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
// 
// 	{
// 	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
// 	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
// 	}
// 
// The resulting set of endpoints can be viewed as:
// 
// 	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
// 	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
message IoK8sApiCoreV1EndpointSubset {
    // IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
    repeated IoK8sApiCoreV1EndpointAddress addresses = 1;

    // IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
    repeated IoK8sApiCoreV1EndpointAddress notReadyAddresses = 2;

    // Port numbers available on the related IP addresses.
    repeated IoK8sApiCoreV1EndpointPort ports = 3;
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
// 
// 	 Name: "mysvc",
// 	 Subsets: [
// 	   {
// 	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
// 	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
// 	   },
// 	   {
// 	     Addresses: [{"ip": "10.10.3.3"}],
// 	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
// 	   },
// 	]
message IoK8sApiCoreV1Endpoints {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
    repeated IoK8sApiCoreV1EndpointSubset subsets = 4;
}

// EndpointsList is a list of endpoints.
message IoK8sApiCoreV1EndpointsList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of endpoints.
    repeated IoK8sApiCoreV1Endpoints items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// EnvFromSource represents the source of a set of ConfigMaps
message IoK8sApiCoreV1EnvFromSource {
    // The ConfigMap to select from
    IoK8sApiCoreV1ConfigMapEnvSource configMapRef = 1;

    // An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    string prefix = 2;

    // The Secret to select from
    IoK8sApiCoreV1SecretEnvSource secretRef = 3;
}

// EnvVar represents an environment variable present in a Container.
message IoK8sApiCoreV1EnvVar {
    // Name of the environment variable. Must be a C_IDENTIFIER.
    string name = 1;

    // Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    string value = 2;

    // Source for the environment variable's value. Cannot be used if value is not empty.
    IoK8sApiCoreV1EnvVarSource valueFrom = 3;
}

// EnvVarSource represents a source for the value of an EnvVar.
message IoK8sApiCoreV1EnvVarSource {
    // Selects a key of a ConfigMap.
    IoK8sApiCoreV1ConfigMapKeySelector configMapKeyRef = 1;

    // Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    IoK8sApiCoreV1ObjectFieldSelector fieldRef = 2;

    // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    IoK8sApiCoreV1ResourceFieldSelector resourceFieldRef = 3;

    // Selects a key of a secret in the pod's namespace
    IoK8sApiCoreV1SecretKeySelector secretKeyRef = 4;
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
// 
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
message IoK8sApiCoreV1EphemeralContainer {
    // Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string args = 1;

    // Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string command = 2;

    // List of environment variables to set in the container. Cannot be updated.
    repeated IoK8sApiCoreV1EnvVar env = 3;

    // List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    repeated IoK8sApiCoreV1EnvFromSource envFrom = 4;

    // Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
    string image = 5;

    // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    string imagePullPolicy = 6;

    // Lifecycle is not allowed for ephemeral containers.
    IoK8sApiCoreV1Lifecycle lifecycle = 7;

    // Probes are not allowed for ephemeral containers.
    IoK8sApiCoreV1Probe livenessProbe = 8;

    // Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
    string name = 9;

    // Ports are not allowed for ephemeral containers.
    repeated IoK8sApiCoreV1ContainerPort ports = 10;

    // Probes are not allowed for ephemeral containers.
    IoK8sApiCoreV1Probe readinessProbe = 11;

    // Resources resize policy for the container.
    repeated IoK8sApiCoreV1ContainerResizePolicy resizePolicy = 12;

    // Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
    IoK8sApiCoreV1ResourceRequirements resources = 13;

    // Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    IoK8sApiCoreV1SecurityContext securityContext = 14;

    // Probes are not allowed for ephemeral containers.
    IoK8sApiCoreV1Probe startupProbe = 15;

    // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    bool stdin = 16;

    // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    bool stdinOnce = 17;

    // If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
    // 
    // The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
    string targetContainerName = 18;

    // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    string terminationMessagePath = 19;

    // Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    string terminationMessagePolicy = 20;

    // Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    bool tty = 21;

    // volumeDevices is the list of block devices to be used by the container.
    repeated IoK8sApiCoreV1VolumeDevice volumeDevices = 22;

    // Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
    repeated IoK8sApiCoreV1VolumeMount volumeMounts = 23;

    // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    string workingDir = 24;
}

// Represents an ephemeral volume that is handled by a normal storage driver.
message IoK8sApiCoreV1EphemeralVolumeSource {
    // Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
    // 
    // An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
    // 
    // This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
    // 
    // Required, must not be nil.
    IoK8sApiCoreV1PersistentVolumeClaimTemplate volumeClaimTemplate = 1;
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
message IoK8sApiCoreV1Event {
    // What action was taken/failed regarding to the Regarding object.
    string action = 1;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 2;

    // The number of times this event has occurred.
    int32 count = 3;

    // Time when this Event was first observed.
    string eventTime = 4;

    // The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
    string firstTimestamp = 5;

    // The object that this event is about.
    IoK8sApiCoreV1ObjectReference involvedObject = 6;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 7;

    // The time at which the most recent occurrence of this event was recorded.
    string lastTimestamp = 8;

    // A human-readable description of the status of this operation.
    string message = 9;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 10;

    // This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
    string reason = 11;

    // Optional secondary object for more complex actions.
    IoK8sApiCoreV1ObjectReference related = 12;

    // Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
    string reportingComponent = 13;

    // ID of the controller instance, e.g. `kubelet-xyzf`.
    string reportingInstance = 14;

    // Data about the Event series this event represents or nil if it's a singleton Event.
    IoK8sApiCoreV1EventSeries series = 15;

    // The component reporting this event. Should be a short machine understandable string.
    IoK8sApiCoreV1EventSource source = 16;

    // Type of this event (Normal, Warning), new types could be added in the future
    string type = 17;
}

// EventList is a list of events.
message IoK8sApiCoreV1EventList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of events
    repeated IoK8sApiCoreV1Event items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
message IoK8sApiCoreV1EventSeries {
    // Number of occurrences in this series up to the last heartbeat time
    int32 count = 1;

    // Time of the last occurrence observed
    string lastObservedTime = 2;
}

// EventSource contains information for an event.
message IoK8sApiCoreV1EventSource {
    // Component from which the event is generated.
    string component = 1;

    // Node name on which the event is generated.
    string host = 2;
}

// ExecAction describes a "run in container" action.
message IoK8sApiCoreV1ExecAction {
    // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    repeated string command = 1;
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1FCVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // lun is Optional: FC target lun number
    int32 lun = 2;

    // readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 3;

    // targetWWNs is Optional: FC target worldwide names (WWNs)
    repeated string targetWWNs = 4;

    // wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    repeated string wwids = 5;
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
message IoK8sApiCoreV1FlexPersistentVolumeSource {
    // driver is the name of the driver to use for this volume.
    string driver = 1;

    // fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    string fsType = 2;

    // options is Optional: this field holds extra command options if any.
    map<string, string> options = 3;

    // readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    IoK8sApiCoreV1SecretReference secretRef = 5;
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
message IoK8sApiCoreV1FlexVolumeSource {
    // driver is the name of the driver to use for this volume.
    string driver = 1;

    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    string fsType = 2;

    // options is Optional: this field holds extra command options if any.
    map<string, string> options = 3;

    // readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    IoK8sApiCoreV1LocalObjectReference secretRef = 5;
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1FlockerVolumeSource {
    // datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
    string datasetName = 1;

    // datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
    string datasetUUID = 2;
}

// Represents a Persistent Disk resource in Google Compute Engine.
// 
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
message IoK8sApiCoreV1GCEPersistentDiskVolumeSource {
    // fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    string fsType = 1;

    // partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    int32 partition = 2;

    // pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    string pdName = 3;

    // readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    bool readOnly = 4;
}

message IoK8sApiCoreV1GRPCAction {
    // Port number of the gRPC service. Number must be in the range 1 to 65535.
    int32 port = 1;

    // Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
    // 
    // If this is not specified, the default behavior is defined by gRPC.
    string service = 2;
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
// 
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
message IoK8sApiCoreV1GitRepoVolumeSource {
    // directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    string directory = 1;

    // repository is the URL
    string repository = 2;

    // revision is the commit hash for the specified revision.
    string revision = 3;
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1GlusterfsPersistentVolumeSource {
    // endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    string endpoints = 1;

    // endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    string endpointsNamespace = 2;

    // path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    string path = 3;

    // readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    bool readOnly = 4;
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1GlusterfsVolumeSource {
    // endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    string endpoints = 1;

    // path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    string path = 2;

    // readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    bool readOnly = 3;
}

// HTTPGetAction describes an action based on HTTP Get requests.
message IoK8sApiCoreV1HTTPGetAction {
    // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    string host = 1;

    // Custom headers to set in the request. HTTP allows repeated headers.
    repeated IoK8sApiCoreV1HTTPHeader httpHeaders = 2;

    // Path to access on the HTTP server.
    string path = 3;

    // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    string port = 4;

    // Scheme to use for connecting to the host. Defaults to HTTP.
    string scheme = 5;
}

// HTTPHeader describes a custom header to be used in HTTP probes
message IoK8sApiCoreV1HTTPHeader {
    // The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    string name = 1;

    // The header field value
    string value = 2;
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
message IoK8sApiCoreV1HostAlias {
    // Hostnames for the above IP address.
    repeated string hostnames = 1;

    // IP address of the host file entry.
    string ip = 2;
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1HostPathVolumeSource {
    // path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    string path = 1;

    // type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    string type = 2;
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1ISCSIPersistentVolumeSource {
    // chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    bool chapAuthDiscovery = 1;

    // chapAuthSession defines whether support iSCSI Session CHAP authentication
    bool chapAuthSession = 2;

    // fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    string fsType = 3;

    // initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    string initiatorName = 4;

    // iqn is Target iSCSI Qualified Name.
    string iqn = 5;

    // iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    string iscsiInterface = 6;

    // lun is iSCSI Target Lun number.
    int32 lun = 7;

    // portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    repeated string portals = 8;

    // readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    bool readOnly = 9;

    // secretRef is the CHAP Secret for iSCSI target and initiator authentication
    IoK8sApiCoreV1SecretReference secretRef = 10;

    // targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    string targetPortal = 11;
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1ISCSIVolumeSource {
    // chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    bool chapAuthDiscovery = 1;

    // chapAuthSession defines whether support iSCSI Session CHAP authentication
    bool chapAuthSession = 2;

    // fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    string fsType = 3;

    // initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    string initiatorName = 4;

    // iqn is the target iSCSI Qualified Name.
    string iqn = 5;

    // iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    string iscsiInterface = 6;

    // lun represents iSCSI Target Lun number.
    int32 lun = 7;

    // portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    repeated string portals = 8;

    // readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    bool readOnly = 9;

    // secretRef is the CHAP Secret for iSCSI target and initiator authentication
    IoK8sApiCoreV1LocalObjectReference secretRef = 10;

    // targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    string targetPortal = 11;
}

// Maps a string key to a path within a volume.
message IoK8sApiCoreV1KeyToPath {
    // key is the key to project.
    string key = 1;

    // mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 mode = 2;

    // path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    string path = 3;
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
message IoK8sApiCoreV1Lifecycle {
    // PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    IoK8sApiCoreV1LifecycleHandler postStart = 1;

    // PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    IoK8sApiCoreV1LifecycleHandler preStop = 2;
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
message IoK8sApiCoreV1LifecycleHandler {
    // Exec specifies the action to take.
    IoK8sApiCoreV1ExecAction exec = 1;

    // HTTPGet specifies the http request to perform.
    IoK8sApiCoreV1HTTPGetAction httpGet = 2;

    // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
    IoK8sApiCoreV1TCPSocketAction tcpSocket = 3;
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
message IoK8sApiCoreV1LimitRange {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1LimitRangeSpec spec = 4;
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
message IoK8sApiCoreV1LimitRangeItem {
    // Default resource requirement limit value by resource name if resource limit is omitted.
    map<string, string> default = 1;

    // DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
    map<string, string> defaultRequest = 2;

    // Max usage constraints on this kind by resource name.
    map<string, string> max = 3;

    // MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
    map<string, string> maxLimitRequestRatio = 4;

    // Min usage constraints on this kind by resource name.
    map<string, string> min = 5;

    // Type of resource that this limit applies to.
    string type = 6;
}

// LimitRangeList is a list of LimitRange items.
message IoK8sApiCoreV1LimitRangeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    repeated IoK8sApiCoreV1LimitRange items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
message IoK8sApiCoreV1LimitRangeSpec {
    // Limits is the list of LimitRangeItem objects that are enforced.
    repeated IoK8sApiCoreV1LimitRangeItem limits = 1;
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
message IoK8sApiCoreV1LoadBalancerIngress {
    // Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
    string hostname = 1;

    // IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
    string ip = 2;

    // Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
    repeated IoK8sApiCoreV1PortStatus ports = 3;
}

// LoadBalancerStatus represents the status of a load-balancer.
message IoK8sApiCoreV1LoadBalancerStatus {
    // Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
    repeated IoK8sApiCoreV1LoadBalancerIngress ingress = 1;
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
message IoK8sApiCoreV1LocalObjectReference {
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;
}

// Local represents directly-attached storage with node affinity (Beta feature)
message IoK8sApiCoreV1LocalVolumeSource {
    // fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
    string fsType = 1;

    // path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
    string path = 2;
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1NFSVolumeSource {
    // path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    string path = 1;

    // readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    bool readOnly = 2;

    // server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    string server = 3;
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
message IoK8sApiCoreV1Namespace {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NamespaceSpec spec = 4;

    // Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NamespaceStatus status = 5;
}

// NamespaceCondition contains details about state of namespace.
message IoK8sApiCoreV1NamespaceCondition {
    string lastTransitionTime = 1;
    string message = 2;
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of namespace controller condition.
    string type = 5;
}

// NamespaceList is a list of Namespaces.
message IoK8sApiCoreV1NamespaceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    repeated IoK8sApiCoreV1Namespace items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// NamespaceSpec describes the attributes on a Namespace.
message IoK8sApiCoreV1NamespaceSpec {
    // Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
    repeated string finalizers = 1;
}

// NamespaceStatus is information about the current status of a Namespace.
message IoK8sApiCoreV1NamespaceStatus {
    // Represents the latest available observations of a namespace's current state.
    repeated IoK8sApiCoreV1NamespaceCondition conditions = 1;

    // Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
    string phase = 2;
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
message IoK8sApiCoreV1Node {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NodeSpec spec = 4;

    // Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NodeStatus status = 5;
}

// NodeAddress contains information for the node's address.
message IoK8sApiCoreV1NodeAddress {
    // The node address.
    string address = 1;

    // Node address type, one of Hostname, ExternalIP or InternalIP.
    string type = 2;
}

// Node affinity is a group of node affinity scheduling rules.
message IoK8sApiCoreV1NodeAffinity {
    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    repeated IoK8sApiCoreV1PreferredSchedulingTerm preferredDuringSchedulingIgnoredDuringExecution = 1;

    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    IoK8sApiCoreV1NodeSelector requiredDuringSchedulingIgnoredDuringExecution = 2;
}

// NodeCondition contains condition information for a node.
message IoK8sApiCoreV1NodeCondition {
    // Last time we got an update on a given condition.
    string lastHeartbeatTime = 1;

    // Last time the condition transit from one status to another.
    string lastTransitionTime = 2;

    // Human readable message indicating details about last transition.
    string message = 3;

    // (brief) reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of node condition.
    string type = 6;
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
message IoK8sApiCoreV1NodeConfigSource {
    // ConfigMap is a reference to a Node's ConfigMap
    IoK8sApiCoreV1ConfigMapNodeConfigSource configMap = 1;
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
message IoK8sApiCoreV1NodeConfigStatus {
    // Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
    IoK8sApiCoreV1NodeConfigSource active = 1;

    // Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
    IoK8sApiCoreV1NodeConfigSource assigned = 2;

    // Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
    string error = 3;

    // LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
    IoK8sApiCoreV1NodeConfigSource lastKnownGood = 4;
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
message IoK8sApiCoreV1NodeDaemonEndpoints {
    // Endpoint on which Kubelet is listening.
    IoK8sApiCoreV1DaemonEndpoint kubeletEndpoint = 1;
}

// NodeList is the whole list of all Nodes which have been registered with master.
message IoK8sApiCoreV1NodeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of nodes
    repeated IoK8sApiCoreV1Node items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
message IoK8sApiCoreV1NodeSelector {
    // Required. A list of node selector terms. The terms are ORed.
    repeated IoK8sApiCoreV1NodeSelectorTerm nodeSelectorTerms = 1;
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
message IoK8sApiCoreV1NodeSelectorRequirement {
    // The label key that the selector applies to.
    string key = 1;

    // Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    string operator = 2;

    // An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    repeated string values = 3;
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
message IoK8sApiCoreV1NodeSelectorTerm {
    // A list of node selector requirements by node's labels.
    repeated IoK8sApiCoreV1NodeSelectorRequirement matchExpressions = 1;

    // A list of node selector requirements by node's fields.
    repeated IoK8sApiCoreV1NodeSelectorRequirement matchFields = 2;
}

// NodeSpec describes the attributes that a node is created with.
message IoK8sApiCoreV1NodeSpec {
    // Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
    IoK8sApiCoreV1NodeConfigSource configSource = 1;

    // Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
    string externalID = 2;

    // PodCIDR represents the pod IP range assigned to the node.
    string podCIDR = 3;

    // podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
    repeated string podCIDRs = 4;

    // ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
    string providerID = 5;

    // If specified, the node's taints.
    repeated IoK8sApiCoreV1Taint taints = 6;

    // Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
    bool unschedulable = 7;
}

// NodeStatus is information about the current status of a node.
message IoK8sApiCoreV1NodeStatus {
    // List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
    repeated IoK8sApiCoreV1NodeAddress addresses = 1;

    // Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    map<string, string> allocatable = 2;

    // Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    map<string, string> capacity = 3;

    // Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    repeated IoK8sApiCoreV1NodeCondition conditions = 4;

    // Status of the config assigned to the node via the dynamic Kubelet config feature.
    IoK8sApiCoreV1NodeConfigStatus config = 5;

    // Endpoints of daemons running on the Node.
    IoK8sApiCoreV1NodeDaemonEndpoints daemonEndpoints = 6;

    // List of container images on this node
    repeated IoK8sApiCoreV1ContainerImage images = 7;

    // Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
    IoK8sApiCoreV1NodeSystemInfo nodeInfo = 8;

    // NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
    string phase = 9;

    // List of volumes that are attached to the node.
    repeated IoK8sApiCoreV1AttachedVolume volumesAttached = 10;

    // List of attachable volumes in use (mounted) by the node.
    repeated string volumesInUse = 11;
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
message IoK8sApiCoreV1NodeSystemInfo {
    // The Architecture reported by the node
    string architecture = 1;

    // Boot ID reported by the node.
    string bootID = 2;

    // ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
    string containerRuntimeVersion = 3;

    // Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    string kernelVersion = 4;

    // KubeProxy Version reported by the node.
    string kubeProxyVersion = 5;

    // Kubelet Version reported by the node.
    string kubeletVersion = 6;

    // MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
    string machineID = 7;

    // The Operating System reported by the node
    string operatingSystem = 8;

    // OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    string osImage = 9;

    // SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
    string systemUUID = 10;
}

// ObjectFieldSelector selects an APIVersioned field of an object.
message IoK8sApiCoreV1ObjectFieldSelector {
    // Version of the schema the FieldPath is written in terms of, defaults to "v1".
    string apiVersion = 1;

    // Path of the field to select in the specified API version.
    string fieldPath = 2;
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
message IoK8sApiCoreV1ObjectReference {
    // API version of the referent.
    string apiVersion = 1;

    // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    string fieldPath = 2;

    // Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 4;

    // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    string namespace = 5;

    // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resourceVersion = 6;

    // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    string uid = 7;
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
message IoK8sApiCoreV1PersistentVolume {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    IoK8sApiCoreV1PersistentVolumeSpec spec = 4;

    // status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    IoK8sApiCoreV1PersistentVolumeStatus status = 5;
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
message IoK8sApiCoreV1PersistentVolumeClaim {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    IoK8sApiCoreV1PersistentVolumeClaimSpec spec = 4;

    // status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    IoK8sApiCoreV1PersistentVolumeClaimStatus status = 5;
}

// PersistentVolumeClaimCondition contains details about state of pvc
message IoK8sApiCoreV1PersistentVolumeClaimCondition {
    // lastProbeTime is the time we probed the condition.
    string lastProbeTime = 1;

    // lastTransitionTime is the time the condition transitioned from one status to another.
    string lastTransitionTime = 2;

    // message is the human-readable message indicating details about last transition.
    string message = 3;

    // reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
    string reason = 4;
    string status = 5;
    string type = 6;
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
message IoK8sApiCoreV1PersistentVolumeClaimList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    repeated IoK8sApiCoreV1PersistentVolumeClaim items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
message IoK8sApiCoreV1PersistentVolumeClaimSpec {
    // accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    repeated string accessModes = 1;

    // dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
    IoK8sApiCoreV1TypedLocalObjectReference dataSource = 2;

    // dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
    //   allows any non-core object, as well as PersistentVolumeClaim objects.
    // * While dataSource ignores disallowed values (dropping them), dataSourceRef
    //   preserves all values, and generates an error if a disallowed value is
    //   specified.
    // * While dataSource only allows local objects, dataSourceRef allows objects
    //   in any namespaces.
    // (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    IoK8sApiCoreV1TypedObjectReference dataSourceRef = 3;

    // resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    IoK8sApiCoreV1ResourceRequirements resources = 4;

    // selector is a label query over volumes to consider for binding.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 5;

    // storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    string storageClassName = 6;

    // volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    string volumeMode = 7;

    // volumeName is the binding reference to the PersistentVolume backing this claim.
    string volumeName = 8;
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
message IoK8sApiCoreV1PersistentVolumeClaimStatus {
    // accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    repeated string accessModes = 1;

    // allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    map<string, string> allocatedResources = 2;

    // capacity represents the actual resources of the underlying volume.
    map<string, string> capacity = 3;

    // conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
    repeated IoK8sApiCoreV1PersistentVolumeClaimCondition conditions = 4;

    // phase represents the current phase of PersistentVolumeClaim.
    string phase = 5;

    // resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    string resizeStatus = 6;
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
message IoK8sApiCoreV1PersistentVolumeClaimTemplate {
    // May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 1;

    // The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
    IoK8sApiCoreV1PersistentVolumeClaimSpec spec = 2;
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
message IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
    // claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    string claimName = 1;

    // readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    bool readOnly = 2;
}

// PersistentVolumeList is a list of PersistentVolume items.
message IoK8sApiCoreV1PersistentVolumeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    repeated IoK8sApiCoreV1PersistentVolume items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PersistentVolumeSpec is the specification of a persistent volume.
message IoK8sApiCoreV1PersistentVolumeSpec {
    // accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
    repeated string accessModes = 1;

    // awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;

    // azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureDiskVolumeSource azureDisk = 3;

    // azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureFilePersistentVolumeSource azureFile = 4;

    // capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    map<string, string> capacity = 5;

    // cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1CephFSPersistentVolumeSource cephfs = 6;

    // cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    IoK8sApiCoreV1CinderPersistentVolumeSource cinder = 7;

    // claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
    IoK8sApiCoreV1ObjectReference claimRef = 8;

    // csi represents storage that is handled by an external CSI driver (Beta feature).
    IoK8sApiCoreV1CSIPersistentVolumeSource csi = 9;

    // fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    IoK8sApiCoreV1FCVolumeSource fc = 10;

    // flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    IoK8sApiCoreV1FlexPersistentVolumeSource flexVolume = 11;

    // flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
    IoK8sApiCoreV1FlockerVolumeSource flocker = 12;

    // gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk = 13;

    // glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    IoK8sApiCoreV1GlusterfsPersistentVolumeSource glusterfs = 14;

    // hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    IoK8sApiCoreV1HostPathVolumeSource hostPath = 15;

    // iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
    IoK8sApiCoreV1ISCSIPersistentVolumeSource iscsi = 16;

    // local represents directly-attached storage with node affinity
    IoK8sApiCoreV1LocalVolumeSource local = 17;

    // mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
    repeated string mountOptions = 18;

    // nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    IoK8sApiCoreV1NFSVolumeSource nfs = 19;

    // nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
    IoK8sApiCoreV1VolumeNodeAffinity nodeAffinity = 20;

    // persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
    string persistentVolumeReclaimPolicy = 21;

    // photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk = 22;

    // portworxVolume represents a portworx volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1PortworxVolumeSource portworxVolume = 23;

    // quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1QuobyteVolumeSource quobyte = 24;

    // rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    IoK8sApiCoreV1RBDPersistentVolumeSource rbd = 25;

    // scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    IoK8sApiCoreV1ScaleIOPersistentVolumeSource scaleIO = 26;

    // storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
    string storageClassName = 27;

    // storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
    IoK8sApiCoreV1StorageOSPersistentVolumeSource storageos = 28;

    // volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
    string volumeMode = 29;

    // vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume = 30;
}

// PersistentVolumeStatus is the current status of a persistent volume.
message IoK8sApiCoreV1PersistentVolumeStatus {
    // message is a human-readable message indicating details about why the volume is in this state.
    string message = 1;

    // phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
    string phase = 2;

    // reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
    string reason = 3;
}

// Represents a Photon Controller persistent disk resource.
message IoK8sApiCoreV1PhotonPersistentDiskVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // pdID is the ID that identifies Photon Controller persistent disk
    string pdID = 2;
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
message IoK8sApiCoreV1Pod {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodSpec spec = 4;

    // Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodStatus status = 5;
}

// Pod affinity is a group of inter pod affinity scheduling rules.
message IoK8sApiCoreV1PodAffinity {
    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    repeated IoK8sApiCoreV1WeightedPodAffinityTerm preferredDuringSchedulingIgnoredDuringExecution = 1;

    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    repeated IoK8sApiCoreV1PodAffinityTerm requiredDuringSchedulingIgnoredDuringExecution = 2;
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
message IoK8sApiCoreV1PodAffinityTerm {
    // A label query over a set of resources, in this case pods.
    IoK8sApimachineryPkgApisMetaV1LabelSelector labelSelector = 1;

    // A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 2;

    // namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    repeated string namespaces = 3;

    // This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    string topologyKey = 4;
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
message IoK8sApiCoreV1PodAntiAffinity {
    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    repeated IoK8sApiCoreV1WeightedPodAffinityTerm preferredDuringSchedulingIgnoredDuringExecution = 1;

    // If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    repeated IoK8sApiCoreV1PodAffinityTerm requiredDuringSchedulingIgnoredDuringExecution = 2;
}

// PodCondition contains details for the current condition of this pod.
message IoK8sApiCoreV1PodCondition {
    // Last time we probed the condition.
    string lastProbeTime = 1;

    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 2;

    // Human-readable message indicating details about last transition.
    string message = 3;

    // Unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 4;

    // Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    string status = 5;

    // Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    string type = 6;
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
message IoK8sApiCoreV1PodDNSConfig {
    // A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
    repeated string nameservers = 1;

    // A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
    repeated IoK8sApiCoreV1PodDNSConfigOption options = 2;

    // A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
    repeated string searches = 3;
}

// PodDNSConfigOption defines DNS resolver options of a pod.
message IoK8sApiCoreV1PodDNSConfigOption {
    // Required.
    string name = 1;
    string value = 2;
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
// 
// 	IP: An IP address allocated to the pod. Routable at least within the cluster.
message IoK8sApiCoreV1PodIP {
    // ip is an IP address (IPv4 or IPv6) assigned to the pod
    string ip = 1;
}

// PodList is a list of Pods.
message IoK8sApiCoreV1PodList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
    repeated IoK8sApiCoreV1Pod items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodOS defines the OS parameters of a pod.
message IoK8sApiCoreV1PodOS {
    // Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
    string name = 1;
}

// PodReadinessGate contains the reference to a pod condition
message IoK8sApiCoreV1PodReadinessGate {
    // ConditionType refers to a condition in the pod's condition list with matching type.
    string conditionType = 1;
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
message IoK8sApiCoreV1PodResourceClaim {
    // Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
    string name = 1;

    // Source describes where to find the ResourceClaim.
    IoK8sApiCoreV1ClaimSource source = 2;
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
message IoK8sApiCoreV1PodSchedulingGate {
    // Name of the scheduling gate. Each scheduling gate must have a unique name field.
    string name = 1;
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
message IoK8sApiCoreV1PodSecurityContext {
    // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
    // 
    // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
    // 
    // If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    int64 fsGroup = 1;

    // fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    string fsGroupChangePolicy = 2;

    // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    int64 runAsGroup = 3;

    // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    bool runAsNonRoot = 4;

    // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    int64 runAsUser = 5;

    // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    IoK8sApiCoreV1SELinuxOptions seLinuxOptions = 6;

    // The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    IoK8sApiCoreV1SeccompProfile seccompProfile = 7;

    // A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    repeated int64 supplementalGroups = 8;

    // Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    repeated IoK8sApiCoreV1Sysctl sysctls = 9;

    // The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    IoK8sApiCoreV1WindowsSecurityContextOptions windowsOptions = 10;
}

// PodSpec is a description of a pod.
message IoK8sApiCoreV1PodSpec {
    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    int64 activeDeadlineSeconds = 1;

    // If specified, the pod's scheduling constraints
    IoK8sApiCoreV1Affinity affinity = 2;

    // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    bool automountServiceAccountToken = 3;

    // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
    repeated IoK8sApiCoreV1Container containers = 4;

    // Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
    IoK8sApiCoreV1PodDNSConfig dnsConfig = 5;

    // Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
    string dnsPolicy = 6;

    // EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
    bool enableServiceLinks = 7;

    // List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
    repeated IoK8sApiCoreV1EphemeralContainer ephemeralContainers = 8;

    // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
    repeated IoK8sApiCoreV1HostAlias hostAliases = 9;

    // Use the host's ipc namespace. Optional: Default to false.
    bool hostIPC = 10;

    // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    bool hostNetwork = 11;

    // Use the host's pid namespace. Optional: Default to false.
    bool hostPID = 12;

    // Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
    bool hostUsers = 13;

    // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    string hostname = 14;

    // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    repeated IoK8sApiCoreV1LocalObjectReference imagePullSecrets = 15;

    // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    repeated IoK8sApiCoreV1Container initContainers = 16;

    // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    string nodeName = 17;

    // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    map<string, string> nodeSelector = 18;

    // Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
    // 
    // If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
    // 
    // If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
    IoK8sApiCoreV1PodOS os = 19;

    // Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
    map<string, string> overhead = 20;

    // PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
    string preemptionPolicy = 21;

    // The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
    int32 priority = 22;

    // If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    string priorityClassName = 23;

    // If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
    repeated IoK8sApiCoreV1PodReadinessGate readinessGates = 24;

    // ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
    // 
    // This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
    // 
    // This field is immutable.
    repeated IoK8sApiCoreV1PodResourceClaim resourceClaims = 25;

    // Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
    string restartPolicy = 26;

    // RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
    string runtimeClassName = 27;

    // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    string schedulerName = 28;

    // SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
    // 
    // SchedulingGates can only be set at pod creation time, and be removed only afterwards.
    // 
    // This is a beta feature enabled by the PodSchedulingReadiness feature gate.
    repeated IoK8sApiCoreV1PodSchedulingGate schedulingGates = 29;

    // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    IoK8sApiCoreV1PodSecurityContext securityContext = 30;

    // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    string serviceAccount = 31;

    // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    string serviceAccountName = 32;

    // If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
    bool setHostnameAsFQDN = 33;

    // Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
    bool shareProcessNamespace = 34;

    // If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
    string subdomain = 35;

    // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    int64 terminationGracePeriodSeconds = 36;

    // If specified, the pod's tolerations.
    repeated IoK8sApiCoreV1Toleration tolerations = 37;

    // TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
    repeated IoK8sApiCoreV1TopologySpreadConstraint topologySpreadConstraints = 38;

    // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
    repeated IoK8sApiCoreV1Volume volumes = 39;
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
message IoK8sApiCoreV1PodStatus {
    // Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    repeated IoK8sApiCoreV1PodCondition conditions = 1;

    // The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    repeated IoK8sApiCoreV1ContainerStatus containerStatuses = 2;

    // Status for any ephemeral containers that have run in this pod.
    repeated IoK8sApiCoreV1ContainerStatus ephemeralContainerStatuses = 3;

    // IP address of the host to which the pod is assigned. Empty if not yet scheduled.
    string hostIP = 4;

    // The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    repeated IoK8sApiCoreV1ContainerStatus initContainerStatuses = 5;

    // A human readable message indicating details about why the pod is in this condition.
    string message = 6;

    // nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
    string nominatedNodeName = 7;

    // The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
    // 
    // Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
    // 
    // More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
    string phase = 8;

    // IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
    string podIP = 9;

    // podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
    repeated IoK8sApiCoreV1PodIP podIPs = 10;

    // The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
    string qosClass = 11;

    // A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
    string reason = 12;

    // Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
    string resize = 13;

    // RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
    string startTime = 14;
}

// PodTemplate describes a template for creating copies of a predefined pod.
message IoK8sApiCoreV1PodTemplate {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// PodTemplateList is a list of PodTemplates.
message IoK8sApiCoreV1PodTemplateList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of pod templates
    repeated IoK8sApiCoreV1PodTemplate items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodTemplateSpec describes the data a pod should have when created from a template
message IoK8sApiCoreV1PodTemplateSpec {
    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 1;

    // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodSpec spec = 2;
}

message IoK8sApiCoreV1PortStatus {
    // Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
    //   CamelCase names
    // - cloud provider specific error values must have names that comply with the
    //   format foo.example.com/CamelCase.
    string error = 1;

    // Port is the port number of the service port of which status is recorded here
    int32 port = 2;

    // Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
    string protocol = 3;
}

// PortworxVolumeSource represents a Portworx volume resource.
message IoK8sApiCoreV1PortworxVolumeSource {
    // fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 2;

    // volumeID uniquely identifies a Portworx volume
    string volumeID = 3;
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
message IoK8sApiCoreV1PreferredSchedulingTerm {
    // A node selector term, associated with the corresponding weight.
    IoK8sApiCoreV1NodeSelectorTerm preference = 1;

    // Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    int32 weight = 2;
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
message IoK8sApiCoreV1Probe {
    // Exec specifies the action to take.
    IoK8sApiCoreV1ExecAction exec = 1;

    // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    int32 failureThreshold = 2;

    // GRPC specifies an action involving a GRPC port.
    IoK8sApiCoreV1GRPCAction grpc = 3;

    // HTTPGet specifies the http request to perform.
    IoK8sApiCoreV1HTTPGetAction httpGet = 4;

    // Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    int32 initialDelaySeconds = 5;

    // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    int32 periodSeconds = 6;

    // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    int32 successThreshold = 7;

    // TCPSocket specifies an action involving a TCP port.
    IoK8sApiCoreV1TCPSocketAction tcpSocket = 8;

    // Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    int64 terminationGracePeriodSeconds = 9;

    // Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    int32 timeoutSeconds = 10;
}

// Represents a projected volume source
message IoK8sApiCoreV1ProjectedVolumeSource {
    // defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // sources is the list of volume projections
    repeated IoK8sApiCoreV1VolumeProjection sources = 2;
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1QuobyteVolumeSource {
    // group to map volume access to Default is no group
    string group = 1;

    // readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    bool readOnly = 2;

    // registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    string registry = 3;

    // tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    string tenant = 4;

    // user to map volume access to Defaults to serivceaccount user
    string user = 5;

    // volume is a string that references an already created Quobyte volume by name.
    string volume = 6;
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1RBDPersistentVolumeSource {
    // fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    string fsType = 1;

    // image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string image = 2;

    // keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string keyring = 3;

    // monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    repeated string monitors = 4;

    // pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string pool = 5;

    // readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    bool readOnly = 6;

    // secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    IoK8sApiCoreV1SecretReference secretRef = 7;

    // user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string user = 8;
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1RBDVolumeSource {
    // fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    string fsType = 1;

    // image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string image = 2;

    // keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string keyring = 3;

    // monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    repeated string monitors = 4;

    // pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string pool = 5;

    // readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    bool readOnly = 6;

    // secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    IoK8sApiCoreV1LocalObjectReference secretRef = 7;

    // user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    string user = 8;
}

// ReplicationController represents the configuration of a replication controller.
message IoK8sApiCoreV1ReplicationController {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ReplicationControllerSpec spec = 4;

    // Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ReplicationControllerStatus status = 5;
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
message IoK8sApiCoreV1ReplicationControllerCondition {
    // The last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of replication controller condition.
    string type = 5;
}

// ReplicationControllerList is a collection of replication controllers.
message IoK8sApiCoreV1ReplicationControllerList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    repeated IoK8sApiCoreV1ReplicationController items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ReplicationControllerSpec is the specification of a replication controller.
message IoK8sApiCoreV1ReplicationControllerSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    int32 replicas = 2;

    // Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    map<string, string> selector = 3;

    // Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// ReplicationControllerStatus represents the current status of a replication controller.
message IoK8sApiCoreV1ReplicationControllerStatus {
    // The number of available replicas (ready for at least minReadySeconds) for this replication controller.
    int32 availableReplicas = 1;

    // Represents the latest available observations of a replication controller's current state.
    repeated IoK8sApiCoreV1ReplicationControllerCondition conditions = 2;

    // The number of pods that have labels matching the labels of the pod template of the replication controller.
    int32 fullyLabeledReplicas = 3;

    // ObservedGeneration reflects the generation of the most recently observed replication controller.
    int64 observedGeneration = 4;

    // The number of ready replicas for this replication controller.
    int32 readyReplicas = 5;

    // Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    int32 replicas = 6;
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
message IoK8sApiCoreV1ResourceClaim {
    // Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    string name = 1;
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
message IoK8sApiCoreV1ResourceFieldSelector {
    // Container name: required for volumes, optional for env vars
    string containerName = 1;

    // Specifies the output format of the exposed resources, defaults to "1"
    string divisor = 2;

    // Required: resource to select
    string resource = 3;
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
message IoK8sApiCoreV1ResourceQuota {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ResourceQuotaSpec spec = 4;

    // Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ResourceQuotaStatus status = 5;
}

// ResourceQuotaList is a list of ResourceQuota items.
message IoK8sApiCoreV1ResourceQuotaList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    repeated IoK8sApiCoreV1ResourceQuota items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
message IoK8sApiCoreV1ResourceQuotaSpec {
    // hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    map<string, string> hard = 1;

    // scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
    IoK8sApiCoreV1ScopeSelector scopeSelector = 2;

    // A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
    repeated string scopes = 3;
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
message IoK8sApiCoreV1ResourceQuotaStatus {
    // Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    map<string, string> hard = 1;

    // Used is the current observed total usage of the resource in the namespace.
    map<string, string> used = 2;
}

// ResourceRequirements describes the compute resource requirements.
message IoK8sApiCoreV1ResourceRequirements {
    // Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
    // 
    // This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
    // 
    // This field is immutable. It can only be set for containers.
    repeated IoK8sApiCoreV1ResourceClaim claims = 1;

    // Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    map<string, string> limits = 2;

    // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    map<string, string> requests = 3;
}

// SELinuxOptions are the labels to be applied to the container
message IoK8sApiCoreV1SELinuxOptions {
    // Level is SELinux level label that applies to the container.
    string level = 1;

    // Role is a SELinux role label that applies to the container.
    string role = 2;

    // Type is a SELinux type label that applies to the container.
    string type = 3;

    // User is a SELinux user label that applies to the container.
    string user = 4;
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
message IoK8sApiCoreV1ScaleIOPersistentVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
    string fsType = 1;

    // gateway is the host address of the ScaleIO API Gateway.
    string gateway = 2;

    // protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    string protectionDomain = 3;

    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    IoK8sApiCoreV1SecretReference secretRef = 5;

    // sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
    bool sslEnabled = 6;

    // storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    string storageMode = 7;

    // storagePool is the ScaleIO Storage Pool associated with the protection domain.
    string storagePool = 8;

    // system is the name of the storage system as configured in ScaleIO.
    string system = 9;

    // volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
    string volumeName = 10;
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
message IoK8sApiCoreV1ScaleIOVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
    string fsType = 1;

    // gateway is the host address of the ScaleIO API Gateway.
    string gateway = 2;

    // protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    string protectionDomain = 3;

    // readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    IoK8sApiCoreV1LocalObjectReference secretRef = 5;

    // sslEnabled Flag enable/disable SSL communication with Gateway, default false
    bool sslEnabled = 6;

    // storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    string storageMode = 7;

    // storagePool is the ScaleIO Storage Pool associated with the protection domain.
    string storagePool = 8;

    // system is the name of the storage system as configured in ScaleIO.
    string system = 9;

    // volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
    string volumeName = 10;
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
message IoK8sApiCoreV1ScopeSelector {
    // A list of scope selector requirements by scope of the resources.
    repeated IoK8sApiCoreV1ScopedResourceSelectorRequirement matchExpressions = 1;
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
message IoK8sApiCoreV1ScopedResourceSelectorRequirement {
    // Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
    string operator = 1;

    // The name of the scope that the selector applies to.
    string scopeName = 2;

    // An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    repeated string values = 3;
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
message IoK8sApiCoreV1SeccompProfile {
    // localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
    string localhostProfile = 1;

    // type indicates which kind of seccomp profile will be applied. Valid options are:
    // 
    // Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    string type = 2;
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
message IoK8sApiCoreV1Secret {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
    map<string, string> data = 2;

    // Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
    bool immutable = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
    map<string, string> stringData = 6;

    // Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
    string type = 7;
}

// SecretEnvSource selects a Secret to populate the environment variables with.
// 
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
message IoK8sApiCoreV1SecretEnvSource {
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;

    // Specify whether the Secret must be defined
    bool optional = 2;
}

// SecretKeySelector selects a key of a Secret.
message IoK8sApiCoreV1SecretKeySelector {
    // The key of the secret to select from.  Must be a valid secret key.
    string key = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // Specify whether the Secret or its key must be defined
    bool optional = 3;
}

// SecretList is a list of Secret.
message IoK8sApiCoreV1SecretList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
    repeated IoK8sApiCoreV1Secret items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// Adapts a secret into a projected volume.
// 
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
message IoK8sApiCoreV1SecretProjection {
    // items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // optional field specify whether the Secret or its key must be defined
    bool optional = 3;
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
message IoK8sApiCoreV1SecretReference {
    // name is unique within a namespace to reference a secret resource.
    string name = 1;

    // namespace defines the space within which the secret name must be unique.
    string namespace = 2;
}

// Adapts a Secret into a volume.
// 
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1SecretVolumeSource {
    // defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 2;

    // optional field specify whether the Secret or its keys must be defined
    bool optional = 3;

    // secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    string secretName = 4;
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
message IoK8sApiCoreV1SecurityContext {
    // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    bool allowPrivilegeEscalation = 1;

    // The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
    IoK8sApiCoreV1Capabilities capabilities = 2;

    // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    bool privileged = 3;

    // procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
    string procMount = 4;

    // Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    bool readOnlyRootFilesystem = 5;

    // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    int64 runAsGroup = 6;

    // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    bool runAsNonRoot = 7;

    // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    int64 runAsUser = 8;

    // The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    IoK8sApiCoreV1SELinuxOptions seLinuxOptions = 9;

    // The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
    IoK8sApiCoreV1SeccompProfile seccompProfile = 10;

    // The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    IoK8sApiCoreV1WindowsSecurityContextOptions windowsOptions = 11;
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
message IoK8sApiCoreV1Service {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ServiceSpec spec = 4;

    // Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ServiceStatus status = 5;
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
message IoK8sApiCoreV1ServiceAccount {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
    bool automountServiceAccountToken = 2;

    // ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    repeated IoK8sApiCoreV1LocalObjectReference imagePullSecrets = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
    repeated IoK8sApiCoreV1ObjectReference secrets = 6;
}

// ServiceAccountList is a list of ServiceAccount objects
message IoK8sApiCoreV1ServiceAccountList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    repeated IoK8sApiCoreV1ServiceAccount items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
message IoK8sApiCoreV1ServiceAccountTokenProjection {
    // audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
    string audience = 1;

    // expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
    int64 expirationSeconds = 2;

    // path is the path relative to the mount point of the file to project the token into.
    string path = 3;
}

// ServiceList holds a list of services.
message IoK8sApiCoreV1ServiceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // List of services
    repeated IoK8sApiCoreV1Service items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ServicePort contains information on service's port.
message IoK8sApiCoreV1ServicePort {
    // The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
    string appProtocol = 1;

    // The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
    string name = 2;

    // The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    int32 nodePort = 3;

    // The port that will be exposed by this service.
    int32 port = 4;

    // The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
    string protocol = 5;

    // Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
    string targetPort = 6;
}

// ServiceSpec describes the attributes that a user creates on a service.
message IoK8sApiCoreV1ServiceSpec {
    // allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
    bool allocateLoadBalancerNodePorts = 1;

    // clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    string clusterIP = 2;

    // ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
    // 
    // This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    repeated string clusterIPs = 3;

    // externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    repeated string externalIPs = 4;

    // externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
    string externalName = 5;

    // externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
    string externalTrafficPolicy = 6;

    // healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
    int32 healthCheckNodePort = 7;

    // InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
    string internalTrafficPolicy = 8;

    // IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
    // 
    // This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
    repeated string ipFamilies = 9;

    // IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
    string ipFamilyPolicy = 10;

    // loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
    string loadBalancerClass = 11;

    // Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.
    string loadBalancerIP = 12;

    // If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
    repeated string loadBalancerSourceRanges = 13;

    // The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    repeated IoK8sApiCoreV1ServicePort ports = 14;

    // publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
    bool publishNotReadyAddresses = 15;

    // Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    map<string, string> selector = 16;

    // Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    string sessionAffinity = 17;

    // sessionAffinityConfig contains the configurations of session affinity.
    IoK8sApiCoreV1SessionAffinityConfig sessionAffinityConfig = 18;

    // type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    string type = 19;
}

// ServiceStatus represents the current status of a service.
message IoK8sApiCoreV1ServiceStatus {
    // Current service state
    repeated IoK8sApimachineryPkgApisMetaV1Condition conditions = 1;

    // LoadBalancer contains the current status of the load-balancer, if one is present.
    IoK8sApiCoreV1LoadBalancerStatus loadBalancer = 2;
}

// SessionAffinityConfig represents the configurations of session affinity.
message IoK8sApiCoreV1SessionAffinityConfig {
    // clientIP contains the configurations of Client IP based session affinity.
    IoK8sApiCoreV1ClientIPConfig clientIP = 1;
}

// Represents a StorageOS persistent volume resource.
message IoK8sApiCoreV1StorageOSPersistentVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 2;

    // secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    IoK8sApiCoreV1ObjectReference secretRef = 3;

    // volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    string volumeName = 4;

    // volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    string volumeNamespace = 5;
}

// Represents a StorageOS persistent volume resource.
message IoK8sApiCoreV1StorageOSVolumeSource {
    // fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 2;

    // secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    IoK8sApiCoreV1LocalObjectReference secretRef = 3;

    // volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    string volumeName = 4;

    // volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    string volumeNamespace = 5;
}

// Sysctl defines a kernel parameter to be set
message IoK8sApiCoreV1Sysctl {
    // Name of a property to set
    string name = 1;

    // Value of a property to set
    string value = 2;
}

// TCPSocketAction describes an action based on opening a socket
message IoK8sApiCoreV1TCPSocketAction {
    // Optional: Host name to connect to, defaults to the pod IP.
    string host = 1;

    // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    string port = 2;
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
message IoK8sApiCoreV1Taint {
    // Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    string effect = 1;

    // Required. The taint key to be applied to a node.
    string key = 2;

    // TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    string timeAdded = 3;

    // The taint value corresponding to the taint key.
    string value = 4;
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
message IoK8sApiCoreV1Toleration {
    // Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    string effect = 1;

    // Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    string key = 2;

    // Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    string operator = 3;

    // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    int64 tolerationSeconds = 4;

    // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    string value = 5;
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
message IoK8sApiCoreV1TopologySelectorLabelRequirement {
    // The label key that the selector applies to.
    string key = 1;

    // An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
    repeated string values = 2;
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
message IoK8sApiCoreV1TopologySelectorTerm {
    // A list of topology selector requirements by labels.
    repeated IoK8sApiCoreV1TopologySelectorLabelRequirement matchLabelExpressions = 1;
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
message IoK8sApiCoreV1TopologySpreadConstraint {
    // LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
    IoK8sApimachineryPkgApisMetaV1LabelSelector labelSelector = 1;

    // MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
    // 
    // This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    repeated string matchLabelKeys = 2;

    // MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
    int32 maxSkew = 3;

    // MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
    // 
    // For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
    // 
    // This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
    int32 minDomains = 4;

    // NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
    // 
    // If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    string nodeAffinityPolicy = 5;

    // NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
    // 
    // If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    string nodeTaintsPolicy = 6;

    // TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
    string topologyKey = 7;

    // WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
    //   but giving higher precedence to topologies that would help reduce the
    //   skew.
    // A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
    string whenUnsatisfiable = 8;
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
message IoK8sApiCoreV1TypedLocalObjectReference {
    // APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    string apiGroup = 1;

    // Kind is the type of resource being referenced
    string kind = 2;

    // Name is the name of resource being referenced
    string name = 3;
}

message IoK8sApiCoreV1TypedObjectReference {
    // APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    string apiGroup = 1;

    // Kind is the type of resource being referenced
    string kind = 2;

    // Name is the name of resource being referenced
    string name = 3;

    // Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    string namespace = 4;
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
message IoK8sApiCoreV1Volume {
    // awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 1;

    // azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureDiskVolumeSource azureDisk = 2;

    // azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureFileVolumeSource azureFile = 3;

    // cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1CephFSVolumeSource cephfs = 4;

    // cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    IoK8sApiCoreV1CinderVolumeSource cinder = 5;

    // configMap represents a configMap that should populate this volume
    IoK8sApiCoreV1ConfigMapVolumeSource configMap = 6;

    // csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
    IoK8sApiCoreV1CSIVolumeSource csi = 7;

    // downwardAPI represents downward API about the pod that should populate this volume
    IoK8sApiCoreV1DownwardAPIVolumeSource downwardAPI = 8;

    // emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    IoK8sApiCoreV1EmptyDirVolumeSource emptyDir = 9;

    // ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
    // 
    // Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
    //    tracking are needed,
    // c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
    //    a PersistentVolumeClaim (see EphemeralVolumeSource for more
    //    information on the connection between this volume type
    //    and PersistentVolumeClaim).
    // 
    // Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
    // 
    // Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
    // 
    // A pod can use both types of ephemeral volumes and persistent volumes at the same time.
    IoK8sApiCoreV1EphemeralVolumeSource ephemeral = 10;

    // fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    IoK8sApiCoreV1FCVolumeSource fc = 11;

    // flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    IoK8sApiCoreV1FlexVolumeSource flexVolume = 12;

    // flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    IoK8sApiCoreV1FlockerVolumeSource flocker = 13;

    // gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk = 14;

    // gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    IoK8sApiCoreV1GitRepoVolumeSource gitRepo = 15;

    // glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    IoK8sApiCoreV1GlusterfsVolumeSource glusterfs = 16;

    // hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    IoK8sApiCoreV1HostPathVolumeSource hostPath = 17;

    // iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
    IoK8sApiCoreV1ISCSIVolumeSource iscsi = 18;

    // name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 19;

    // nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    IoK8sApiCoreV1NFSVolumeSource nfs = 20;

    // persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    IoK8sApiCoreV1PersistentVolumeClaimVolumeSource persistentVolumeClaim = 21;

    // photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk = 22;

    // portworxVolume represents a portworx volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1PortworxVolumeSource portworxVolume = 23;

    // projected items for all in one resources secrets, configmaps, and downward API
    IoK8sApiCoreV1ProjectedVolumeSource projected = 24;

    // quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1QuobyteVolumeSource quobyte = 25;

    // rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    IoK8sApiCoreV1RBDVolumeSource rbd = 26;

    // scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    IoK8sApiCoreV1ScaleIOVolumeSource scaleIO = 27;

    // secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    IoK8sApiCoreV1SecretVolumeSource secret = 28;

    // storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    IoK8sApiCoreV1StorageOSVolumeSource storageos = 29;

    // vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume = 30;
}

// volumeDevice describes a mapping of a raw block device within a container.
message IoK8sApiCoreV1VolumeDevice {
    // devicePath is the path inside of the container that the device will be mapped to.
    string devicePath = 1;

    // name must match the name of a persistentVolumeClaim in the pod
    string name = 2;
}

// VolumeMount describes a mounting of a Volume within a container.
message IoK8sApiCoreV1VolumeMount {
    // Path within the container at which the volume should be mounted.  Must not contain ':'.
    string mountPath = 1;

    // mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
    string mountPropagation = 2;

    // This must match the Name of a Volume.
    string name = 3;

    // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    bool readOnly = 4;

    // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    string subPath = 5;

    // Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    string subPathExpr = 6;
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
message IoK8sApiCoreV1VolumeNodeAffinity {
    // required specifies hard node constraints that must be met.
    IoK8sApiCoreV1NodeSelector required = 1;
}

// Projection that may be projected along with other supported volume types
message IoK8sApiCoreV1VolumeProjection {
    // configMap information about the configMap data to project
    IoK8sApiCoreV1ConfigMapProjection configMap = 1;

    // downwardAPI information about the downwardAPI data to project
    IoK8sApiCoreV1DownwardAPIProjection downwardAPI = 2;

    // secret information about the secret data to project
    IoK8sApiCoreV1SecretProjection secret = 3;

    // serviceAccountToken is information about the serviceAccountToken data to project
    IoK8sApiCoreV1ServiceAccountTokenProjection serviceAccountToken = 4;
}

// Represents a vSphere volume resource.
message IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
    // fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    string storagePolicyID = 2;

    // storagePolicyName is the storage Policy Based Management (SPBM) profile name.
    string storagePolicyName = 3;

    // volumePath is the path that identifies vSphere volume vmdk
    string volumePath = 4;
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
message IoK8sApiCoreV1WeightedPodAffinityTerm {
    // Required. A pod affinity term, associated with the corresponding weight.
    IoK8sApiCoreV1PodAffinityTerm podAffinityTerm = 1;

    // weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    int32 weight = 2;
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
message IoK8sApiCoreV1WindowsSecurityContextOptions {
    // GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    string gmsaCredentialSpec = 1;

    // GMSACredentialSpecName is the name of the GMSA credential spec to use.
    string gmsaCredentialSpecName = 2;

    // HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    bool hostProcess = 3;

    // The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    string runAsUserName = 4;
}

// Endpoint represents a single logical "backend" implementing a service.
message IoK8sApiDiscoveryV1Endpoint {
    // addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
    repeated string addresses = 1;

    // conditions contains information about the current status of the endpoint.
    IoK8sApiDiscoveryV1EndpointConditions conditions = 2;

    // deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
    map<string, string> deprecatedTopology = 3;

    // hints contains information associated with how an endpoint should be consumed.
    IoK8sApiDiscoveryV1EndpointHints hints = 4;

    // hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
    string hostname = 5;

    // nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
    string nodeName = 6;

    // targetRef is a reference to a Kubernetes object that represents this endpoint.
    IoK8sApiCoreV1ObjectReference targetRef = 7;

    // zone is the name of the Zone this endpoint exists in.
    string zone = 8;
}

// EndpointConditions represents the current condition of an endpoint.
message IoK8sApiDiscoveryV1EndpointConditions {
    // ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
    bool ready = 1;

    // serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
    bool serving = 2;

    // terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
    bool terminating = 3;
}

// EndpointHints provides hints describing how an endpoint should be consumed.
message IoK8sApiDiscoveryV1EndpointHints {
    // forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
    repeated IoK8sApiDiscoveryV1ForZone forZones = 1;
}

// EndpointPort represents a Port used by an EndpointSlice
message IoK8sApiDiscoveryV1EndpointPort {
    // The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
    // 
    // * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
    // 
    // * Kubernetes-defined prefixed names:
    //   * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
    // 
    // * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
    string appProtocol = 1;

    // name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
    string name = 2;

    // port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
    int32 port = 3;

    // protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
    string protocol = 4;
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
message IoK8sApiDiscoveryV1EndpointSlice {
    // addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
    string addressType = 1;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 2;

    // endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
    repeated IoK8sApiDiscoveryV1Endpoint endpoints = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
    repeated IoK8sApiDiscoveryV1EndpointPort ports = 6;
}

// EndpointSliceList represents a list of endpoint slices
message IoK8sApiDiscoveryV1EndpointSliceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of endpoint slices
    repeated IoK8sApiDiscoveryV1EndpointSlice items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ForZone provides information about which zones should consume this endpoint.
message IoK8sApiDiscoveryV1ForZone {
    // name represents the name of the zone.
    string name = 1;
}

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
message IoK8sApiEventsV1Event {
    // action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
    string action = 1;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 2;

    // deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
    int32 deprecatedCount = 3;

    // deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
    string deprecatedFirstTimestamp = 4;

    // deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
    string deprecatedLastTimestamp = 5;

    // deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.
    IoK8sApiCoreV1EventSource deprecatedSource = 6;

    // eventTime is the time when this Event was first observed. It is required.
    string eventTime = 7;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 8;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 9;

    // note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
    string note = 10;

    // reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
    string reason = 11;

    // regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
    IoK8sApiCoreV1ObjectReference regarding = 12;

    // related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
    IoK8sApiCoreV1ObjectReference related = 13;

    // reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
    string reportingController = 14;

    // reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
    string reportingInstance = 15;

    // series is data about the Event series this event represents or nil if it's a singleton Event.
    IoK8sApiEventsV1EventSeries series = 16;

    // type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
    string type = 17;
}

// EventList is a list of Event objects.
message IoK8sApiEventsV1EventList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a list of schema objects.
    repeated IoK8sApiEventsV1Event items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
message IoK8sApiEventsV1EventSeries {
    // count is the number of occurrences in this series up to the last heartbeat time.
    int32 count = 1;

    // lastObservedTime is the time when last Event from the series was seen before last heartbeat.
    string lastObservedTime = 2;
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
message IoK8sApiFlowcontrolV1beta2FlowDistinguisherMethod {
    // `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
    string type = 1;
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
message IoK8sApiFlowcontrolV1beta2FlowSchema {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta2FlowSchemaSpec spec = 4;

    // `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta2FlowSchemaStatus status = 5;
}

// FlowSchemaCondition describes conditions for a FlowSchema.
message IoK8sApiFlowcontrolV1beta2FlowSchemaCondition {
    // `lastTransitionTime` is the last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // `message` is a human-readable message indicating details about last transition.
    string message = 2;

    // `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // `status` is the status of the condition. Can be True, False, Unknown. Required.
    string status = 4;

    // `type` is the type of the condition. Required.
    string type = 5;
}

// FlowSchemaList is a list of FlowSchema objects.
message IoK8sApiFlowcontrolV1beta2FlowSchemaList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // `items` is a list of FlowSchemas.
    repeated IoK8sApiFlowcontrolV1beta2FlowSchema items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // `metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
message IoK8sApiFlowcontrolV1beta2FlowSchemaSpec {
    // `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
    IoK8sApiFlowcontrolV1beta2FlowDistinguisherMethod distinguisherMethod = 1;

    // `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
    int32 matchingPrecedence = 2;

    // `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationReference priorityLevelConfiguration = 3;

    // `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
    repeated IoK8sApiFlowcontrolV1beta2PolicyRulesWithSubjects rules = 4;
}

// FlowSchemaStatus represents the current state of a FlowSchema.
message IoK8sApiFlowcontrolV1beta2FlowSchemaStatus {
    // `conditions` is a list of the current states of FlowSchema.
    repeated IoK8sApiFlowcontrolV1beta2FlowSchemaCondition conditions = 1;
}

// GroupSubject holds detailed information for group-kind subject.
message IoK8sApiFlowcontrolV1beta2GroupSubject {
    // name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
    string name = 1;
}

// LimitResponse defines how to handle requests that can not be executed right now.
message IoK8sApiFlowcontrolV1beta2LimitResponse {
    // `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
    IoK8sApiFlowcontrolV1beta2QueuingConfiguration queuing = 1;

    // `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
    string type = 2;
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//   - How are requests for this priority level limited?
//   - What should be done with requests that exceed the limit?
message IoK8sApiFlowcontrolV1beta2LimitedPriorityLevelConfiguration {
    // `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
    // 
    //             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
    // 
    // bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
    int32 assuredConcurrencyShares = 1;

    // `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
    // 
    // BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
    // 
    // The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
    int32 borrowingLimitPercent = 2;

    // `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
    // 
    // LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
    int32 lendablePercent = 3;

    // `limitResponse` indicates what to do with requests that can not be executed right now
    IoK8sApiFlowcontrolV1beta2LimitResponse limitResponse = 4;
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
message IoK8sApiFlowcontrolV1beta2NonResourcePolicyRule {
    // `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
    //   - "/healthz" is legal
    //   - "/hea*" is illegal
    //   - "/hea" is legal but matches nothing
    //   - "/hea/*" also matches nothing
    //   - "/healthz/*" matches all per-component health checks.
    // "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
    repeated string nonResourceURLs = 1;

    // `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
    repeated string verbs = 2;
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
message IoK8sApiFlowcontrolV1beta2PolicyRulesWithSubjects {
    // `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
    repeated IoK8sApiFlowcontrolV1beta2NonResourcePolicyRule nonResourceRules = 1;

    // `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
    repeated IoK8sApiFlowcontrolV1beta2ResourcePolicyRule resourceRules = 2;

    // subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
    repeated IoK8sApiFlowcontrolV1beta2Subject subjects = 3;
}

// PriorityLevelConfiguration represents the configuration of a priority level.
message IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationSpec spec = 4;

    // `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationStatus status = 5;
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
message IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationCondition {
    // `lastTransitionTime` is the last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // `message` is a human-readable message indicating details about last transition.
    string message = 2;

    // `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // `status` is the status of the condition. Can be True, False, Unknown. Required.
    string status = 4;

    // `type` is the type of the condition. Required.
    string type = 5;
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
message IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // `items` is a list of request-priorities.
    repeated IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
message IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationReference {
    // `name` is the name of the priority level configuration being referenced Required.
    string name = 1;
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
message IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationSpec {
    // `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
    IoK8sApiFlowcontrolV1beta2LimitedPriorityLevelConfiguration limited = 1;

    // `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
    string type = 2;
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
message IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationStatus {
    // `conditions` is the current state of "request-priority".
    repeated IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationCondition conditions = 1;
}

// QueuingConfiguration holds the configuration parameters for queuing
message IoK8sApiFlowcontrolV1beta2QueuingConfiguration {
    // `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
    int32 handSize = 1;

    // `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
    int32 queueLengthLimit = 2;

    // `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
    int32 queues = 3;
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
message IoK8sApiFlowcontrolV1beta2ResourcePolicyRule {
    // `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
    repeated string apiGroups = 1;

    // `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
    bool clusterScope = 2;

    // `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
    repeated string namespaces = 3;

    // `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
    repeated string resources = 4;

    // `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
    repeated string verbs = 5;
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
message IoK8sApiFlowcontrolV1beta2ServiceAccountSubject {
    // `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
    string name = 1;

    // `namespace` is the namespace of matching ServiceAccount objects. Required.
    string namespace = 2;
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
message IoK8sApiFlowcontrolV1beta2Subject {
    // `group` matches based on user group name.
    IoK8sApiFlowcontrolV1beta2GroupSubject group = 1;

    // `kind` indicates which one of the other fields is non-empty. Required
    string kind = 2;

    // `serviceAccount` matches ServiceAccounts.
    IoK8sApiFlowcontrolV1beta2ServiceAccountSubject serviceAccount = 3;

    // `user` matches based on username.
    IoK8sApiFlowcontrolV1beta2UserSubject user = 4;
}

// UserSubject holds detailed information for user-kind subject.
message IoK8sApiFlowcontrolV1beta2UserSubject {
    // `name` is the username that matches, or "*" to match all usernames. Required.
    string name = 1;
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
message IoK8sApiFlowcontrolV1beta3FlowDistinguisherMethod {
    // `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
    string type = 1;
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
message IoK8sApiFlowcontrolV1beta3FlowSchema {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta3FlowSchemaSpec spec = 4;

    // `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta3FlowSchemaStatus status = 5;
}

// FlowSchemaCondition describes conditions for a FlowSchema.
message IoK8sApiFlowcontrolV1beta3FlowSchemaCondition {
    // `lastTransitionTime` is the last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // `message` is a human-readable message indicating details about last transition.
    string message = 2;

    // `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // `status` is the status of the condition. Can be True, False, Unknown. Required.
    string status = 4;

    // `type` is the type of the condition. Required.
    string type = 5;
}

// FlowSchemaList is a list of FlowSchema objects.
message IoK8sApiFlowcontrolV1beta3FlowSchemaList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // `items` is a list of FlowSchemas.
    repeated IoK8sApiFlowcontrolV1beta3FlowSchema items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // `metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
message IoK8sApiFlowcontrolV1beta3FlowSchemaSpec {
    // `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
    IoK8sApiFlowcontrolV1beta3FlowDistinguisherMethod distinguisherMethod = 1;

    // `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
    int32 matchingPrecedence = 2;

    // `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
    IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationReference priorityLevelConfiguration = 3;

    // `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
    repeated IoK8sApiFlowcontrolV1beta3PolicyRulesWithSubjects rules = 4;
}

// FlowSchemaStatus represents the current state of a FlowSchema.
message IoK8sApiFlowcontrolV1beta3FlowSchemaStatus {
    // `conditions` is a list of the current states of FlowSchema.
    repeated IoK8sApiFlowcontrolV1beta3FlowSchemaCondition conditions = 1;
}

// GroupSubject holds detailed information for group-kind subject.
message IoK8sApiFlowcontrolV1beta3GroupSubject {
    // name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
    string name = 1;
}

// LimitResponse defines how to handle requests that can not be executed right now.
message IoK8sApiFlowcontrolV1beta3LimitResponse {
    // `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
    IoK8sApiFlowcontrolV1beta3QueuingConfiguration queuing = 1;

    // `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
    string type = 2;
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//   - How are requests for this priority level limited?
//   - What should be done with requests that exceed the limit?
message IoK8sApiFlowcontrolV1beta3LimitedPriorityLevelConfiguration {
    // `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
    // 
    // BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
    // 
    // The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
    int32 borrowingLimitPercent = 1;

    // `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
    // 
    // LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
    int32 lendablePercent = 2;

    // `limitResponse` indicates what to do with requests that can not be executed right now
    IoK8sApiFlowcontrolV1beta3LimitResponse limitResponse = 3;

    // `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:
    // 
    // NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[limited priority level k] NCS(k)
    // 
    // Bigger numbers mean a larger nominal concurrency limit, at the expense of every other Limited priority level. This field has a default value of 30.
    int32 nominalConcurrencyShares = 4;
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
message IoK8sApiFlowcontrolV1beta3NonResourcePolicyRule {
    // `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
    //   - "/healthz" is legal
    //   - "/hea*" is illegal
    //   - "/hea" is legal but matches nothing
    //   - "/hea/*" also matches nothing
    //   - "/healthz/*" matches all per-component health checks.
    // "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
    repeated string nonResourceURLs = 1;

    // `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
    repeated string verbs = 2;
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
message IoK8sApiFlowcontrolV1beta3PolicyRulesWithSubjects {
    // `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
    repeated IoK8sApiFlowcontrolV1beta3NonResourcePolicyRule nonResourceRules = 1;

    // `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
    repeated IoK8sApiFlowcontrolV1beta3ResourcePolicyRule resourceRules = 2;

    // subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
    repeated IoK8sApiFlowcontrolV1beta3Subject subjects = 3;
}

// PriorityLevelConfiguration represents the configuration of a priority level.
message IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationSpec spec = 4;

    // `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationStatus status = 5;
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
message IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationCondition {
    // `lastTransitionTime` is the last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // `message` is a human-readable message indicating details about last transition.
    string message = 2;

    // `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // `status` is the status of the condition. Can be True, False, Unknown. Required.
    string status = 4;

    // `type` is the type of the condition. Required.
    string type = 5;
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
message IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // `items` is a list of request-priorities.
    repeated IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
message IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationReference {
    // `name` is the name of the priority level configuration being referenced Required.
    string name = 1;
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
message IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationSpec {
    // `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
    IoK8sApiFlowcontrolV1beta3LimitedPriorityLevelConfiguration limited = 1;

    // `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
    string type = 2;
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
message IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationStatus {
    // `conditions` is the current state of "request-priority".
    repeated IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationCondition conditions = 1;
}

// QueuingConfiguration holds the configuration parameters for queuing
message IoK8sApiFlowcontrolV1beta3QueuingConfiguration {
    // `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
    int32 handSize = 1;

    // `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
    int32 queueLengthLimit = 2;

    // `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
    int32 queues = 3;
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
message IoK8sApiFlowcontrolV1beta3ResourcePolicyRule {
    // `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
    repeated string apiGroups = 1;

    // `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
    bool clusterScope = 2;

    // `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
    repeated string namespaces = 3;

    // `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
    repeated string resources = 4;

    // `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
    repeated string verbs = 5;
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
message IoK8sApiFlowcontrolV1beta3ServiceAccountSubject {
    // `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
    string name = 1;

    // `namespace` is the namespace of matching ServiceAccount objects. Required.
    string namespace = 2;
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
message IoK8sApiFlowcontrolV1beta3Subject {
    // `group` matches based on user group name.
    IoK8sApiFlowcontrolV1beta3GroupSubject group = 1;

    // `kind` indicates which one of the other fields is non-empty. Required
    string kind = 2;

    // `serviceAccount` matches ServiceAccounts.
    IoK8sApiFlowcontrolV1beta3ServiceAccountSubject serviceAccount = 3;

    // `user` matches based on username.
    IoK8sApiFlowcontrolV1beta3UserSubject user = 4;
}

// UserSubject holds detailed information for user-kind subject.
message IoK8sApiFlowcontrolV1beta3UserSubject {
    // `name` is the username that matches, or "*" to match all usernames. Required.
    string name = 1;
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
message IoK8sApiNetworkingV1HTTPIngressPath {
    // backend defines the referenced service endpoint to which the traffic will be forwarded to.
    IoK8sApiNetworkingV1IngressBackend backend = 1;

    // path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
    string path = 2;

    // pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
    //   done on a path element by element basis. A path element refers is the
    //   list of labels in the path split by the '/' separator. A request is a
    //   match for path p if every p is an element-wise prefix of p of the
    //   request path. Note that if the last element of the path is a substring
    //   of the last element in request path, it is not a match (e.g. /foo/bar
    //   matches /foo/bar/baz, but does not match /foo/barbaz).
    // * ImplementationSpecific: Interpretation of the Path matching is up to
    //   the IngressClass. Implementations can treat this as a separate PathType
    //   or treat it identically to Prefix or Exact path types.
    // Implementations are required to support all path types.
    string pathType = 3;
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
message IoK8sApiNetworkingV1HTTPIngressRuleValue {
    // paths is a collection of paths that map requests to backends.
    repeated IoK8sApiNetworkingV1HTTPIngressPath paths = 1;
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
message IoK8sApiNetworkingV1IPBlock {
    // cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
    string cidr = 1;

    // except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
    repeated string except = 2;
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
message IoK8sApiNetworkingV1Ingress {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiNetworkingV1IngressSpec spec = 4;

    // status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiNetworkingV1IngressStatus status = 5;
}

// IngressBackend describes all endpoints for a given service and port.
message IoK8sApiNetworkingV1IngressBackend {
    // resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
    IoK8sApiCoreV1TypedLocalObjectReference resource = 1;

    // service references a service as a backend. This is a mutually exclusive setting with "Resource".
    IoK8sApiNetworkingV1IngressServiceBackend service = 2;
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
message IoK8sApiNetworkingV1IngressClass {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiNetworkingV1IngressClassSpec spec = 4;
}

// IngressClassList is a collection of IngressClasses.
message IoK8sApiNetworkingV1IngressClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of IngressClasses.
    repeated IoK8sApiNetworkingV1IngressClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
message IoK8sApiNetworkingV1IngressClassParametersReference {
    // apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    string apiGroup = 1;

    // kind is the type of resource being referenced.
    string kind = 2;

    // name is the name of resource being referenced.
    string name = 3;

    // namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
    string namespace = 4;

    // scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".
    string scope = 5;
}

// IngressClassSpec provides information about the class of an Ingress.
message IoK8sApiNetworkingV1IngressClassSpec {
    // controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
    string controller = 1;

    // parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
    IoK8sApiNetworkingV1IngressClassParametersReference parameters = 2;
}

// IngressList is a collection of Ingress.
message IoK8sApiNetworkingV1IngressList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of Ingress.
    repeated IoK8sApiNetworkingV1Ingress items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
message IoK8sApiNetworkingV1IngressLoadBalancerIngress {
    // hostname is set for load-balancer ingress points that are DNS based.
    string hostname = 1;

    // ip is set for load-balancer ingress points that are IP based.
    string ip = 2;

    // ports provides information about the ports exposed by this LoadBalancer.
    repeated IoK8sApiNetworkingV1IngressPortStatus ports = 3;
}

// IngressLoadBalancerStatus represents the status of a load-balancer.
message IoK8sApiNetworkingV1IngressLoadBalancerStatus {
    // ingress is a list containing ingress points for the load-balancer.
    repeated IoK8sApiNetworkingV1IngressLoadBalancerIngress ingress = 1;
}

// IngressPortStatus represents the error condition of a service port
message IoK8sApiNetworkingV1IngressPortStatus {
    // error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
    //   CamelCase names
    // - cloud provider specific error values must have names that comply with the
    //   format foo.example.com/CamelCase.
    string error = 1;

    // port is the port number of the ingress port.
    int32 port = 2;

    // protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
    string protocol = 3;
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
message IoK8sApiNetworkingV1IngressRule {
    // host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
    //    the IP in the Spec of the parent Ingress.
    // 2. The `:` delimiter is not respected because ports are not allowed.
    // 	  Currently the port of an Ingress is implicitly :80 for http and
    // 	  :443 for https.
    // Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
    // 
    // host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
    string host = 1;
    IoK8sApiNetworkingV1HTTPIngressRuleValue http = 2;
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
message IoK8sApiNetworkingV1IngressServiceBackend {
    // name is the referenced service. The service must exist in the same namespace as the Ingress object.
    string name = 1;

    // port of the referenced service. A port name or port number is required for a IngressServiceBackend.
    IoK8sApiNetworkingV1ServiceBackendPort port = 2;
}

// IngressSpec describes the Ingress the user wishes to exist.
message IoK8sApiNetworkingV1IngressSpec {
    // defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
    IoK8sApiNetworkingV1IngressBackend defaultBackend = 1;

    // ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
    string ingressClassName = 2;

    // rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    repeated IoK8sApiNetworkingV1IngressRule rules = 3;

    // tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
    repeated IoK8sApiNetworkingV1IngressTLS tls = 4;
}

// IngressStatus describe the current state of the Ingress.
message IoK8sApiNetworkingV1IngressStatus {
    // loadBalancer contains the current status of the load-balancer.
    IoK8sApiNetworkingV1IngressLoadBalancerStatus loadBalancer = 1;
}

// IngressTLS describes the transport layer security associated with an ingress.
message IoK8sApiNetworkingV1IngressTLS {
    // hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    repeated string hosts = 1;

    // secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
    string secretName = 2;
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
message IoK8sApiNetworkingV1NetworkPolicy {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec represents the specification of the desired behavior for this NetworkPolicy.
    IoK8sApiNetworkingV1NetworkPolicySpec spec = 4;
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
message IoK8sApiNetworkingV1NetworkPolicyEgressRule {
    // ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPort ports = 1;

    // to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPeer to = 2;
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
message IoK8sApiNetworkingV1NetworkPolicyIngressRule {
    // from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPeer from = 1;

    // ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPort ports = 2;
}

// NetworkPolicyList is a list of NetworkPolicy objects.
message IoK8sApiNetworkingV1NetworkPolicyList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a list of schema objects.
    repeated IoK8sApiNetworkingV1NetworkPolicy items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
message IoK8sApiNetworkingV1NetworkPolicyPeer {
    // ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
    IoK8sApiNetworkingV1IPBlock ipBlock = 1;

    // namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
    // 
    // If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 2;

    // podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
    // 
    // If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = 3;
}

// NetworkPolicyPort describes a port to allow traffic on
message IoK8sApiNetworkingV1NetworkPolicyPort {
    // endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
    int32 endPort = 1;

    // port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
    string port = 2;

    // protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
    string protocol = 3;
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
message IoK8sApiNetworkingV1NetworkPolicySpec {
    // egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
    repeated IoK8sApiNetworkingV1NetworkPolicyEgressRule egress = 1;

    // ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
    repeated IoK8sApiNetworkingV1NetworkPolicyIngressRule ingress = 2;

    // podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = 3;

    // policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
    repeated string policyTypes = 4;
}

// ServiceBackendPort is the service port being referenced.
message IoK8sApiNetworkingV1ServiceBackendPort {
    // name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
    string name = 1;

    // number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
    int32 number = 2;
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
message IoK8sApiNetworkingV1alpha1ClusterCIDR {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the desired state of the ClusterCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiNetworkingV1alpha1ClusterCIDRSpec spec = 4;
}

// ClusterCIDRList contains a list of ClusterCIDR.
message IoK8sApiNetworkingV1alpha1ClusterCIDRList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of ClusterCIDRs.
    repeated IoK8sApiNetworkingV1alpha1ClusterCIDR items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
message IoK8sApiNetworkingV1alpha1ClusterCIDRSpec {
    // ipv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of ipv4 and ipv6 must be specified. This field is immutable.
    string ipv4 = 1;

    // ipv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of ipv4 and ipv6 must be specified. This field is immutable.
    string ipv6 = 2;

    // nodeSelector defines which nodes the config is applicable to. An empty or nil nodeSelector selects all nodes. This field is immutable.
    IoK8sApiCoreV1NodeSelector nodeSelector = 3;

    // perNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
    int32 perNodeHostBits = 4;
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
message IoK8sApiNetworkingV1alpha1IPAddress {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    IoK8sApiNetworkingV1alpha1IPAddressSpec spec = 4;
}

// IPAddressList contains a list of IPAddress.
message IoK8sApiNetworkingV1alpha1IPAddressList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of IPAddresses.
    repeated IoK8sApiNetworkingV1alpha1IPAddress items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// IPAddressSpec describe the attributes in an IP Address.
message IoK8sApiNetworkingV1alpha1IPAddressSpec {
    // ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.
    IoK8sApiNetworkingV1alpha1ParentReference parentRef = 1;
}

// ParentReference describes a reference to a parent object.
message IoK8sApiNetworkingV1alpha1ParentReference {
    // Group is the group of the object being referenced.
    string group = 1;

    // Name is the name of the object being referenced.
    string name = 2;

    // Namespace is the namespace of the object being referenced.
    string namespace = 3;

    // Resource is the resource of the object being referenced.
    string resource = 4;

    // UID is the uid of the object being referenced.
    string uid = 5;
}

// Overhead structure represents the resource overhead associated with running a pod.
message IoK8sApiNodeV1Overhead {
    // podFixed represents the fixed resource overhead associated with running a pod.
    map<string, string> podFixed = 1;
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
message IoK8sApiNodeV1RuntimeClass {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
    string handler = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see
    //  https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/
    IoK8sApiNodeV1Overhead overhead = 5;

    // scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
    IoK8sApiNodeV1Scheduling scheduling = 6;
}

// RuntimeClassList is a list of RuntimeClass objects.
message IoK8sApiNodeV1RuntimeClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is a list of schema objects.
    repeated IoK8sApiNodeV1RuntimeClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
message IoK8sApiNodeV1Scheduling {
    // nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
    map<string, string> nodeSelector = 1;

    // tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
    repeated IoK8sApiCoreV1Toleration tolerations = 2;
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
message IoK8sApiPolicyV1Eviction {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // DeleteOptions may be provided
    IoK8sApimachineryPkgApisMetaV1DeleteOptions deleteOptions = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // ObjectMeta describes the pod that is being evicted.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
message IoK8sApiPolicyV1PodDisruptionBudget {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the PodDisruptionBudget.
    IoK8sApiPolicyV1PodDisruptionBudgetSpec spec = 4;

    // Most recently observed status of the PodDisruptionBudget.
    IoK8sApiPolicyV1PodDisruptionBudgetStatus status = 5;
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
message IoK8sApiPolicyV1PodDisruptionBudgetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of PodDisruptionBudgets
    repeated IoK8sApiPolicyV1PodDisruptionBudget items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
message IoK8sApiPolicyV1PodDisruptionBudgetSpec {
    // An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
    string maxUnavailable = 1;

    // An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
    string minAvailable = 2;

    // Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".
    // 
    // Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.
    // 
    // IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.
    // 
    // AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.
    // 
    // Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
    // 
    // This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
    string unhealthyPodEvictionPolicy = 4;
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
message IoK8sApiPolicyV1PodDisruptionBudgetStatus {
    // Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
    //               the number of allowed disruptions. Therefore no disruptions are
    //               allowed and the status of the condition will be False.
    // - InsufficientPods: The number of pods are either at or below the number
    //                     required by the PodDisruptionBudget. No disruptions are
    //                     allowed and the status of the condition will be False.
    // - SufficientPods: There are more pods than required by the PodDisruptionBudget.
    //                   The condition will be True, and the number of allowed
    //                   disruptions are provided by the disruptionsAllowed property.
    repeated IoK8sApimachineryPkgApisMetaV1Condition conditions = 1;

    // current number of healthy pods
    int32 currentHealthy = 2;

    // minimum desired number of healthy pods
    int32 desiredHealthy = 3;

    // DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
    map<string, string> disruptedPods = 4;

    // Number of pod disruptions that are currently allowed.
    int32 disruptionsAllowed = 5;

    // total number of pods counted by this disruption budget
    int32 expectedPods = 6;

    // Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
    int64 observedGeneration = 7;
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
message IoK8sApiRbacV1AggregationRule {
    // ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
    repeated IoK8sApimachineryPkgApisMetaV1LabelSelector clusterRoleSelectors = 1;
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
message IoK8sApiRbacV1ClusterRole {
    // AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.
    IoK8sApiRbacV1AggregationRule aggregationRule = 1;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // Rules holds all the PolicyRules for this ClusterRole
    repeated IoK8sApiRbacV1PolicyRule rules = 5;
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
message IoK8sApiRbacV1ClusterRoleBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.
    IoK8sApiRbacV1RoleRef roleRef = 4;

    // Subjects holds references to the objects the role applies to.
    repeated IoK8sApiRbacV1Subject subjects = 5;
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings
message IoK8sApiRbacV1ClusterRoleBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ClusterRoleBindings
    repeated IoK8sApiRbacV1ClusterRoleBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ClusterRoleList is a collection of ClusterRoles
message IoK8sApiRbacV1ClusterRoleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ClusterRoles
    repeated IoK8sApiRbacV1ClusterRole items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
message IoK8sApiRbacV1PolicyRule {
    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
    repeated string apiGroups = 1;

    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
    repeated string nonResourceURLs = 2;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    repeated string resourceNames = 3;

    // Resources is a list of resources this rule applies to. '*' represents all resources.
    repeated string resources = 4;

    // Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
    repeated string verbs = 5;
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
message IoK8sApiRbacV1Role {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Rules holds all the PolicyRules for this Role
    repeated IoK8sApiRbacV1PolicyRule rules = 4;
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
message IoK8sApiRbacV1RoleBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.
    IoK8sApiRbacV1RoleRef roleRef = 4;

    // Subjects holds references to the objects the role applies to.
    repeated IoK8sApiRbacV1Subject subjects = 5;
}

// RoleBindingList is a collection of RoleBindings
message IoK8sApiRbacV1RoleBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of RoleBindings
    repeated IoK8sApiRbacV1RoleBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RoleList is a collection of Roles
message IoK8sApiRbacV1RoleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of Roles
    repeated IoK8sApiRbacV1Role items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RoleRef contains information that points to the role being used
message IoK8sApiRbacV1RoleRef {
    // APIGroup is the group for the resource being referenced
    string apiGroup = 1;

    // Kind is the type of resource being referenced
    string kind = 2;

    // Name is the name of resource being referenced
    string name = 3;
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
message IoK8sApiRbacV1Subject {
    // APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    string apiGroup = 1;

    // Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    string kind = 2;

    // Name of the object being referenced.
    string name = 3;

    // Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
    string namespace = 4;
}

// AllocationResult contains attributes of an allocated resource.
message IoK8sApiResourceV1alpha2AllocationResult {
    // This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.
    // 
    // Setting this field is optional. If null, the resource is available everywhere.
    IoK8sApiCoreV1NodeSelector availableOnNodes = 1;

    // ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
    // 
    // Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
    repeated IoK8sApiResourceV1alpha2ResourceHandle resourceHandles = 2;

    // Shareable determines whether the resource supports more than one consumer at a time.
    bool shareable = 3;
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
// 
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
message IoK8sApiResourceV1alpha2PodSchedulingContext {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec describes where resources for the Pod are needed.
    IoK8sApiResourceV1alpha2PodSchedulingContextSpec spec = 4;

    // Status describes where resources for the Pod can be allocated.
    IoK8sApiResourceV1alpha2PodSchedulingContextStatus status = 5;
}

// PodSchedulingContextList is a collection of Pod scheduling objects.
message IoK8sApiResourceV1alpha2PodSchedulingContextList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of PodSchedulingContext objects.
    repeated IoK8sApiResourceV1alpha2PodSchedulingContext items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
message IoK8sApiResourceV1alpha2PodSchedulingContextSpec {
    // PotentialNodes lists nodes where the Pod might be able to run.
    // 
    // The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
    repeated string potentialNodes = 1;

    // SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
    string selectedNode = 2;
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
message IoK8sApiResourceV1alpha2PodSchedulingContextStatus {
    // ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
    repeated IoK8sApiResourceV1alpha2ResourceClaimSchedulingStatus resourceClaims = 1;
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
// 
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
message IoK8sApiResourceV1alpha2ResourceClaim {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.
    IoK8sApiResourceV1alpha2ResourceClaimSpec spec = 4;

    // Status describes whether the resource is available and with which attributes.
    IoK8sApiResourceV1alpha2ResourceClaimStatus status = 5;
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
message IoK8sApiResourceV1alpha2ResourceClaimConsumerReference {
    // APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
    string apiGroup = 1;

    // Name is the name of resource being referenced.
    string name = 2;

    // Resource is the type of resource being referenced, for example "pods".
    string resource = 3;

    // UID identifies exactly one incarnation of the resource.
    string uid = 4;
}

// ResourceClaimList is a collection of claims.
message IoK8sApiResourceV1alpha2ResourceClaimList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of resource claims.
    repeated IoK8sApiResourceV1alpha2ResourceClaim items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
message IoK8sApiResourceV1alpha2ResourceClaimParametersReference {
    // APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
    string apiGroup = 1;

    // Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
    string kind = 2;

    // Name is the name of resource being referenced.
    string name = 3;
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
message IoK8sApiResourceV1alpha2ResourceClaimSchedulingStatus {
    // Name matches the pod.spec.resourceClaims[*].Name field.
    string name = 1;

    // UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
    // 
    // The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
    repeated string unsuitableNodes = 2;
}

// ResourceClaimSpec defines how a resource is to be allocated.
message IoK8sApiResourceV1alpha2ResourceClaimSpec {
    // Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
    string allocationMode = 1;

    // ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.
    // 
    // The object must be in the same namespace as the ResourceClaim.
    IoK8sApiResourceV1alpha2ResourceClaimParametersReference parametersRef = 2;

    // ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
    string resourceClassName = 3;
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
message IoK8sApiResourceV1alpha2ResourceClaimStatus {
    // Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.
    IoK8sApiResourceV1alpha2AllocationResult allocation = 1;

    // DeallocationRequested indicates that a ResourceClaim is to be deallocated.
    // 
    // The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
    // 
    // While DeallocationRequested is set, no new consumers may be added to ReservedFor.
    bool deallocationRequested = 2;

    // DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
    string driverName = 3;

    // ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
    // 
    // There can be at most 32 such reservations. This may get increased in the future, but not reduced.
    repeated IoK8sApiResourceV1alpha2ResourceClaimConsumerReference reservedFor = 4;
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
message IoK8sApiResourceV1alpha2ResourceClaimTemplate {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Describes the ResourceClaim that is to be generated.
    // 
    // This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
    IoK8sApiResourceV1alpha2ResourceClaimTemplateSpec spec = 4;
}

// ResourceClaimTemplateList is a collection of claim templates.
message IoK8sApiResourceV1alpha2ResourceClaimTemplateList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of resource claim templates.
    repeated IoK8sApiResourceV1alpha2ResourceClaimTemplate items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
message IoK8sApiResourceV1alpha2ResourceClaimTemplateSpec {
    // ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 1;

    // Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.
    IoK8sApiResourceV1alpha2ResourceClaimSpec spec = 2;
}

// ResourceClass is used by administrators to influence how resources are allocated.
// 
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
message IoK8sApiResourceV1alpha2ResourceClass {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
    // 
    // Resource drivers have a unique name in forward domain order (acme.example.com).
    string driverName = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.
    IoK8sApiResourceV1alpha2ResourceClassParametersReference parametersRef = 5;

    // Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
    // 
    // Setting this field is optional. If null, all nodes are candidates.
    IoK8sApiCoreV1NodeSelector suitableNodes = 6;
}

// ResourceClassList is a collection of classes.
message IoK8sApiResourceV1alpha2ResourceClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of resource classes.
    repeated IoK8sApiResourceV1alpha2ResourceClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
message IoK8sApiResourceV1alpha2ResourceClassParametersReference {
    // APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
    string apiGroup = 1;

    // Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
    string kind = 2;

    // Name is the name of resource being referenced.
    string name = 3;

    // Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
    string namespace = 4;
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
message IoK8sApiResourceV1alpha2ResourceHandle {
    // Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
    // 
    // The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
    string data = 1;

    // DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
    string driverName = 2;
}

// PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
message IoK8sApiSchedulingV1PriorityClass {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // description is an arbitrary string that usually provides guidelines on when this priority class should be used.
    string description = 2;

    // globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.
    bool globalDefault = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
    string preemptionPolicy = 6;

    // value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.
    int32 value = 7;
}

// PriorityClassList is a collection of priority classes.
message IoK8sApiSchedulingV1PriorityClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of PriorityClasses
    repeated IoK8sApiSchedulingV1PriorityClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
message IoK8sApiStorageV1CSIDriver {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec represents the specification of the CSI Driver.
    IoK8sApiStorageV1CSIDriverSpec spec = 4;
}

// CSIDriverList is a collection of CSIDriver objects.
message IoK8sApiStorageV1CSIDriverList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of CSIDriver
    repeated IoK8sApiStorageV1CSIDriver items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CSIDriverSpec is the specification of a CSIDriver.
message IoK8sApiStorageV1CSIDriverSpec {
    // attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
    // 
    // This field is immutable.
    bool attachRequired = 1;

    // fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
    // 
    // This field is immutable.
    // 
    // Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
    string fsGroupPolicy = 2;

    // podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
    // 
    // The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
    // 
    // The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
    //                                 defined by a CSIVolumeSource, otherwise "false"
    // 
    // "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
    // 
    // This field is immutable.
    bool podInfoOnMount = 3;

    // requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
    // 
    // Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
    bool requiresRepublish = 4;

    // seLinuxMount specifies if the CSI driver supports "-o context" mount option.
    // 
    // When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
    // 
    // When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
    // 
    // Default is "false".
    bool seLinuxMount = 5;

    // storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
    // 
    // The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
    // 
    // Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
    // 
    // This field was immutable in Kubernetes <= 1.22 and now is mutable.
    bool storageCapacity = 6;

    // tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
    //   "<audience>": {
    //     "token": <token>,
    //     "expirationTimestamp": <expiration timestamp in RFC3339>,
    //   },
    //   ...
    // }
    // 
    // Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
    repeated IoK8sApiStorageV1TokenRequest tokenRequests = 7;

    // volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
    // 
    // The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
    // 
    // For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
    // 
    // This field is beta. This field is immutable.
    repeated string volumeLifecycleModes = 8;
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
message IoK8sApiStorageV1CSINode {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. metadata.name must be the Kubernetes node name.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the specification of CSINode
    IoK8sApiStorageV1CSINodeSpec spec = 4;
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
message IoK8sApiStorageV1CSINodeDriver {
    // allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
    IoK8sApiStorageV1VolumeNodeResources allocatable = 1;

    // name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
    string name = 2;

    // nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
    string nodeID = 3;

    // topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
    repeated string topologyKeys = 4;
}

// CSINodeList is a collection of CSINode objects.
message IoK8sApiStorageV1CSINodeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of CSINode
    repeated IoK8sApiStorageV1CSINode items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
message IoK8sApiStorageV1CSINodeSpec {
    // drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
    repeated IoK8sApiStorageV1CSINodeDriver drivers = 1;
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
// 
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
// 
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
// 
// The producer of these objects can decide which approach is more suitable.
// 
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
message IoK8sApiStorageV1CSIStorageCapacity {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
    // 
    // The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.
    string capacity = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
    // 
    // This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
    string maximumVolumeSize = 4;

    // Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
    // 
    // Objects are namespaced.
    // 
    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
    IoK8sApimachineryPkgApisMetaV1LabelSelector nodeTopology = 6;

    // storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
    string storageClassName = 7;
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
message IoK8sApiStorageV1CSIStorageCapacityList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of CSIStorageCapacity objects.
    repeated IoK8sApiStorageV1CSIStorageCapacity items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
// 
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
message IoK8sApiStorageV1StorageClass {
    // allowVolumeExpansion shows whether the storage class allow volume expand.
    bool allowVolumeExpansion = 1;

    // allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
    repeated IoK8sApiCoreV1TopologySelectorTerm allowedTopologies = 2;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
    repeated string mountOptions = 6;

    // parameters holds the parameters for the provisioner that should create volumes of this storage class.
    map<string, string> parameters = 7;

    // provisioner indicates the type of the provisioner.
    string provisioner = 8;

    // reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
    string reclaimPolicy = 9;

    // volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
    string volumeBindingMode = 10;
}

// StorageClassList is a collection of storage classes.
message IoK8sApiStorageV1StorageClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of StorageClasses
    repeated IoK8sApiStorageV1StorageClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// TokenRequest contains parameters of a service account token.
message IoK8sApiStorageV1TokenRequest {
    // audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
    string audience = 1;

    // expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
    int64 expirationSeconds = 2;
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
// 
// VolumeAttachment objects are non-namespaced.
message IoK8sApiStorageV1VolumeAttachment {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
    IoK8sApiStorageV1VolumeAttachmentSpec spec = 4;

    // status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
    IoK8sApiStorageV1VolumeAttachmentStatus status = 5;
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
message IoK8sApiStorageV1VolumeAttachmentList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of VolumeAttachments
    repeated IoK8sApiStorageV1VolumeAttachment items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
message IoK8sApiStorageV1VolumeAttachmentSource {
    // inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
    IoK8sApiCoreV1PersistentVolumeSpec inlineVolumeSpec = 1;

    // persistentVolumeName represents the name of the persistent volume to attach.
    string persistentVolumeName = 2;
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
message IoK8sApiStorageV1VolumeAttachmentSpec {
    // attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
    string attacher = 1;

    // nodeName represents the node that the volume should be attached to.
    string nodeName = 2;

    // source represents the volume that should be attached.
    IoK8sApiStorageV1VolumeAttachmentSource source = 3;
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
message IoK8sApiStorageV1VolumeAttachmentStatus {
    // attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    IoK8sApiStorageV1VolumeError attachError = 1;

    // attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    bool attached = 2;

    // attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    map<string, string> attachmentMetadata = 3;

    // detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
    IoK8sApiStorageV1VolumeError detachError = 4;
}

// VolumeError captures an error encountered during a volume operation.
message IoK8sApiStorageV1VolumeError {
    // message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
    string message = 1;

    // time represents the time the error was encountered.
    string time = 2;
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
message IoK8sApiStorageV1VolumeNodeResources {
    // count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
    int32 count = 1;
}

// CustomResourceColumnDefinition specifies a column for server side printing.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition {
    // description is a human readable description of this column.
    string description = 1;

    // format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
    string format = 2;

    // jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
    string jsonPath = 3;

    // name is a human readable name for the column.
    string name = 4;

    // priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
    int32 priority = 5;

    // type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
    string type = 6;
}

// CustomResourceConversion describes how to convert different versions of a CR.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion {
    // strategy specifies how custom resources are converted between versions. Allowed values are: - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information
    //   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
    string strategy = 1;

    // webhook describes how to call the conversion webhook. Required when `strategy` is set to `"Webhook"`.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion webhook = 2;
}

// CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec describes how the user wants the resources to appear
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec spec = 4;

    // status indicates the actual state of the CustomResourceDefinition
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus status = 5;
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition {
    // lastTransitionTime last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // message is a human-readable message indicating details about last transition.
    string message = 2;

    // reason is a unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // status is the status of the condition. Can be True, False, Unknown.
    string status = 4;

    // type is the type of the condition. Types include Established, NamesAccepted and Terminating.
    string type = 5;
}

// CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // items list individual CustomResourceDefinition objects
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames {
    // categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
    repeated string categories = 1;

    // kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
    string kind = 2;

    // listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
    string listKind = 3;

    // plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
    string plural = 4;

    // shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
    repeated string shortNames = 5;

    // singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
    string singular = 6;
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec {
    // conversion defines conversion settings for the CRD.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion conversion = 1;

    // group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
    string group = 2;

    // names specify the resource and kind names for the custom resource.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames names = 3;

    // preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.
    bool preserveUnknownFields = 4;

    // scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
    string scope = 5;

    // versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion versions = 6;
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus {
    // acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames acceptedNames = 1;

    // conditions indicate state for particular aspects of a CustomResourceDefinition
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition conditions = 2;

    // storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
    repeated string storedVersions = 3;
}

// CustomResourceDefinitionVersion describes a version for CRD.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion {
    // additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition additionalPrinterColumns = 1;

    // deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
    bool deprecated = 2;

    // deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
    string deprecationWarning = 3;

    // name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
    string name = 4;

    // schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation schema = 5;

    // served is a flag enabling/disabling this version from being served via REST APIs
    bool served = 6;

    // storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
    bool storage = 7;

    // subresources specify what subresources this version of the defined custom resource have.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources subresources = 8;
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale {
    // labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
    string labelSelectorPath = 1;

    // specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
    string specReplicasPath = 2;

    // statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
    string statusReplicasPath = 3;
}

// CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus {}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources {
    // scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale scale = 1;

    // status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus status = 2;
}

// CustomResourceValidation is a list of validation methods for CustomResources.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation {
    // openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps openAPIV3Schema = 1;
}

// ExternalDocumentation allows referencing an external resource for extended documentation.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation {
    string description = 1;
    string url = 2;
}

// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON {}

// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
    string _ref = 1;
    string _schema = 2;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool additionalItems = 3;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool additionalProperties = 4;
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps allOf = 5;
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps anyOf = 6;

    // default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON default = 7;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps> definitions = 8;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrStringArray> dependencies = 9;
    string description = 10;
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON enum = 11;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON example = 12;
    bool exclusiveMaximum = 13;
    bool exclusiveMinimum = 14;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation externalDocs = 15;

    // format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
    // 
    // - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
    string format = 16;
    string id = 17;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray items = 18;
    int64 maxItems = 19;
    int64 maxLength = 20;
    int64 maxProperties = 21;
    double maximum = 22;
    int64 minItems = 23;
    int64 minLength = 24;
    int64 minProperties = 25;
    double minimum = 26;
    double multipleOf = 27;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps not = 28;
    bool nullable = 29;
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps oneOf = 30;
    string pattern = 31;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps> patternProperties = 32;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps> properties = 33;
    repeated string required = 34;
    string title = 35;
    string type = 36;
    bool uniqueItems = 37;

    // x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
    bool x_kubernetes_embedded_resource = 38;

    // x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
    // 
    // 1) anyOf:
    //    - type: integer
    //    - type: string
    // 2) allOf:
    //    - anyOf:
    //      - type: integer
    //      - type: string
    //    - ... zero or more
    bool x_kubernetes_int_or_string = 39;

    // x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
    // 
    // This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
    // 
    // The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
    repeated string x_kubernetes_list_map_keys = 40;

    // x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
    // 
    // 1) `atomic`: the list is treated as a single entity, like a scalar.
    //      Atomic lists will be entirely replaced when updated. This extension
    //      may be used on any type of list (struct, scalar, ...).
    // 2) `set`:
    //      Sets are lists that must not have multiple items with the same value. Each
    //      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
    //      array with x-kubernetes-list-type `atomic`.
    // 3) `map`:
    //      These lists are like maps in that their elements have a non-index key
    //      used to identify them. Order is preserved upon merge. The map tag
    //      must only be used on a list with elements of type object.
    // Defaults to atomic for arrays.
    string x_kubernetes_list_type = 41;

    // x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
    // 
    // 1) `granular`:
    //      These maps are actual maps (key-value pairs) and each fields are independent
    //      from each other (they can each be manipulated by separate actors). This is
    //      the default behaviour for all maps.
    // 2) `atomic`: the list is treated as a single entity, like a scalar.
    //      Atomic maps will be entirely replaced when updated.
    string x_kubernetes_map_type = 42;

    // x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
    bool x_kubernetes_preserve_unknown_fields = 43;

    // x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRule x_kubernetes_validations = 44;
}

// JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray {}

// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool {}

// JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrStringArray {}

// ServiceReference holds a reference to Service.legacy.k8s.io
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference {
    // name is the name of the service. Required
    string name = 1;

    // namespace is the namespace of the service. Required
    string namespace = 2;

    // path is an optional URL path at which the webhook will be contacted.
    string path = 3;

    // port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
    int32 port = 4;
}

// ValidationRule describes a validation rule written in the CEL expression language.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRule {
    // Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host"
    string message = 1;

    // MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: "x must be less than max ("+string(self.max)+")"
    string messageExpression = 2;

    // Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {"rule": "self.status.actual <= self.spec.maxDesired"}
    // 
    // If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {"rule": "self.components['Widget'].priority < 10"} - Rule scoped to a list of integers: {"rule": "self.values.all(value, value >= 0 && value < 100)"} - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}
    // 
    // The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.
    // 
    // Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:
    //   - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
    //   - An array where the items schema is of an "unknown type"
    //   - An object where the additionalProperties schema is of an "unknown type"
    // 
    // Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
    // 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
    // 	  "import", "let", "loop", "package", "namespace", "return".
    // Examples:
    //   - Rule accessing a property named "namespace": {"rule": "self.__namespace__ > 0"}
    //   - Rule accessing a property named "x-prop": {"rule": "self.x__dash__prop > 0"}
    //   - Rule accessing a property named "redact__d": {"rule": "self.redact__underscores__d > 0"}
    // 
    // Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
    //   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
    //     non-intersecting elements in `Y` are appended, retaining their partial order.
    //   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
    //     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
    //     non-intersecting keys are appended, retaining their partial order.
    string rule = 3;
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig {
    // caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
    bytes caBundle = 1;

    // service is a reference to the service for this webhook. Either service or url must be specified.
    // 
    // If the webhook is running within the cluster, then you should use `service`.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference service = 2;

    // url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
    // 
    // The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
    // 
    // Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
    // 
    // The scheme must be "https"; the URL must begin with "https://".
    // 
    // A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
    // 
    // Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    string url = 3;
}

// WebhookConversion describes how to call a conversion webhook
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion {
    // clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig clientConfig = 1;

    // conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
    repeated string conversionReviewVersions = 2;
}

// APIGroup contains the name, the supported versions, and the preferred version of a group.
message IoK8sApimachineryPkgApisMetaV1APIGroup {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // name is the name of the group.
    string name = 3;

    // preferredVersion is the version preferred by the API server, which probably is the storage version.
    IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery preferredVersion = 4;

    // a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    repeated IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR serverAddressByClientCIDRs = 5;

    // versions are the versions supported in this group.
    repeated IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery versions = 6;
}

// APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
message IoK8sApimachineryPkgApisMetaV1APIGroupList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // groups is a list of APIGroup.
    repeated IoK8sApimachineryPkgApisMetaV1APIGroup groups = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;
}

// APIResource specifies the name of a resource and whether it is namespaced.
message IoK8sApimachineryPkgApisMetaV1APIResource {
    // categories is a list of the grouped resources this resource belongs to (e.g. 'all')
    repeated string categories = 1;

    // group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
    string group = 2;

    // kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
    string kind = 3;

    // name is the plural name of the resource.
    string name = 4;

    // namespaced indicates if a resource is namespaced or not.
    bool namespaced = 5;

    // shortNames is a list of suggested short names of the resource.
    repeated string shortNames = 6;

    // singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
    string singularName = 7;

    // The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
    string storageVersionHash = 8;

    // verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
    repeated string verbs = 9;

    // version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
    string version = 10;
}

// APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
message IoK8sApimachineryPkgApisMetaV1APIResourceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // groupVersion is the group and version this APIResourceList is for.
    string groupVersion = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // resources contains the name of the resources and if they are namespaced.
    repeated IoK8sApimachineryPkgApisMetaV1APIResource resources = 4;
}

// APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
message IoK8sApimachineryPkgApisMetaV1APIVersions {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    repeated IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR serverAddressByClientCIDRs = 3;

    // versions are the api versions that are available.
    repeated string versions = 4;
}

// Condition contains details for one aspect of the current state of this API Resource.
message IoK8sApimachineryPkgApisMetaV1Condition {
    // lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    string lastTransitionTime = 1;

    // message is a human readable message indicating details about the transition. This may be an empty string.
    string message = 2;

    // observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    int64 observedGeneration = 3;

    // reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    string reason = 4;

    // status of the condition, one of True, False, Unknown.
    string status = 5;

    // type of condition in CamelCase or in foo.example.com/CamelCase.
    string type = 6;
}

// DeleteOptions may be provided when deleting an API object.
message IoK8sApimachineryPkgApisMetaV1DeleteOptions {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    repeated string dryRun = 2;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int64 gracePeriodSeconds = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    IoK8sApimachineryPkgApisMetaV1Preconditions preconditions = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    string propagationPolicy = 7;
}

// FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
// 
// Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
// 
// The exact format is defined in sigs.k8s.io/structured-merge-diff
message IoK8sApimachineryPkgApisMetaV1FieldsV1 {}

// GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
message IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
    // groupVersion specifies the API group and version in the form "group/version"
    string groupVersion = 1;

    // version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
    string version = 2;
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
message IoK8sApimachineryPkgApisMetaV1LabelSelector {
    // matchExpressions is a list of label selector requirements. The requirements are ANDed.
    repeated IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement matchExpressions = 1;

    // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    map<string, string> matchLabels = 2;
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
message IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
    // key is the label key that the selector applies to.
    string key = 1;

    // operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    string operator = 2;

    // values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    repeated string values = 3;
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
message IoK8sApimachineryPkgApisMetaV1ListMeta {
    // continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
    string continue = 1;

    // remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
    int64 remainingItemCount = 2;

    // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resourceVersion = 3;

    // Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
    string selfLink = 4;
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
message IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry {
    // APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
    string apiVersion = 1;

    // FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
    string fieldsType = 2;

    // FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
    IoK8sApimachineryPkgApisMetaV1FieldsV1 fieldsV1 = 3;

    // Manager is an identifier of the workflow managing these fields.
    string manager = 4;

    // Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
    string operation = 5;

    // Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
    string subresource = 6;

    // Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
    string time = 7;
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
message IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    map<string, string> annotations = 1;

    // CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
    // 
    // Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    string creationTimestamp = 2;

    // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    int64 deletionGracePeriodSeconds = 3;

    // DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
    // 
    // Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    string deletionTimestamp = 4;

    // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
    repeated string finalizers = 5;

    // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
    // 
    // If this field is specified and the generated name exists, the server will return a 409.
    // 
    // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generateName = 6;

    // A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    int64 generation = 7;

    // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    map<string, string> labels = 8;

    // ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
    repeated IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry managedFields = 9;

    // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    string name = 10;

    // Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
    // 
    // Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
    string namespace = 11;

    // List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    repeated IoK8sApimachineryPkgApisMetaV1OwnerReference ownerReferences = 12;

    // An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
    // 
    // Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resourceVersion = 13;

    // Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
    string selfLink = 14;

    // UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
    // 
    // Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    string uid = 15;
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
message IoK8sApimachineryPkgApisMetaV1OwnerReference {
    // API version of the referent.
    string apiVersion = 1;

    // If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    bool blockOwnerDeletion = 2;

    // If true, this reference points to the managing controller.
    bool controller = 3;

    // Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    string name = 5;

    // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    string uid = 6;
}

// Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
message IoK8sApimachineryPkgApisMetaV1Patch {}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
message IoK8sApimachineryPkgApisMetaV1Preconditions {
    // Specifies the target ResourceVersion
    string resourceVersion = 1;

    // Specifies the target UID.
    string uid = 2;
}

// ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
message IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR {
    // The CIDR with which clients can match their IP to figure out the server address that they should use.
    string clientCIDR = 1;

    // Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
    string serverAddress = 2;
}

// Status is a return value for calls that don't return other objects.
message IoK8sApimachineryPkgApisMetaV1Status {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Suggested HTTP return code for this status, 0 if not set.
    int32 code = 2;

    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
    IoK8sApimachineryPkgApisMetaV1StatusDetails details = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 4;

    // A human-readable description of the status of this operation.
    string message = 5;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 6;

    // A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
    string reason = 7;

    // Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    string status = 8;
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
message IoK8sApimachineryPkgApisMetaV1StatusCause {
    // The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
    // 
    // Examples:
    //   "name" - the field "name" on the current resource
    //   "items[0].name" - the field "name" on the first array entry in "items"
    string field = 1;

    // A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
    string message = 2;

    // A machine-readable description of the cause of the error. If this value is empty there is no information available.
    string reason = 3;
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
message IoK8sApimachineryPkgApisMetaV1StatusDetails {
    // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
    repeated IoK8sApimachineryPkgApisMetaV1StatusCause causes = 1;

    // The group attribute of the resource associated with the status StatusReason.
    string group = 2;

    // The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
    string name = 4;

    // If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
    int32 retryAfterSeconds = 5;

    // UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    string uid = 6;
}

// Event represents a single event to a watched resource.
message IoK8sApimachineryPkgApisMetaV1WatchEvent {
    // Object is:
    //  * If Type is Added or Modified: the new state of the object.
    //  * If Type is Deleted: the state of the object immediately before deletion.
    //  * If Type is Error: *Status is recommended; other types may make sense
    //    depending on context.
    IoK8sApimachineryPkgRuntimeRawExtension object = 1;
    string type = 2;
}

// RawExtension is used to hold extensions in external versions.
// 
// To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
// 
// // Internal package:
// 
// 	type MyAPIObject struct {
// 		runtime.TypeMeta `json:",inline"`
// 		MyPlugin runtime.Object `json:"myPlugin"`
// 	}
// 
// 	type PluginA struct {
// 		AOption string `json:"aOption"`
// 	}
// 
// // External package:
// 
// 	type MyAPIObject struct {
// 		runtime.TypeMeta `json:",inline"`
// 		MyPlugin runtime.RawExtension `json:"myPlugin"`
// 	}
// 
// 	type PluginA struct {
// 		AOption string `json:"aOption"`
// 	}
// 
// // On the wire, the JSON will look something like this:
// 
// 	{
// 		"kind":"MyAPIObject",
// 		"apiVersion":"v1",
// 		"myPlugin": {
// 			"kind":"PluginA",
// 			"aOption":"foo",
// 		},
// 	}
// 
// So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
message IoK8sApimachineryPkgRuntimeRawExtension {}

// Info contains versioning information. how we'll want to distribute that information.
message IoK8sApimachineryPkgVersionInfo {
    string buildDate = 1;
    string compiler = 2;
    string gitCommit = 3;
    string gitTreeState = 4;
    string gitVersion = 5;
    string goVersion = 6;
    string major = 7;
    string minor = 8;
    string platform = 9;
}

// APIService represents a server for a particular GroupVersion. Name must be "version.group".
message IoK8sKubeAggregatorPkgApisApiregistrationV1APIService {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec contains information for locating and communicating with a server
    IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec spec = 4;

    // Status contains derived information about an API server
    IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus status = 5;
}

// APIServiceCondition describes the state of an APIService at a particular point
message IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // Human-readable message indicating details about last transition.
    string message = 2;

    // Unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // Status is the status of the condition. Can be True, False, Unknown.
    string status = 4;

    // Type is the type of the condition.
    string type = 5;
}

// APIServiceList is a list of APIService objects.
message IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of APIService
    repeated IoK8sKubeAggregatorPkgApisApiregistrationV1APIService items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
message IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec {
    // CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
    bytes caBundle = 1;

    // Group is the API group name this server hosts
    string group = 2;

    // GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
    int32 groupPriorityMinimum = 3;

    // InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
    bool insecureSkipTLSVerify = 4;

    // Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
    IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference service = 5;

    // Version is the API version this server hosts.  For example, "v1"
    string version = 6;

    // VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
    int32 versionPriority = 7;
}

// APIServiceStatus contains derived information about an API server
message IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus {
    // Current service state of apiService.
    repeated IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition conditions = 1;
}

// ServiceReference holds a reference to Service.legacy.k8s.io
message IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference {
    // Name is the name of the service
    string name = 1;

    // Namespace is the namespace of the service
    string namespace = 2;

    // If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    int32 port = 3;
}

message ListAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListApiextensionsV1CustomResourceDefinitionRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListApiregistrationV1ApiServiceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAppsV1ControllerRevisionForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAppsV1DaemonSetForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAppsV1DeploymentForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAppsV1NamespacedControllerRevisionRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListAppsV1NamespacedDaemonSetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListAppsV1NamespacedDeploymentRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListAppsV1NamespacedReplicaSetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListAppsV1NamespacedStatefulSetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListAppsV1ReplicaSetForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAppsV1StatefulSetForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListAutoscalingV2HorizontalPodAutoscalerForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListBatchV1CronJobForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListBatchV1JobForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListBatchV1NamespacedCronJobRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListBatchV1NamespacedJobRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCertificatesV1CertificateSigningRequestRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCertificatesV1alpha1ClusterTrustBundleRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoordinationV1LeaseForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoordinationV1NamespacedLeaseRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1ComponentStatusRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1ConfigMapForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1EndpointsForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1EventForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1LimitRangeForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1NamespaceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1NamespacedConfigMapRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedEndpointsRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedEventRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedLimitRangeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedPersistentVolumeClaimRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedPodRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedPodTemplateRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedReplicationControllerRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedResourceQuotaRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedSecretRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedServiceAccountRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NamespacedServiceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListCoreV1NodeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1PersistentVolumeClaimForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1PersistentVolumeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1PodForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1PodTemplateForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1ReplicationControllerForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1ResourceQuotaForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1SecretForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1ServiceAccountForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListCoreV1ServiceForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListDiscoveryV1EndpointSliceForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListDiscoveryV1NamespacedEndpointSliceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListEventsV1EventForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListEventsV1NamespacedEventRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListFlowcontrolApiserverV1beta2FlowSchemaRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListFlowcontrolApiserverV1beta3FlowSchemaRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListInternalApiserverV1alpha1StorageVersionRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListNetworkingV1IngressClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListNetworkingV1IngressForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListNetworkingV1NamespacedIngressRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListNetworkingV1NamespacedNetworkPolicyRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListNetworkingV1NetworkPolicyForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListNetworkingV1alpha1ClusterCidrRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListNetworkingV1alpha1IpAddressRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListNodeV1RuntimeClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListPolicyV1NamespacedPodDisruptionBudgetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListPolicyV1PodDisruptionBudgetForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListRbacAuthorizationV1ClusterRoleBindingRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListRbacAuthorizationV1ClusterRoleRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListRbacAuthorizationV1NamespacedRoleBindingRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListRbacAuthorizationV1NamespacedRoleRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListRbacAuthorizationV1RoleForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListResourceV1alpha2NamespacedPodSchedulingContextRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListResourceV1alpha2NamespacedResourceClaimRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListResourceV1alpha2PodSchedulingContextForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListResourceV1alpha2ResourceClaimForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListResourceV1alpha2ResourceClaimTemplateForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListResourceV1alpha2ResourceClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListSchedulingV1PriorityClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListStorageV1CsiDriverRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListStorageV1CsiNodeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListStorageV1CsiStorageCapacityForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListStorageV1NamespacedCsiStorageCapacityRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message ListStorageV1StorageClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message ListStorageV1VolumeAttachmentRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message LogFileHandlerRequest {
    // path to the log
    string logpath = 1;
}

message PatchAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the MutatingWebhookConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ValidatingWebhookConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ValidatingAdmissionPolicyBinding
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ValidatingAdmissionPolicy
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ValidatingAdmissionPolicy
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchApiextensionsV1CustomResourceDefinitionRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CustomResourceDefinition
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchApiextensionsV1CustomResourceDefinitionStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CustomResourceDefinition
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchApiregistrationV1ApiServiceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the APIService
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchApiregistrationV1ApiServiceStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the APIService
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchAppsV1NamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ControllerRevision
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the DaemonSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedDaemonSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the DaemonSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Deployment
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedDeploymentScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Scale
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedDeploymentStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Deployment
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ReplicaSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedReplicaSetScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Scale
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedReplicaSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ReplicaSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the StatefulSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedStatefulSetScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Scale
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAppsV1NamespacedStatefulSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the StatefulSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchAutoscalingV2NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchBatchV1NamespacedCronJobRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CronJob
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchBatchV1NamespacedCronJobStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CronJob
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchBatchV1NamespacedJobRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Job
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchBatchV1NamespacedJobStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Job
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCertificatesV1CertificateSigningRequestApprovalRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CertificateSigningRequest
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCertificatesV1CertificateSigningRequestRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CertificateSigningRequest
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCertificatesV1CertificateSigningRequestStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CertificateSigningRequest
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCertificatesV1alpha1ClusterTrustBundleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ClusterTrustBundle
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCoordinationV1NamespacedLeaseRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Lease
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespaceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Namespace
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCoreV1NamespaceStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Namespace
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCoreV1NamespacedConfigMapRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ConfigMap
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedEndpointsRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Endpoints
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Event
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedLimitRangeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the LimitRange
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PersistentVolumeClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedPersistentVolumeClaimStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PersistentVolumeClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedPodEphemeralcontainersRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Pod
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedPodRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Pod
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedPodStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Pod
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedPodTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PodTemplate
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedReplicationControllerRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ReplicationController
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedReplicationControllerScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Scale
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedReplicationControllerStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ReplicationController
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedResourceQuotaRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ResourceQuota
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedResourceQuotaStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ResourceQuota
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedSecretRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Secret
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedServiceAccountRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ServiceAccount
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedServiceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Service
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NamespacedServiceStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Service
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchCoreV1NodeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Node
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCoreV1NodeStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Node
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCoreV1PersistentVolumeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PersistentVolume
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchCoreV1PersistentVolumeStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PersistentVolume
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchDiscoveryV1NamespacedEndpointSliceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the EndpointSlice
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchEventsV1NamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Event
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchFlowcontrolApiserverV1beta2FlowSchemaRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the FlowSchema
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the FlowSchema
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PriorityLevelConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PriorityLevelConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the FlowSchema
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the FlowSchema
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PriorityLevelConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PriorityLevelConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchInternalApiserverV1alpha1StorageVersionRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the StorageVersion
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchInternalApiserverV1alpha1StorageVersionStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the StorageVersion
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchNetworkingV1IngressClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the IngressClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchNetworkingV1NamespacedIngressRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Ingress
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchNetworkingV1NamespacedIngressStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Ingress
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the NetworkPolicy
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchNetworkingV1alpha1ClusterCidrRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ClusterCIDR
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchNetworkingV1alpha1IpAddressRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the IPAddress
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchNodeV1RuntimeClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the RuntimeClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchPolicyV1NamespacedPodDisruptionBudgetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PodDisruptionBudget
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchPolicyV1NamespacedPodDisruptionBudgetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PodDisruptionBudget
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ClusterRoleBinding
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ClusterRole
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the RoleBinding
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the Role
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchResourceV1alpha2NamespacedPodSchedulingContextRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PodSchedulingContext
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchResourceV1alpha2NamespacedPodSchedulingContextStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PodSchedulingContext
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchResourceV1alpha2NamespacedResourceClaimRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ResourceClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchResourceV1alpha2NamespacedResourceClaimStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ResourceClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ResourceClaimTemplate
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchResourceV1alpha2ResourceClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the ResourceClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchSchedulingV1PriorityClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the PriorityClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchStorageV1CsiDriverRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CSIDriver
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchStorageV1CsiNodeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CSINode
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchStorageV1NamespacedCsiStorageCapacityRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the CSIStorageCapacity
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;
}

message PatchStorageV1StorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the StorageClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchStorageV1VolumeAttachmentRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the VolumeAttachment
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message PatchStorageV1VolumeAttachmentStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    bool force = 5;

    // name of the VolumeAttachment
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReadAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    // name of the MutatingWebhookConfiguration
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    // name of the ValidatingWebhookConfiguration
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    // name of the ValidatingAdmissionPolicyBinding
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    // name of the ValidatingAdmissionPolicy
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusRequest {
    // name of the ValidatingAdmissionPolicy
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadApiextensionsV1CustomResourceDefinitionRequest {
    // name of the CustomResourceDefinition
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadApiextensionsV1CustomResourceDefinitionStatusRequest {
    // name of the CustomResourceDefinition
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadApiregistrationV1ApiServiceRequest {
    // name of the APIService
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadApiregistrationV1ApiServiceStatusRequest {
    // name of the APIService
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadAppsV1NamespacedControllerRevisionRequest {
    // name of the ControllerRevision
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedDaemonSetRequest {
    // name of the DaemonSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedDaemonSetStatusRequest {
    // name of the DaemonSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedDeploymentRequest {
    // name of the Deployment
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedDeploymentScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedDeploymentStatusRequest {
    // name of the Deployment
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedReplicaSetRequest {
    // name of the ReplicaSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedReplicaSetScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedReplicaSetStatusRequest {
    // name of the ReplicaSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedStatefulSetRequest {
    // name of the StatefulSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedStatefulSetScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1NamespacedStatefulSetStatusRequest {
    // name of the StatefulSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    // name of the HorizontalPodAutoscaler
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest {
    // name of the HorizontalPodAutoscaler
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    // name of the HorizontalPodAutoscaler
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAutoscalingV2NamespacedHorizontalPodAutoscalerStatusRequest {
    // name of the HorizontalPodAutoscaler
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadBatchV1NamespacedCronJobRequest {
    // name of the CronJob
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadBatchV1NamespacedCronJobStatusRequest {
    // name of the CronJob
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadBatchV1NamespacedJobRequest {
    // name of the Job
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadBatchV1NamespacedJobStatusRequest {
    // name of the Job
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCertificatesV1CertificateSigningRequestApprovalRequest {
    // name of the CertificateSigningRequest
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCertificatesV1CertificateSigningRequestRequest {
    // name of the CertificateSigningRequest
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCertificatesV1CertificateSigningRequestStatusRequest {
    // name of the CertificateSigningRequest
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCertificatesV1alpha1ClusterTrustBundleRequest {
    // name of the ClusterTrustBundle
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoordinationV1NamespacedLeaseRequest {
    // name of the Lease
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1ComponentStatusRequest {
    // name of the ComponentStatus
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1NamespaceRequest {
    // name of the Namespace
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1NamespaceStatusRequest {
    // name of the Namespace
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1NamespacedConfigMapRequest {
    // name of the ConfigMap
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedEndpointsRequest {
    // name of the Endpoints
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedEventRequest {
    // name of the Event
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedLimitRangeRequest {
    // name of the LimitRange
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPersistentVolumeClaimRequest {
    // name of the PersistentVolumeClaim
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPersistentVolumeClaimStatusRequest {
    // name of the PersistentVolumeClaim
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPodEphemeralcontainersRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPodLogRequest {
    // The container for which to stream logs. Defaults to only container if there is one container in the pod.
    string container = 1;

    // Follow the log stream of the pod. Defaults to false.
    bool follow = 2;

    // insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
    bool insecureSkipTLSVerifyBackend = 3;

    // If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
    int32 limitBytes = 4;

    // name of the Pod
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // Return previous terminated container logs. Defaults to false.
    bool previous = 8;

    // A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
    int32 sinceSeconds = 9;

    // If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
    int32 tailLines = 10;

    // If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
    bool timestamps = 11;
}

message ReadCoreV1NamespacedPodRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPodStatusRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPodTemplateRequest {
    // name of the PodTemplate
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedReplicationControllerRequest {
    // name of the ReplicationController
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedReplicationControllerScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedReplicationControllerStatusRequest {
    // name of the ReplicationController
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedResourceQuotaRequest {
    // name of the ResourceQuota
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedResourceQuotaStatusRequest {
    // name of the ResourceQuota
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedSecretRequest {
    // name of the Secret
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedServiceAccountRequest {
    // name of the ServiceAccount
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedServiceStatusRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NodeRequest {
    // name of the Node
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1NodeStatusRequest {
    // name of the Node
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1PersistentVolumeRequest {
    // name of the PersistentVolume
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1PersistentVolumeStatusRequest {
    // name of the PersistentVolume
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadDiscoveryV1NamespacedEndpointSliceRequest {
    // name of the EndpointSlice
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadEventsV1NamespacedEventRequest {
    // name of the Event
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadFlowcontrolApiserverV1beta2FlowSchemaRequest {
    // name of the FlowSchema
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest {
    // name of the FlowSchema
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    // name of the PriorityLevelConfiguration
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest {
    // name of the PriorityLevelConfiguration
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta3FlowSchemaRequest {
    // name of the FlowSchema
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
    // name of the FlowSchema
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    // name of the PriorityLevelConfiguration
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
    // name of the PriorityLevelConfiguration
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadInternalApiserverV1alpha1StorageVersionRequest {
    // name of the StorageVersion
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadInternalApiserverV1alpha1StorageVersionStatusRequest {
    // name of the StorageVersion
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadNetworkingV1IngressClassRequest {
    // name of the IngressClass
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadNetworkingV1NamespacedIngressRequest {
    // name of the Ingress
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadNetworkingV1NamespacedIngressStatusRequest {
    // name of the Ingress
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadNetworkingV1NamespacedNetworkPolicyRequest {
    // name of the NetworkPolicy
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadNetworkingV1alpha1ClusterCidrRequest {
    // name of the ClusterCIDR
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadNetworkingV1alpha1IpAddressRequest {
    // name of the IPAddress
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadNodeV1RuntimeClassRequest {
    // name of the RuntimeClass
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadPolicyV1NamespacedPodDisruptionBudgetRequest {
    // name of the PodDisruptionBudget
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest {
    // name of the PodDisruptionBudget
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadRbacAuthorizationV1ClusterRoleBindingRequest {
    // name of the ClusterRoleBinding
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadRbacAuthorizationV1ClusterRoleRequest {
    // name of the ClusterRole
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadRbacAuthorizationV1NamespacedRoleBindingRequest {
    // name of the RoleBinding
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadRbacAuthorizationV1NamespacedRoleRequest {
    // name of the Role
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadResourceV1alpha2NamespacedPodSchedulingContextRequest {
    // name of the PodSchedulingContext
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadResourceV1alpha2NamespacedPodSchedulingContextStatusRequest {
    // name of the PodSchedulingContext
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadResourceV1alpha2NamespacedResourceClaimRequest {
    // name of the ResourceClaim
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadResourceV1alpha2NamespacedResourceClaimStatusRequest {
    // name of the ResourceClaim
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    // name of the ResourceClaimTemplate
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadResourceV1alpha2ResourceClassRequest {
    // name of the ResourceClass
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadSchedulingV1PriorityClassRequest {
    // name of the PriorityClass
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadStorageV1CsiDriverRequest {
    // name of the CSIDriver
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadStorageV1CsiNodeRequest {
    // name of the CSINode
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadStorageV1NamespacedCsiStorageCapacityRequest {
    // name of the CSIStorageCapacity
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadStorageV1StorageClassRequest {
    // name of the StorageClass
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadStorageV1VolumeAttachmentRequest {
    // name of the VolumeAttachment
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadStorageV1VolumeAttachmentStatusRequest {
    // name of the VolumeAttachment
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReplaceAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the MutatingWebhookConfiguration
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ValidatingWebhookConfiguration
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ValidatingAdmissionPolicyBinding
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ValidatingAdmissionPolicy
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusRequest {
    IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ValidatingAdmissionPolicy
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceApiextensionsV1CustomResourceDefinitionRequest {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CustomResourceDefinition
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceApiextensionsV1CustomResourceDefinitionStatusRequest {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CustomResourceDefinition
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceApiregistrationV1ApiServiceRequest {
    IoK8sKubeAggregatorPkgApisApiregistrationV1APIService body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the APIService
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceApiregistrationV1ApiServiceStatusRequest {
    IoK8sKubeAggregatorPkgApisApiregistrationV1APIService body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the APIService
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceAppsV1NamespacedControllerRevisionRequest {
    IoK8sApiAppsV1ControllerRevision body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ControllerRevision
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedDaemonSetRequest {
    IoK8sApiAppsV1DaemonSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the DaemonSet
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedDaemonSetStatusRequest {
    IoK8sApiAppsV1DaemonSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the DaemonSet
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedDeploymentRequest {
    IoK8sApiAppsV1Deployment body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Deployment
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedDeploymentScaleRequest {
    IoK8sApiAutoscalingV1Scale body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Scale
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedDeploymentStatusRequest {
    IoK8sApiAppsV1Deployment body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Deployment
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedReplicaSetRequest {
    IoK8sApiAppsV1ReplicaSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ReplicaSet
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedReplicaSetScaleRequest {
    IoK8sApiAutoscalingV1Scale body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Scale
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedReplicaSetStatusRequest {
    IoK8sApiAppsV1ReplicaSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ReplicaSet
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedStatefulSetRequest {
    IoK8sApiAppsV1StatefulSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the StatefulSet
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedStatefulSetScaleRequest {
    IoK8sApiAutoscalingV1Scale body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Scale
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAppsV1NamespacedStatefulSetStatusRequest {
    IoK8sApiAppsV1StatefulSet body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the StatefulSet
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV1HorizontalPodAutoscaler body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the HorizontalPodAutoscaler
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApiAutoscalingV1HorizontalPodAutoscaler body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the HorizontalPodAutoscaler
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV2HorizontalPodAutoscaler body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the HorizontalPodAutoscaler
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApiAutoscalingV2HorizontalPodAutoscaler body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the HorizontalPodAutoscaler
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceBatchV1NamespacedCronJobRequest {
    IoK8sApiBatchV1CronJob body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CronJob
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceBatchV1NamespacedCronJobStatusRequest {
    IoK8sApiBatchV1CronJob body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CronJob
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceBatchV1NamespacedJobRequest {
    IoK8sApiBatchV1Job body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Job
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceBatchV1NamespacedJobStatusRequest {
    IoK8sApiBatchV1Job body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Job
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCertificatesV1CertificateSigningRequestApprovalRequest {
    IoK8sApiCertificatesV1CertificateSigningRequest body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CertificateSigningRequest
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCertificatesV1CertificateSigningRequestRequest {
    IoK8sApiCertificatesV1CertificateSigningRequest body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CertificateSigningRequest
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCertificatesV1CertificateSigningRequestStatusRequest {
    IoK8sApiCertificatesV1CertificateSigningRequest body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CertificateSigningRequest
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCertificatesV1alpha1ClusterTrustBundleRequest {
    IoK8sApiCertificatesV1alpha1ClusterTrustBundle body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ClusterTrustBundle
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoordinationV1NamespacedLeaseRequest {
    IoK8sApiCoordinationV1Lease body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Lease
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespaceFinalizeRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Namespace
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoreV1NamespaceRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Namespace
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoreV1NamespaceStatusRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Namespace
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoreV1NamespacedConfigMapRequest {
    IoK8sApiCoreV1ConfigMap body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ConfigMap
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedEndpointsRequest {
    IoK8sApiCoreV1Endpoints body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Endpoints
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedEventRequest {
    IoK8sApiCoreV1Event body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Event
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedLimitRangeRequest {
    IoK8sApiCoreV1LimitRange body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the LimitRange
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApiCoreV1PersistentVolumeClaim body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PersistentVolumeClaim
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRequest {
    IoK8sApiCoreV1PersistentVolumeClaim body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PersistentVolumeClaim
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedPodEphemeralcontainersRequest {
    IoK8sApiCoreV1Pod body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Pod
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedPodRequest {
    IoK8sApiCoreV1Pod body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Pod
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedPodStatusRequest {
    IoK8sApiCoreV1Pod body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Pod
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedPodTemplateRequest {
    IoK8sApiCoreV1PodTemplate body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PodTemplate
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedReplicationControllerRequest {
    IoK8sApiCoreV1ReplicationController body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ReplicationController
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedReplicationControllerScaleRequest {
    IoK8sApiAutoscalingV1Scale body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Scale
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedReplicationControllerStatusRequest {
    IoK8sApiCoreV1ReplicationController body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ReplicationController
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedResourceQuotaRequest {
    IoK8sApiCoreV1ResourceQuota body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ResourceQuota
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedResourceQuotaStatusRequest {
    IoK8sApiCoreV1ResourceQuota body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ResourceQuota
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedSecretRequest {
    IoK8sApiCoreV1Secret body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Secret
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedServiceAccountRequest {
    IoK8sApiCoreV1ServiceAccount body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ServiceAccount
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedServiceRequest {
    IoK8sApiCoreV1Service body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Service
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NamespacedServiceStatusRequest {
    IoK8sApiCoreV1Service body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Service
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceCoreV1NodeRequest {
    IoK8sApiCoreV1Node body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Node
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoreV1NodeStatusRequest {
    IoK8sApiCoreV1Node body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Node
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoreV1PersistentVolumeRequest {
    IoK8sApiCoreV1PersistentVolume body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PersistentVolume
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceCoreV1PersistentVolumeStatusRequest {
    IoK8sApiCoreV1PersistentVolume body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PersistentVolume
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceDiscoveryV1NamespacedEndpointSliceRequest {
    IoK8sApiDiscoveryV1EndpointSlice body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the EndpointSlice
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceEventsV1NamespacedEventRequest {
    IoK8sApiEventsV1Event body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Event
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceFlowcontrolApiserverV1beta2FlowSchemaRequest {
    IoK8sApiFlowcontrolV1beta2FlowSchema body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the FlowSchema
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRequest {
    IoK8sApiFlowcontrolV1beta2FlowSchema body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the FlowSchema
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PriorityLevelConfiguration
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest {
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PriorityLevelConfiguration
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
    IoK8sApiFlowcontrolV1beta3FlowSchema body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the FlowSchema
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
    IoK8sApiFlowcontrolV1beta3FlowSchema body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the FlowSchema
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PriorityLevelConfiguration
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
    IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PriorityLevelConfiguration
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceInternalApiserverV1alpha1StorageVersionRequest {
    IoK8sApiApiserverinternalV1alpha1StorageVersion body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the StorageVersion
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceInternalApiserverV1alpha1StorageVersionStatusRequest {
    IoK8sApiApiserverinternalV1alpha1StorageVersion body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the StorageVersion
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceNetworkingV1IngressClassRequest {
    IoK8sApiNetworkingV1IngressClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the IngressClass
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceNetworkingV1NamespacedIngressRequest {
    IoK8sApiNetworkingV1Ingress body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Ingress
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceNetworkingV1NamespacedIngressStatusRequest {
    IoK8sApiNetworkingV1Ingress body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Ingress
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApiNetworkingV1NetworkPolicy body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the NetworkPolicy
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceNetworkingV1alpha1ClusterCidrRequest {
    IoK8sApiNetworkingV1alpha1ClusterCIDR body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ClusterCIDR
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceNetworkingV1alpha1IpAddressRequest {
    IoK8sApiNetworkingV1alpha1IPAddress body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the IPAddress
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceNodeV1RuntimeClassRequest {
    IoK8sApiNodeV1RuntimeClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the RuntimeClass
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplacePolicyV1NamespacedPodDisruptionBudgetRequest {
    IoK8sApiPolicyV1PodDisruptionBudget body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PodDisruptionBudget
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplacePolicyV1NamespacedPodDisruptionBudgetStatusRequest {
    IoK8sApiPolicyV1PodDisruptionBudget body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PodDisruptionBudget
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApiRbacV1ClusterRoleBinding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ClusterRoleBinding
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApiRbacV1ClusterRole body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ClusterRole
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApiRbacV1RoleBinding body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the RoleBinding
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApiRbacV1Role body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the Role
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceResourceV1alpha2NamespacedPodSchedulingContextRequest {
    IoK8sApiResourceV1alpha2PodSchedulingContext body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PodSchedulingContext
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatusRequest {
    IoK8sApiResourceV1alpha2PodSchedulingContext body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PodSchedulingContext
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceResourceV1alpha2NamespacedResourceClaimRequest {
    IoK8sApiResourceV1alpha2ResourceClaim body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ResourceClaim
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceResourceV1alpha2NamespacedResourceClaimStatusRequest {
    IoK8sApiResourceV1alpha2ResourceClaim body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ResourceClaim
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    IoK8sApiResourceV1alpha2ResourceClaimTemplate body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ResourceClaimTemplate
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceResourceV1alpha2ResourceClassRequest {
    IoK8sApiResourceV1alpha2ResourceClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the ResourceClass
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceSchedulingV1PriorityClassRequest {
    IoK8sApiSchedulingV1PriorityClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the PriorityClass
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceStorageV1CsiDriverRequest {
    IoK8sApiStorageV1CSIDriver body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CSIDriver
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceStorageV1CsiNodeRequest {
    IoK8sApiStorageV1CSINode body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CSINode
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceStorageV1NamespacedCsiStorageCapacityRequest {
    IoK8sApiStorageV1CSIStorageCapacity body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the CSIStorageCapacity
    string name = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;
}

message ReplaceStorageV1StorageClassRequest {
    IoK8sApiStorageV1StorageClass body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the StorageClass
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceStorageV1VolumeAttachmentRequest {
    IoK8sApiStorageV1VolumeAttachment body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the VolumeAttachment
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message ReplaceStorageV1VolumeAttachmentStatusRequest {
    IoK8sApiStorageV1VolumeAttachment body = 1;

    // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    string dryRun = 2;

    // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    string fieldManager = 3;

    // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    string fieldValidation = 4;

    // name of the VolumeAttachment
    string name = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;
}

message WatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAdmissionregistrationV1MutatingWebhookConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the MutatingWebhookConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ValidatingWebhookConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ValidatingAdmissionPolicyBinding
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ValidatingAdmissionPolicy
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchApiextensionsV1CustomResourceDefinitionListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchApiextensionsV1CustomResourceDefinitionRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CustomResourceDefinition
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchApiregistrationV1ApiServiceListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchApiregistrationV1ApiServiceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the APIService
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAppsV1ControllerRevisionListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1DaemonSetListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1DeploymentListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1NamespacedControllerRevisionListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAppsV1NamespacedControllerRevisionRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ControllerRevision
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchAppsV1NamespacedDaemonSetListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAppsV1NamespacedDaemonSetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the DaemonSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchAppsV1NamespacedDeploymentListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAppsV1NamespacedDeploymentRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Deployment
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchAppsV1NamespacedReplicaSetListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAppsV1NamespacedReplicaSetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ReplicaSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchAppsV1NamespacedStatefulSetListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAppsV1NamespacedStatefulSetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StatefulSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchAppsV1ReplicaSetListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1StatefulSetListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchAutoscalingV2HorizontalPodAutoscalerListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAutoscalingV2NamespacedHorizontalPodAutoscalerListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchAutoscalingV2NamespacedHorizontalPodAutoscalerRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchBatchV1CronJobListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchBatchV1JobListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchBatchV1NamespacedCronJobListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchBatchV1NamespacedCronJobRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CronJob
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchBatchV1NamespacedJobListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchBatchV1NamespacedJobRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Job
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCertificatesV1CertificateSigningRequestListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCertificatesV1CertificateSigningRequestRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CertificateSigningRequest
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCertificatesV1alpha1ClusterTrustBundleListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCertificatesV1alpha1ClusterTrustBundleRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterTrustBundle
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoordinationV1LeaseListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoordinationV1NamespacedLeaseListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoordinationV1NamespacedLeaseRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Lease
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1ConfigMapListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1EndpointsListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1EventListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1LimitRangeListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespaceListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespaceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Namespace
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedConfigMapListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedConfigMapRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ConfigMap
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedEndpointsListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedEndpointsRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Endpoints
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedEventListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedEventRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Event
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedLimitRangeListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedLimitRangeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the LimitRange
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedPersistentVolumeClaimListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedPersistentVolumeClaimRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PersistentVolumeClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedPodListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedPodRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Pod
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedPodTemplateListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedPodTemplateRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PodTemplate
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedReplicationControllerListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedReplicationControllerRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ReplicationController
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedResourceQuotaListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedResourceQuotaRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ResourceQuota
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedSecretListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedSecretRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Secret
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedServiceAccountListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedServiceAccountRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ServiceAccount
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NamespacedServiceListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1NamespacedServiceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Service
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchCoreV1NodeListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NodeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Node
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1PersistentVolumeListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1PersistentVolumeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PersistentVolume
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchCoreV1PodListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1PodTemplateListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1ReplicationControllerListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1ResourceQuotaListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1SecretListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1ServiceAccountListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1ServiceListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchDiscoveryV1EndpointSliceListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchDiscoveryV1NamespacedEndpointSliceListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchDiscoveryV1NamespacedEndpointSliceRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the EndpointSlice
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchEventsV1EventListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchEventsV1NamespacedEventListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchEventsV1NamespacedEventRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Event
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchFlowcontrolApiserverV1beta2FlowSchemaListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchFlowcontrolApiserverV1beta2FlowSchemaRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the FlowSchema
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PriorityLevelConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the FlowSchema
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PriorityLevelConfiguration
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchInternalApiserverV1alpha1StorageVersionListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchInternalApiserverV1alpha1StorageVersionRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StorageVersion
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchNetworkingV1IngressClassListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNetworkingV1IngressClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the IngressClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchNetworkingV1IngressListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNetworkingV1NamespacedIngressListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchNetworkingV1NamespacedIngressRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Ingress
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchNetworkingV1NamespacedNetworkPolicyListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchNetworkingV1NamespacedNetworkPolicyRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the NetworkPolicy
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchNetworkingV1NetworkPolicyListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNetworkingV1alpha1ClusterCidrListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNetworkingV1alpha1ClusterCidrRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterCIDR
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchNetworkingV1alpha1IpAddressListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNetworkingV1alpha1IpAddressRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the IPAddress
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchNodeV1RuntimeClassListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNodeV1RuntimeClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the RuntimeClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchPolicyV1NamespacedPodDisruptionBudgetListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchPolicyV1NamespacedPodDisruptionBudgetRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PodDisruptionBudget
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1ClusterRoleBindingListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1ClusterRoleBindingRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterRoleBinding
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchRbacAuthorizationV1ClusterRoleListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1ClusterRoleRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterRole
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchRbacAuthorizationV1NamespacedRoleBindingRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the RoleBinding
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchRbacAuthorizationV1NamespacedRoleListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchRbacAuthorizationV1NamespacedRoleRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Role
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchResourceV1alpha2NamespacedPodSchedulingContextListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchResourceV1alpha2NamespacedPodSchedulingContextRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PodSchedulingContext
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchResourceV1alpha2NamespacedResourceClaimListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchResourceV1alpha2NamespacedResourceClaimRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ResourceClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchResourceV1alpha2NamespacedResourceClaimTemplateListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ResourceClaimTemplate
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchResourceV1alpha2PodSchedulingContextListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchResourceV1alpha2ResourceClaimListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchResourceV1alpha2ResourceClassListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchResourceV1alpha2ResourceClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ResourceClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchSchedulingV1PriorityClassListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchSchedulingV1PriorityClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PriorityClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchStorageV1CsiDriverListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchStorageV1CsiDriverRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CSIDriver
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchStorageV1CsiNodeListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchStorageV1CsiNodeRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CSINode
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchStorageV1CsiStorageCapacityListForAllNamespacesRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchStorageV1NamespacedCsiStorageCapacityListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchStorageV1NamespacedCsiStorageCapacityRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CSIStorageCapacity
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 9;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 10;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 11;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 12;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 13;
}

message WatchStorageV1StorageClassListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchStorageV1StorageClassRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StorageClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

message WatchStorageV1VolumeAttachmentListRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 7;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 8;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 9;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchStorageV1VolumeAttachmentRequest {
    // allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    bool allowWatchBookmarks = 1;

    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    // 
    // This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 2;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the VolumeAttachment
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersion = 8;

    // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    // 
    // Defaults to unset
    string resourceVersionMatch = 9;

    // `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    // 
    // When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
    //   is interpreted as "data at least as new as the provided `resourceVersion`"
    //   and the bookmark event is send when the state is synced
    //   to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
    //   If `resourceVersion` is unset, this is interpreted as "consistent read" and the
    //   bookmark event is send when the state is synced at least to the moment
    //   when request started being processed.
    // - `resourceVersionMatch` set to any other value or unset
    //   Invalid error is returned.
    // 
    // Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    bool sendInitialEvents = 10;

    // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    int32 timeoutSeconds = 11;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 12;
}

service KubernetesService {
    // connect DELETE requests to proxy of Pod
    rpc ConnectCoreV1DeleteNamespacedPodProxy(ConnectCoreV1DeleteNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Pod
    rpc ConnectCoreV1DeleteNamespacedPodProxyWithPath(ConnectCoreV1DeleteNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Service
    rpc ConnectCoreV1DeleteNamespacedServiceProxy(ConnectCoreV1DeleteNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Service
    rpc ConnectCoreV1DeleteNamespacedServiceProxyWithPath(ConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Node
    rpc ConnectCoreV1DeleteNodeProxy(ConnectCoreV1DeleteNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Node
    rpc ConnectCoreV1DeleteNodeProxyWithPath(ConnectCoreV1DeleteNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to attach of Pod
    rpc ConnectCoreV1GetNamespacedPodAttach(ConnectCoreV1GetNamespacedPodAttachRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to exec of Pod
    rpc ConnectCoreV1GetNamespacedPodExec(ConnectCoreV1GetNamespacedPodExecRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to portforward of Pod
    rpc ConnectCoreV1GetNamespacedPodPortforward(ConnectCoreV1GetNamespacedPodPortforwardRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Pod
    rpc ConnectCoreV1GetNamespacedPodProxy(ConnectCoreV1GetNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Pod
    rpc ConnectCoreV1GetNamespacedPodProxyWithPath(ConnectCoreV1GetNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Service
    rpc ConnectCoreV1GetNamespacedServiceProxy(ConnectCoreV1GetNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Service
    rpc ConnectCoreV1GetNamespacedServiceProxyWithPath(ConnectCoreV1GetNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Node
    rpc ConnectCoreV1GetNodeProxy(ConnectCoreV1GetNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Node
    rpc ConnectCoreV1GetNodeProxyWithPath(ConnectCoreV1GetNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Pod
    rpc ConnectCoreV1PatchNamespacedPodProxy(ConnectCoreV1PatchNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Pod
    rpc ConnectCoreV1PatchNamespacedPodProxyWithPath(ConnectCoreV1PatchNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Service
    rpc ConnectCoreV1PatchNamespacedServiceProxy(ConnectCoreV1PatchNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Service
    rpc ConnectCoreV1PatchNamespacedServiceProxyWithPath(ConnectCoreV1PatchNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Node
    rpc ConnectCoreV1PatchNodeProxy(ConnectCoreV1PatchNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Node
    rpc ConnectCoreV1PatchNodeProxyWithPath(ConnectCoreV1PatchNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to attach of Pod
    rpc ConnectCoreV1PostNamespacedPodAttach(ConnectCoreV1PostNamespacedPodAttachRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to exec of Pod
    rpc ConnectCoreV1PostNamespacedPodExec(ConnectCoreV1PostNamespacedPodExecRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to portforward of Pod
    rpc ConnectCoreV1PostNamespacedPodPortforward(ConnectCoreV1PostNamespacedPodPortforwardRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Pod
    rpc ConnectCoreV1PostNamespacedPodProxy(ConnectCoreV1PostNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Pod
    rpc ConnectCoreV1PostNamespacedPodProxyWithPath(ConnectCoreV1PostNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Service
    rpc ConnectCoreV1PostNamespacedServiceProxy(ConnectCoreV1PostNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Service
    rpc ConnectCoreV1PostNamespacedServiceProxyWithPath(ConnectCoreV1PostNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Node
    rpc ConnectCoreV1PostNodeProxy(ConnectCoreV1PostNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Node
    rpc ConnectCoreV1PostNodeProxyWithPath(ConnectCoreV1PostNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Pod
    rpc ConnectCoreV1PutNamespacedPodProxy(ConnectCoreV1PutNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Pod
    rpc ConnectCoreV1PutNamespacedPodProxyWithPath(ConnectCoreV1PutNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Service
    rpc ConnectCoreV1PutNamespacedServiceProxy(ConnectCoreV1PutNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Service
    rpc ConnectCoreV1PutNamespacedServiceProxyWithPath(ConnectCoreV1PutNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Node
    rpc ConnectCoreV1PutNodeProxy(ConnectCoreV1PutNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Node
    rpc ConnectCoreV1PutNodeProxyWithPath(ConnectCoreV1PutNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // create a MutatingWebhookConfiguration
    rpc CreateAdmissionregistrationV1MutatingWebhookConfiguration(CreateAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration) {}

    // create a ValidatingWebhookConfiguration
    rpc CreateAdmissionregistrationV1ValidatingWebhookConfiguration(CreateAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration) {}

    // create a ValidatingAdmissionPolicy
    rpc CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // create a ValidatingAdmissionPolicyBinding
    rpc CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding) {}

    // create a CustomResourceDefinition
    rpc CreateApiextensionsV1CustomResourceDefinition(CreateApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // create an APIService
    rpc CreateApiregistrationV1ApiService(CreateApiregistrationV1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // create a ControllerRevision
    rpc CreateAppsV1NamespacedControllerRevision(CreateAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1ControllerRevision) {}

    // create a DaemonSet
    rpc CreateAppsV1NamespacedDaemonSet(CreateAppsV1NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // create a Deployment
    rpc CreateAppsV1NamespacedDeployment(CreateAppsV1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1Deployment) {}

    // create a ReplicaSet
    rpc CreateAppsV1NamespacedReplicaSet(CreateAppsV1NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // create a StatefulSet
    rpc CreateAppsV1NamespacedStatefulSet(CreateAppsV1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // create a SelfSubjectReview
    rpc CreateAuthenticationV1SelfSubjectReview(CreateAuthenticationV1SelfSubjectReviewRequest) returns (IoK8sApiAuthenticationV1SelfSubjectReview) {}

    // create a TokenReview
    rpc CreateAuthenticationV1TokenReview(CreateAuthenticationV1TokenReviewRequest) returns (IoK8sApiAuthenticationV1TokenReview) {}

    // create a SelfSubjectReview
    rpc CreateAuthenticationV1alpha1SelfSubjectReview(CreateAuthenticationV1alpha1SelfSubjectReviewRequest) returns (IoK8sApiAuthenticationV1alpha1SelfSubjectReview) {}

    // create a SelfSubjectReview
    rpc CreateAuthenticationV1beta1SelfSubjectReview(CreateAuthenticationV1beta1SelfSubjectReviewRequest) returns (IoK8sApiAuthenticationV1beta1SelfSubjectReview) {}

    // create a LocalSubjectAccessReview
    rpc CreateAuthorizationV1NamespacedLocalSubjectAccessReview(CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1LocalSubjectAccessReview) {}

    // create a SelfSubjectAccessReview
    rpc CreateAuthorizationV1SelfSubjectAccessReview(CreateAuthorizationV1SelfSubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1SelfSubjectAccessReview) {}

    // create a SelfSubjectRulesReview
    rpc CreateAuthorizationV1SelfSubjectRulesReview(CreateAuthorizationV1SelfSubjectRulesReviewRequest) returns (IoK8sApiAuthorizationV1SelfSubjectRulesReview) {}

    // create a SubjectAccessReview
    rpc CreateAuthorizationV1SubjectAccessReview(CreateAuthorizationV1SubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1SubjectAccessReview) {}

    // create a HorizontalPodAutoscaler
    rpc CreateAutoscalingV1NamespacedHorizontalPodAutoscaler(CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // create a HorizontalPodAutoscaler
    rpc CreateAutoscalingV2NamespacedHorizontalPodAutoscaler(CreateAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // create a CronJob
    rpc CreateBatchV1NamespacedCronJob(CreateBatchV1NamespacedCronJobRequest) returns (IoK8sApiBatchV1CronJob) {}

    // create a Job
    rpc CreateBatchV1NamespacedJob(CreateBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // create a CertificateSigningRequest
    rpc CreateCertificatesV1CertificateSigningRequest(CreateCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // create a ClusterTrustBundle
    rpc CreateCertificatesV1alpha1ClusterTrustBundle(CreateCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApiCertificatesV1alpha1ClusterTrustBundle) {}

    // create a Lease
    rpc CreateCoordinationV1NamespacedLease(CreateCoordinationV1NamespacedLeaseRequest) returns (IoK8sApiCoordinationV1Lease) {}

    // create a Namespace
    rpc CreateCoreV1Namespace(CreateCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // create a Binding
    rpc CreateCoreV1NamespacedBinding(CreateCoreV1NamespacedBindingRequest) returns (IoK8sApiCoreV1Binding) {}

    // create a ConfigMap
    rpc CreateCoreV1NamespacedConfigMap(CreateCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // create Endpoints
    rpc CreateCoreV1NamespacedEndpoints(CreateCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // create an Event
    rpc CreateCoreV1NamespacedEvent(CreateCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // create a LimitRange
    rpc CreateCoreV1NamespacedLimitRange(CreateCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // create a PersistentVolumeClaim
    rpc CreateCoreV1NamespacedPersistentVolumeClaim(CreateCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // create a Pod
    rpc CreateCoreV1NamespacedPod(CreateCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // create binding of a Pod
    rpc CreateCoreV1NamespacedPodBinding(CreateCoreV1NamespacedPodBindingRequest) returns (IoK8sApiCoreV1Binding) {}

    // create eviction of a Pod
    rpc CreateCoreV1NamespacedPodEviction(CreateCoreV1NamespacedPodEvictionRequest) returns (IoK8sApiPolicyV1Eviction) {}

    // create a PodTemplate
    rpc CreateCoreV1NamespacedPodTemplate(CreateCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // create a ReplicationController
    rpc CreateCoreV1NamespacedReplicationController(CreateCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // create a ResourceQuota
    rpc CreateCoreV1NamespacedResourceQuota(CreateCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // create a Secret
    rpc CreateCoreV1NamespacedSecret(CreateCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // create a Service
    rpc CreateCoreV1NamespacedService(CreateCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // create a ServiceAccount
    rpc CreateCoreV1NamespacedServiceAccount(CreateCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // create token of a ServiceAccount
    rpc CreateCoreV1NamespacedServiceAccountToken(CreateCoreV1NamespacedServiceAccountTokenRequest) returns (IoK8sApiAuthenticationV1TokenRequest) {}

    // create a Node
    rpc CreateCoreV1Node(CreateCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // create a PersistentVolume
    rpc CreateCoreV1PersistentVolume(CreateCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // create an EndpointSlice
    rpc CreateDiscoveryV1NamespacedEndpointSlice(CreateDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApiDiscoveryV1EndpointSlice) {}

    // create an Event
    rpc CreateEventsV1NamespacedEvent(CreateEventsV1NamespacedEventRequest) returns (IoK8sApiEventsV1Event) {}

    // create a FlowSchema
    rpc CreateFlowcontrolApiserverV1beta2FlowSchema(CreateFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // create a PriorityLevelConfiguration
    rpc CreateFlowcontrolApiserverV1beta2PriorityLevelConfiguration(CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // create a FlowSchema
    rpc CreateFlowcontrolApiserverV1beta3FlowSchema(CreateFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // create a PriorityLevelConfiguration
    rpc CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration(CreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // create a StorageVersion
    rpc CreateInternalApiserverV1alpha1StorageVersion(CreateInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // create an IngressClass
    rpc CreateNetworkingV1IngressClass(CreateNetworkingV1IngressClassRequest) returns (IoK8sApiNetworkingV1IngressClass) {}

    // create an Ingress
    rpc CreateNetworkingV1NamespacedIngress(CreateNetworkingV1NamespacedIngressRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // create a NetworkPolicy
    rpc CreateNetworkingV1NamespacedNetworkPolicy(CreateNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // create a ClusterCIDR
    rpc CreateNetworkingV1alpha1ClusterCidr(CreateNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApiNetworkingV1alpha1ClusterCIDR) {}

    // create an IPAddress
    rpc CreateNetworkingV1alpha1IpAddress(CreateNetworkingV1alpha1IpAddressRequest) returns (IoK8sApiNetworkingV1alpha1IPAddress) {}

    // create a RuntimeClass
    rpc CreateNodeV1RuntimeClass(CreateNodeV1RuntimeClassRequest) returns (IoK8sApiNodeV1RuntimeClass) {}

    // create a PodDisruptionBudget
    rpc CreatePolicyV1NamespacedPodDisruptionBudget(CreatePolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // create a ClusterRole
    rpc CreateRbacAuthorizationV1ClusterRole(CreateRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // create a ClusterRoleBinding
    rpc CreateRbacAuthorizationV1ClusterRoleBinding(CreateRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // create a Role
    rpc CreateRbacAuthorizationV1NamespacedRole(CreateRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // create a RoleBinding
    rpc CreateRbacAuthorizationV1NamespacedRoleBinding(CreateRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // create a PodSchedulingContext
    rpc CreateResourceV1alpha2NamespacedPodSchedulingContext(CreateResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // create a ResourceClaim
    rpc CreateResourceV1alpha2NamespacedResourceClaim(CreateResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // create a ResourceClaimTemplate
    rpc CreateResourceV1alpha2NamespacedResourceClaimTemplate(CreateResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplate) {}

    // create a ResourceClass
    rpc CreateResourceV1alpha2ResourceClass(CreateResourceV1alpha2ResourceClassRequest) returns (IoK8sApiResourceV1alpha2ResourceClass) {}

    // create a PriorityClass
    rpc CreateSchedulingV1PriorityClass(CreateSchedulingV1PriorityClassRequest) returns (IoK8sApiSchedulingV1PriorityClass) {}

    // create a CSIDriver
    rpc CreateStorageV1CsiDriver(CreateStorageV1CsiDriverRequest) returns (IoK8sApiStorageV1CSIDriver) {}

    // create a CSINode
    rpc CreateStorageV1CsiNode(CreateStorageV1CsiNodeRequest) returns (IoK8sApiStorageV1CSINode) {}

    // create a CSIStorageCapacity
    rpc CreateStorageV1NamespacedCsiStorageCapacity(CreateStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApiStorageV1CSIStorageCapacity) {}

    // create a StorageClass
    rpc CreateStorageV1StorageClass(CreateStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // create a VolumeAttachment
    rpc CreateStorageV1VolumeAttachment(CreateStorageV1VolumeAttachmentRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // delete collection of MutatingWebhookConfiguration
    rpc DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ValidatingWebhookConfiguration
    rpc DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a MutatingWebhookConfiguration
    rpc DeleteAdmissionregistrationV1MutatingWebhookConfiguration(DeleteAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ValidatingWebhookConfiguration
    rpc DeleteAdmissionregistrationV1ValidatingWebhookConfiguration(DeleteAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ValidatingAdmissionPolicy
    rpc DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicy(DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ValidatingAdmissionPolicyBinding
    rpc DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBinding(DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ValidatingAdmissionPolicy
    rpc DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ValidatingAdmissionPolicyBinding
    rpc DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CustomResourceDefinition
    rpc DeleteApiextensionsV1CollectionCustomResourceDefinition(DeleteApiextensionsV1CollectionCustomResourceDefinitionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CustomResourceDefinition
    rpc DeleteApiextensionsV1CustomResourceDefinition(DeleteApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an APIService
    rpc DeleteApiregistrationV1ApiService(DeleteApiregistrationV1ApiServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of APIService
    rpc DeleteApiregistrationV1CollectionApiService(DeleteApiregistrationV1CollectionApiServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ControllerRevision
    rpc DeleteAppsV1CollectionNamespacedControllerRevision(DeleteAppsV1CollectionNamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of DaemonSet
    rpc DeleteAppsV1CollectionNamespacedDaemonSet(DeleteAppsV1CollectionNamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Deployment
    rpc DeleteAppsV1CollectionNamespacedDeployment(DeleteAppsV1CollectionNamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ReplicaSet
    rpc DeleteAppsV1CollectionNamespacedReplicaSet(DeleteAppsV1CollectionNamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StatefulSet
    rpc DeleteAppsV1CollectionNamespacedStatefulSet(DeleteAppsV1CollectionNamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ControllerRevision
    rpc DeleteAppsV1NamespacedControllerRevision(DeleteAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a DaemonSet
    rpc DeleteAppsV1NamespacedDaemonSet(DeleteAppsV1NamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Deployment
    rpc DeleteAppsV1NamespacedDeployment(DeleteAppsV1NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ReplicaSet
    rpc DeleteAppsV1NamespacedReplicaSet(DeleteAppsV1NamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StatefulSet
    rpc DeleteAppsV1NamespacedStatefulSet(DeleteAppsV1NamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of HorizontalPodAutoscaler
    rpc DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a HorizontalPodAutoscaler
    rpc DeleteAutoscalingV1NamespacedHorizontalPodAutoscaler(DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of HorizontalPodAutoscaler
    rpc DeleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler(DeleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a HorizontalPodAutoscaler
    rpc DeleteAutoscalingV2NamespacedHorizontalPodAutoscaler(DeleteAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CronJob
    rpc DeleteBatchV1CollectionNamespacedCronJob(DeleteBatchV1CollectionNamespacedCronJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Job
    rpc DeleteBatchV1CollectionNamespacedJob(DeleteBatchV1CollectionNamespacedJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CronJob
    rpc DeleteBatchV1NamespacedCronJob(DeleteBatchV1NamespacedCronJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Job
    rpc DeleteBatchV1NamespacedJob(DeleteBatchV1NamespacedJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CertificateSigningRequest
    rpc DeleteCertificatesV1CertificateSigningRequest(DeleteCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CertificateSigningRequest
    rpc DeleteCertificatesV1CollectionCertificateSigningRequest(DeleteCertificatesV1CollectionCertificateSigningRequestRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterTrustBundle
    rpc DeleteCertificatesV1alpha1ClusterTrustBundle(DeleteCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterTrustBundle
    rpc DeleteCertificatesV1alpha1CollectionClusterTrustBundle(DeleteCertificatesV1alpha1CollectionClusterTrustBundleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Lease
    rpc DeleteCoordinationV1CollectionNamespacedLease(DeleteCoordinationV1CollectionNamespacedLeaseRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Lease
    rpc DeleteCoordinationV1NamespacedLease(DeleteCoordinationV1NamespacedLeaseRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ConfigMap
    rpc DeleteCoreV1CollectionNamespacedConfigMap(DeleteCoreV1CollectionNamespacedConfigMapRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Endpoints
    rpc DeleteCoreV1CollectionNamespacedEndpoints(DeleteCoreV1CollectionNamespacedEndpointsRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Event
    rpc DeleteCoreV1CollectionNamespacedEvent(DeleteCoreV1CollectionNamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of LimitRange
    rpc DeleteCoreV1CollectionNamespacedLimitRange(DeleteCoreV1CollectionNamespacedLimitRangeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PersistentVolumeClaim
    rpc DeleteCoreV1CollectionNamespacedPersistentVolumeClaim(DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Pod
    rpc DeleteCoreV1CollectionNamespacedPod(DeleteCoreV1CollectionNamespacedPodRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PodTemplate
    rpc DeleteCoreV1CollectionNamespacedPodTemplate(DeleteCoreV1CollectionNamespacedPodTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ReplicationController
    rpc DeleteCoreV1CollectionNamespacedReplicationController(DeleteCoreV1CollectionNamespacedReplicationControllerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ResourceQuota
    rpc DeleteCoreV1CollectionNamespacedResourceQuota(DeleteCoreV1CollectionNamespacedResourceQuotaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Secret
    rpc DeleteCoreV1CollectionNamespacedSecret(DeleteCoreV1CollectionNamespacedSecretRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Service
    rpc DeleteCoreV1CollectionNamespacedService(DeleteCoreV1CollectionNamespacedServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ServiceAccount
    rpc DeleteCoreV1CollectionNamespacedServiceAccount(DeleteCoreV1CollectionNamespacedServiceAccountRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Node
    rpc DeleteCoreV1CollectionNode(DeleteCoreV1CollectionNodeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PersistentVolume
    rpc DeleteCoreV1CollectionPersistentVolume(DeleteCoreV1CollectionPersistentVolumeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Namespace
    rpc DeleteCoreV1Namespace(DeleteCoreV1NamespaceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ConfigMap
    rpc DeleteCoreV1NamespacedConfigMap(DeleteCoreV1NamespacedConfigMapRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete Endpoints
    rpc DeleteCoreV1NamespacedEndpoints(DeleteCoreV1NamespacedEndpointsRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an Event
    rpc DeleteCoreV1NamespacedEvent(DeleteCoreV1NamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a LimitRange
    rpc DeleteCoreV1NamespacedLimitRange(DeleteCoreV1NamespacedLimitRangeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PersistentVolumeClaim
    rpc DeleteCoreV1NamespacedPersistentVolumeClaim(DeleteCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // delete a Pod
    rpc DeleteCoreV1NamespacedPod(DeleteCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // delete a PodTemplate
    rpc DeleteCoreV1NamespacedPodTemplate(DeleteCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // delete a ReplicationController
    rpc DeleteCoreV1NamespacedReplicationController(DeleteCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ResourceQuota
    rpc DeleteCoreV1NamespacedResourceQuota(DeleteCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // delete a Secret
    rpc DeleteCoreV1NamespacedSecret(DeleteCoreV1NamespacedSecretRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Service
    rpc DeleteCoreV1NamespacedService(DeleteCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // delete a ServiceAccount
    rpc DeleteCoreV1NamespacedServiceAccount(DeleteCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // delete a Node
    rpc DeleteCoreV1Node(DeleteCoreV1NodeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PersistentVolume
    rpc DeleteCoreV1PersistentVolume(DeleteCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // delete collection of EndpointSlice
    rpc DeleteDiscoveryV1CollectionNamespacedEndpointSlice(DeleteDiscoveryV1CollectionNamespacedEndpointSliceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an EndpointSlice
    rpc DeleteDiscoveryV1NamespacedEndpointSlice(DeleteDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Event
    rpc DeleteEventsV1CollectionNamespacedEvent(DeleteEventsV1CollectionNamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an Event
    rpc DeleteEventsV1NamespacedEvent(DeleteEventsV1NamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of FlowSchema
    rpc DeleteFlowcontrolApiserverV1beta2CollectionFlowSchema(DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PriorityLevelConfiguration
    rpc DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration(DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a FlowSchema
    rpc DeleteFlowcontrolApiserverV1beta2FlowSchema(DeleteFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PriorityLevelConfiguration
    rpc DeleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration(DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of FlowSchema
    rpc DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema(DeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PriorityLevelConfiguration
    rpc DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration(DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a FlowSchema
    rpc DeleteFlowcontrolApiserverV1beta3FlowSchema(DeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PriorityLevelConfiguration
    rpc DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration(DeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StorageVersion
    rpc DeleteInternalApiserverV1alpha1CollectionStorageVersion(DeleteInternalApiserverV1alpha1CollectionStorageVersionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StorageVersion
    rpc DeleteInternalApiserverV1alpha1StorageVersion(DeleteInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of IngressClass
    rpc DeleteNetworkingV1CollectionIngressClass(DeleteNetworkingV1CollectionIngressClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Ingress
    rpc DeleteNetworkingV1CollectionNamespacedIngress(DeleteNetworkingV1CollectionNamespacedIngressRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of NetworkPolicy
    rpc DeleteNetworkingV1CollectionNamespacedNetworkPolicy(DeleteNetworkingV1CollectionNamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an IngressClass
    rpc DeleteNetworkingV1IngressClass(DeleteNetworkingV1IngressClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an Ingress
    rpc DeleteNetworkingV1NamespacedIngress(DeleteNetworkingV1NamespacedIngressRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a NetworkPolicy
    rpc DeleteNetworkingV1NamespacedNetworkPolicy(DeleteNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterCIDR
    rpc DeleteNetworkingV1alpha1ClusterCidr(DeleteNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterCIDR
    rpc DeleteNetworkingV1alpha1CollectionClusterCidr(DeleteNetworkingV1alpha1CollectionClusterCidrRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of IPAddress
    rpc DeleteNetworkingV1alpha1CollectionIpAddress(DeleteNetworkingV1alpha1CollectionIpAddressRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an IPAddress
    rpc DeleteNetworkingV1alpha1IpAddress(DeleteNetworkingV1alpha1IpAddressRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of RuntimeClass
    rpc DeleteNodeV1CollectionRuntimeClass(DeleteNodeV1CollectionRuntimeClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a RuntimeClass
    rpc DeleteNodeV1RuntimeClass(DeleteNodeV1RuntimeClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PodDisruptionBudget
    rpc DeletePolicyV1CollectionNamespacedPodDisruptionBudget(DeletePolicyV1CollectionNamespacedPodDisruptionBudgetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PodDisruptionBudget
    rpc DeletePolicyV1NamespacedPodDisruptionBudget(DeletePolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterRole
    rpc DeleteRbacAuthorizationV1ClusterRole(DeleteRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterRoleBinding
    rpc DeleteRbacAuthorizationV1ClusterRoleBinding(DeleteRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterRole
    rpc DeleteRbacAuthorizationV1CollectionClusterRole(DeleteRbacAuthorizationV1CollectionClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterRoleBinding
    rpc DeleteRbacAuthorizationV1CollectionClusterRoleBinding(DeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Role
    rpc DeleteRbacAuthorizationV1CollectionNamespacedRole(DeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of RoleBinding
    rpc DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Role
    rpc DeleteRbacAuthorizationV1NamespacedRole(DeleteRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a RoleBinding
    rpc DeleteRbacAuthorizationV1NamespacedRoleBinding(DeleteRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PodSchedulingContext
    rpc DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContext(DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ResourceClaim
    rpc DeleteResourceV1alpha2CollectionNamespacedResourceClaim(DeleteResourceV1alpha2CollectionNamespacedResourceClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ResourceClaimTemplate
    rpc DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate(DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ResourceClass
    rpc DeleteResourceV1alpha2CollectionResourceClass(DeleteResourceV1alpha2CollectionResourceClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PodSchedulingContext
    rpc DeleteResourceV1alpha2NamespacedPodSchedulingContext(DeleteResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // delete a ResourceClaim
    rpc DeleteResourceV1alpha2NamespacedResourceClaim(DeleteResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // delete a ResourceClaimTemplate
    rpc DeleteResourceV1alpha2NamespacedResourceClaimTemplate(DeleteResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplate) {}

    // delete a ResourceClass
    rpc DeleteResourceV1alpha2ResourceClass(DeleteResourceV1alpha2ResourceClassRequest) returns (IoK8sApiResourceV1alpha2ResourceClass) {}

    // delete collection of PriorityClass
    rpc DeleteSchedulingV1CollectionPriorityClass(DeleteSchedulingV1CollectionPriorityClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PriorityClass
    rpc DeleteSchedulingV1PriorityClass(DeleteSchedulingV1PriorityClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CSIDriver
    rpc DeleteStorageV1CollectionCsiDriver(DeleteStorageV1CollectionCsiDriverRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CSINode
    rpc DeleteStorageV1CollectionCsiNode(DeleteStorageV1CollectionCsiNodeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CSIStorageCapacity
    rpc DeleteStorageV1CollectionNamespacedCsiStorageCapacity(DeleteStorageV1CollectionNamespacedCsiStorageCapacityRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StorageClass
    rpc DeleteStorageV1CollectionStorageClass(DeleteStorageV1CollectionStorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of VolumeAttachment
    rpc DeleteStorageV1CollectionVolumeAttachment(DeleteStorageV1CollectionVolumeAttachmentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CSIDriver
    rpc DeleteStorageV1CsiDriver(DeleteStorageV1CsiDriverRequest) returns (IoK8sApiStorageV1CSIDriver) {}

    // delete a CSINode
    rpc DeleteStorageV1CsiNode(DeleteStorageV1CsiNodeRequest) returns (IoK8sApiStorageV1CSINode) {}

    // delete a CSIStorageCapacity
    rpc DeleteStorageV1NamespacedCsiStorageCapacity(DeleteStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StorageClass
    rpc DeleteStorageV1StorageClass(DeleteStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // delete a VolumeAttachment
    rpc DeleteStorageV1VolumeAttachment(DeleteStorageV1VolumeAttachmentRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // get information of a group
    rpc GetAdmissionregistrationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAdmissionregistrationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAdmissionregistrationV1alpha1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available API versions
    rpc GetApiVersions(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroupList) {}

    // get information of a group
    rpc GetApiextensionsApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetApiextensionsV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetApiregistrationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetApiregistrationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAppsApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAppsV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAuthenticationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAuthenticationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAuthenticationV1alpha1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAuthenticationV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAuthorizationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAuthorizationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAutoscalingApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAutoscalingV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAutoscalingV2ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetBatchApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetBatchV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetCertificatesApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetCertificatesV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetCertificatesV1alpha1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get the code version
    rpc GetCodeVersion(google.protobuf.Empty) returns (IoK8sApimachineryPkgVersionInfo) {}

    // get information of a group
    rpc GetCoordinationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetCoordinationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available API versions
    rpc GetCoreApiVersions(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIVersions) {}

    // get available resources
    rpc GetCoreV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetDiscoveryApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetDiscoveryV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetEventsApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetEventsV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetFlowcontrolApiserverApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetFlowcontrolApiserverV1beta2ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetFlowcontrolApiserverV1beta3ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetInternalApiserverApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetInternalApiserverV1alpha1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetNetworkingApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetNetworkingV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetNetworkingV1alpha1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetNodeApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetNodeV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetPolicyApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetPolicyV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetRbacAuthorizationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetRbacAuthorizationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetResourceApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetResourceV1alpha2ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetSchedulingApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetSchedulingV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get service account issuer OpenID configuration, also known as the 'OIDC discovery doc'
    rpc GetServiceAccountIssuerOpenIdConfiguration(google.protobuf.Empty) returns (google.protobuf.StringValue) {}

    // get service account issuer OpenID JSON Web Key Set (contains public token verification keys)
    rpc GetServiceAccountIssuerOpenIdKeyset(google.protobuf.Empty) returns (google.protobuf.StringValue) {}

    // get information of a group
    rpc GetStorageApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetStorageV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // list or watch objects of kind MutatingWebhookConfiguration
    rpc ListAdmissionregistrationV1MutatingWebhookConfiguration(ListAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1MutatingWebhookConfigurationList) {}

    // list or watch objects of kind ValidatingWebhookConfiguration
    rpc ListAdmissionregistrationV1ValidatingWebhookConfiguration(ListAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1ValidatingWebhookConfigurationList) {}

    // list or watch objects of kind ValidatingAdmissionPolicy
    rpc ListAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(ListAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList) {}

    // list or watch objects of kind ValidatingAdmissionPolicyBinding
    rpc ListAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(ListAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList) {}

    // list or watch objects of kind CustomResourceDefinition
    rpc ListApiextensionsV1CustomResourceDefinition(ListApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) {}

    // list or watch objects of kind APIService
    rpc ListApiregistrationV1ApiService(ListApiregistrationV1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) {}

    // list or watch objects of kind ControllerRevision
    rpc ListAppsV1ControllerRevisionForAllNamespaces(ListAppsV1ControllerRevisionForAllNamespacesRequest) returns (IoK8sApiAppsV1ControllerRevisionList) {}

    // list or watch objects of kind DaemonSet
    rpc ListAppsV1DaemonSetForAllNamespaces(ListAppsV1DaemonSetForAllNamespacesRequest) returns (IoK8sApiAppsV1DaemonSetList) {}

    // list or watch objects of kind Deployment
    rpc ListAppsV1DeploymentForAllNamespaces(ListAppsV1DeploymentForAllNamespacesRequest) returns (IoK8sApiAppsV1DeploymentList) {}

    // list or watch objects of kind ControllerRevision
    rpc ListAppsV1NamespacedControllerRevision(ListAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1ControllerRevisionList) {}

    // list or watch objects of kind DaemonSet
    rpc ListAppsV1NamespacedDaemonSet(ListAppsV1NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1DaemonSetList) {}

    // list or watch objects of kind Deployment
    rpc ListAppsV1NamespacedDeployment(ListAppsV1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1DeploymentList) {}

    // list or watch objects of kind ReplicaSet
    rpc ListAppsV1NamespacedReplicaSet(ListAppsV1NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1ReplicaSetList) {}

    // list or watch objects of kind StatefulSet
    rpc ListAppsV1NamespacedStatefulSet(ListAppsV1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1StatefulSetList) {}

    // list or watch objects of kind ReplicaSet
    rpc ListAppsV1ReplicaSetForAllNamespaces(ListAppsV1ReplicaSetForAllNamespacesRequest) returns (IoK8sApiAppsV1ReplicaSetList) {}

    // list or watch objects of kind StatefulSet
    rpc ListAppsV1StatefulSetForAllNamespaces(ListAppsV1StatefulSetForAllNamespacesRequest) returns (IoK8sApiAppsV1StatefulSetList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscalerList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV1NamespacedHorizontalPodAutoscaler(ListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscalerList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV2HorizontalPodAutoscalerForAllNamespaces(ListAutoscalingV2HorizontalPodAutoscalerForAllNamespacesRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscalerList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV2NamespacedHorizontalPodAutoscaler(ListAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscalerList) {}

    // list or watch objects of kind CronJob
    rpc ListBatchV1CronJobForAllNamespaces(ListBatchV1CronJobForAllNamespacesRequest) returns (IoK8sApiBatchV1CronJobList) {}

    // list or watch objects of kind Job
    rpc ListBatchV1JobForAllNamespaces(ListBatchV1JobForAllNamespacesRequest) returns (IoK8sApiBatchV1JobList) {}

    // list or watch objects of kind CronJob
    rpc ListBatchV1NamespacedCronJob(ListBatchV1NamespacedCronJobRequest) returns (IoK8sApiBatchV1CronJobList) {}

    // list or watch objects of kind Job
    rpc ListBatchV1NamespacedJob(ListBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1JobList) {}

    // list or watch objects of kind CertificateSigningRequest
    rpc ListCertificatesV1CertificateSigningRequest(ListCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequestList) {}

    // list or watch objects of kind ClusterTrustBundle
    rpc ListCertificatesV1alpha1ClusterTrustBundle(ListCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApiCertificatesV1alpha1ClusterTrustBundleList) {}

    // list or watch objects of kind Lease
    rpc ListCoordinationV1LeaseForAllNamespaces(ListCoordinationV1LeaseForAllNamespacesRequest) returns (IoK8sApiCoordinationV1LeaseList) {}

    // list or watch objects of kind Lease
    rpc ListCoordinationV1NamespacedLease(ListCoordinationV1NamespacedLeaseRequest) returns (IoK8sApiCoordinationV1LeaseList) {}

    // list objects of kind ComponentStatus
    rpc ListCoreV1ComponentStatus(ListCoreV1ComponentStatusRequest) returns (IoK8sApiCoreV1ComponentStatusList) {}

    // list or watch objects of kind ConfigMap
    rpc ListCoreV1ConfigMapForAllNamespaces(ListCoreV1ConfigMapForAllNamespacesRequest) returns (IoK8sApiCoreV1ConfigMapList) {}

    // list or watch objects of kind Endpoints
    rpc ListCoreV1EndpointsForAllNamespaces(ListCoreV1EndpointsForAllNamespacesRequest) returns (IoK8sApiCoreV1EndpointsList) {}

    // list or watch objects of kind Event
    rpc ListCoreV1EventForAllNamespaces(ListCoreV1EventForAllNamespacesRequest) returns (IoK8sApiCoreV1EventList) {}

    // list or watch objects of kind LimitRange
    rpc ListCoreV1LimitRangeForAllNamespaces(ListCoreV1LimitRangeForAllNamespacesRequest) returns (IoK8sApiCoreV1LimitRangeList) {}

    // list or watch objects of kind Namespace
    rpc ListCoreV1Namespace(ListCoreV1NamespaceRequest) returns (IoK8sApiCoreV1NamespaceList) {}

    // list or watch objects of kind ConfigMap
    rpc ListCoreV1NamespacedConfigMap(ListCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMapList) {}

    // list or watch objects of kind Endpoints
    rpc ListCoreV1NamespacedEndpoints(ListCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1EndpointsList) {}

    // list or watch objects of kind Event
    rpc ListCoreV1NamespacedEvent(ListCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1EventList) {}

    // list or watch objects of kind LimitRange
    rpc ListCoreV1NamespacedLimitRange(ListCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRangeList) {}

    // list or watch objects of kind PersistentVolumeClaim
    rpc ListCoreV1NamespacedPersistentVolumeClaim(ListCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaimList) {}

    // list or watch objects of kind Pod
    rpc ListCoreV1NamespacedPod(ListCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1PodList) {}

    // list or watch objects of kind PodTemplate
    rpc ListCoreV1NamespacedPodTemplate(ListCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplateList) {}

    // list or watch objects of kind ReplicationController
    rpc ListCoreV1NamespacedReplicationController(ListCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationControllerList) {}

    // list or watch objects of kind ResourceQuota
    rpc ListCoreV1NamespacedResourceQuota(ListCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuotaList) {}

    // list or watch objects of kind Secret
    rpc ListCoreV1NamespacedSecret(ListCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1SecretList) {}

    // list or watch objects of kind Service
    rpc ListCoreV1NamespacedService(ListCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1ServiceList) {}

    // list or watch objects of kind ServiceAccount
    rpc ListCoreV1NamespacedServiceAccount(ListCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccountList) {}

    // list or watch objects of kind Node
    rpc ListCoreV1Node(ListCoreV1NodeRequest) returns (IoK8sApiCoreV1NodeList) {}

    // list or watch objects of kind PersistentVolume
    rpc ListCoreV1PersistentVolume(ListCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolumeList) {}

    // list or watch objects of kind PersistentVolumeClaim
    rpc ListCoreV1PersistentVolumeClaimForAllNamespaces(ListCoreV1PersistentVolumeClaimForAllNamespacesRequest) returns (IoK8sApiCoreV1PersistentVolumeClaimList) {}

    // list or watch objects of kind Pod
    rpc ListCoreV1PodForAllNamespaces(ListCoreV1PodForAllNamespacesRequest) returns (IoK8sApiCoreV1PodList) {}

    // list or watch objects of kind PodTemplate
    rpc ListCoreV1PodTemplateForAllNamespaces(ListCoreV1PodTemplateForAllNamespacesRequest) returns (IoK8sApiCoreV1PodTemplateList) {}

    // list or watch objects of kind ReplicationController
    rpc ListCoreV1ReplicationControllerForAllNamespaces(ListCoreV1ReplicationControllerForAllNamespacesRequest) returns (IoK8sApiCoreV1ReplicationControllerList) {}

    // list or watch objects of kind ResourceQuota
    rpc ListCoreV1ResourceQuotaForAllNamespaces(ListCoreV1ResourceQuotaForAllNamespacesRequest) returns (IoK8sApiCoreV1ResourceQuotaList) {}

    // list or watch objects of kind Secret
    rpc ListCoreV1SecretForAllNamespaces(ListCoreV1SecretForAllNamespacesRequest) returns (IoK8sApiCoreV1SecretList) {}

    // list or watch objects of kind ServiceAccount
    rpc ListCoreV1ServiceAccountForAllNamespaces(ListCoreV1ServiceAccountForAllNamespacesRequest) returns (IoK8sApiCoreV1ServiceAccountList) {}

    // list or watch objects of kind Service
    rpc ListCoreV1ServiceForAllNamespaces(ListCoreV1ServiceForAllNamespacesRequest) returns (IoK8sApiCoreV1ServiceList) {}

    // list or watch objects of kind EndpointSlice
    rpc ListDiscoveryV1EndpointSliceForAllNamespaces(ListDiscoveryV1EndpointSliceForAllNamespacesRequest) returns (IoK8sApiDiscoveryV1EndpointSliceList) {}

    // list or watch objects of kind EndpointSlice
    rpc ListDiscoveryV1NamespacedEndpointSlice(ListDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApiDiscoveryV1EndpointSliceList) {}

    // list or watch objects of kind Event
    rpc ListEventsV1EventForAllNamespaces(ListEventsV1EventForAllNamespacesRequest) returns (IoK8sApiEventsV1EventList) {}

    // list or watch objects of kind Event
    rpc ListEventsV1NamespacedEvent(ListEventsV1NamespacedEventRequest) returns (IoK8sApiEventsV1EventList) {}

    // list or watch objects of kind FlowSchema
    rpc ListFlowcontrolApiserverV1beta2FlowSchema(ListFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchemaList) {}

    // list or watch objects of kind PriorityLevelConfiguration
    rpc ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration(ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList) {}

    // list or watch objects of kind FlowSchema
    rpc ListFlowcontrolApiserverV1beta3FlowSchema(ListFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchemaList) {}

    // list or watch objects of kind PriorityLevelConfiguration
    rpc ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList) {}

    // list or watch objects of kind StorageVersion
    rpc ListInternalApiserverV1alpha1StorageVersion(ListInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersionList) {}

    // list or watch objects of kind IngressClass
    rpc ListNetworkingV1IngressClass(ListNetworkingV1IngressClassRequest) returns (IoK8sApiNetworkingV1IngressClassList) {}

    // list or watch objects of kind Ingress
    rpc ListNetworkingV1IngressForAllNamespaces(ListNetworkingV1IngressForAllNamespacesRequest) returns (IoK8sApiNetworkingV1IngressList) {}

    // list or watch objects of kind Ingress
    rpc ListNetworkingV1NamespacedIngress(ListNetworkingV1NamespacedIngressRequest) returns (IoK8sApiNetworkingV1IngressList) {}

    // list or watch objects of kind NetworkPolicy
    rpc ListNetworkingV1NamespacedNetworkPolicy(ListNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicyList) {}

    // list or watch objects of kind NetworkPolicy
    rpc ListNetworkingV1NetworkPolicyForAllNamespaces(ListNetworkingV1NetworkPolicyForAllNamespacesRequest) returns (IoK8sApiNetworkingV1NetworkPolicyList) {}

    // list or watch objects of kind ClusterCIDR
    rpc ListNetworkingV1alpha1ClusterCidr(ListNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApiNetworkingV1alpha1ClusterCIDRList) {}

    // list or watch objects of kind IPAddress
    rpc ListNetworkingV1alpha1IpAddress(ListNetworkingV1alpha1IpAddressRequest) returns (IoK8sApiNetworkingV1alpha1IPAddressList) {}

    // list or watch objects of kind RuntimeClass
    rpc ListNodeV1RuntimeClass(ListNodeV1RuntimeClassRequest) returns (IoK8sApiNodeV1RuntimeClassList) {}

    // list or watch objects of kind PodDisruptionBudget
    rpc ListPolicyV1NamespacedPodDisruptionBudget(ListPolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1PodDisruptionBudgetList) {}

    // list or watch objects of kind PodDisruptionBudget
    rpc ListPolicyV1PodDisruptionBudgetForAllNamespaces(ListPolicyV1PodDisruptionBudgetForAllNamespacesRequest) returns (IoK8sApiPolicyV1PodDisruptionBudgetList) {}

    // list or watch objects of kind ClusterRole
    rpc ListRbacAuthorizationV1ClusterRole(ListRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRoleList) {}

    // list or watch objects of kind ClusterRoleBinding
    rpc ListRbacAuthorizationV1ClusterRoleBinding(ListRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBindingList) {}

    // list or watch objects of kind Role
    rpc ListRbacAuthorizationV1NamespacedRole(ListRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1RoleList) {}

    // list or watch objects of kind RoleBinding
    rpc ListRbacAuthorizationV1NamespacedRoleBinding(ListRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBindingList) {}

    // list or watch objects of kind RoleBinding
    rpc ListRbacAuthorizationV1RoleBindingForAllNamespaces(ListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) returns (IoK8sApiRbacV1RoleBindingList) {}

    // list or watch objects of kind Role
    rpc ListRbacAuthorizationV1RoleForAllNamespaces(ListRbacAuthorizationV1RoleForAllNamespacesRequest) returns (IoK8sApiRbacV1RoleList) {}

    // list or watch objects of kind PodSchedulingContext
    rpc ListResourceV1alpha2NamespacedPodSchedulingContext(ListResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContextList) {}

    // list or watch objects of kind ResourceClaim
    rpc ListResourceV1alpha2NamespacedResourceClaim(ListResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimList) {}

    // list or watch objects of kind ResourceClaimTemplate
    rpc ListResourceV1alpha2NamespacedResourceClaimTemplate(ListResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplateList) {}

    // list or watch objects of kind PodSchedulingContext
    rpc ListResourceV1alpha2PodSchedulingContextForAllNamespaces(ListResourceV1alpha2PodSchedulingContextForAllNamespacesRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContextList) {}

    // list or watch objects of kind ResourceClaim
    rpc ListResourceV1alpha2ResourceClaimForAllNamespaces(ListResourceV1alpha2ResourceClaimForAllNamespacesRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimList) {}

    // list or watch objects of kind ResourceClaimTemplate
    rpc ListResourceV1alpha2ResourceClaimTemplateForAllNamespaces(ListResourceV1alpha2ResourceClaimTemplateForAllNamespacesRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplateList) {}

    // list or watch objects of kind ResourceClass
    rpc ListResourceV1alpha2ResourceClass(ListResourceV1alpha2ResourceClassRequest) returns (IoK8sApiResourceV1alpha2ResourceClassList) {}

    // list or watch objects of kind PriorityClass
    rpc ListSchedulingV1PriorityClass(ListSchedulingV1PriorityClassRequest) returns (IoK8sApiSchedulingV1PriorityClassList) {}

    // list or watch objects of kind CSIDriver
    rpc ListStorageV1CsiDriver(ListStorageV1CsiDriverRequest) returns (IoK8sApiStorageV1CSIDriverList) {}

    // list or watch objects of kind CSINode
    rpc ListStorageV1CsiNode(ListStorageV1CsiNodeRequest) returns (IoK8sApiStorageV1CSINodeList) {}

    // list or watch objects of kind CSIStorageCapacity
    rpc ListStorageV1CsiStorageCapacityForAllNamespaces(ListStorageV1CsiStorageCapacityForAllNamespacesRequest) returns (IoK8sApiStorageV1CSIStorageCapacityList) {}

    // list or watch objects of kind CSIStorageCapacity
    rpc ListStorageV1NamespacedCsiStorageCapacity(ListStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApiStorageV1CSIStorageCapacityList) {}

    // list or watch objects of kind StorageClass
    rpc ListStorageV1StorageClass(ListStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClassList) {}

    // list or watch objects of kind VolumeAttachment
    rpc ListStorageV1VolumeAttachment(ListStorageV1VolumeAttachmentRequest) returns (IoK8sApiStorageV1VolumeAttachmentList) {}

    rpc LogFileHandler(LogFileHandlerRequest) returns (google.protobuf.Empty) {}

    rpc LogFileListHandler(google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // partially update the specified MutatingWebhookConfiguration
    rpc PatchAdmissionregistrationV1MutatingWebhookConfiguration(PatchAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration) {}

    // partially update the specified ValidatingWebhookConfiguration
    rpc PatchAdmissionregistrationV1ValidatingWebhookConfiguration(PatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration) {}

    // partially update the specified ValidatingAdmissionPolicy
    rpc PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // partially update the specified ValidatingAdmissionPolicyBinding
    rpc PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding) {}

    // partially update status of the specified ValidatingAdmissionPolicy
    rpc PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus(PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // partially update the specified CustomResourceDefinition
    rpc PatchApiextensionsV1CustomResourceDefinition(PatchApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // partially update status of the specified CustomResourceDefinition
    rpc PatchApiextensionsV1CustomResourceDefinitionStatus(PatchApiextensionsV1CustomResourceDefinitionStatusRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // partially update the specified APIService
    rpc PatchApiregistrationV1ApiService(PatchApiregistrationV1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // partially update status of the specified APIService
    rpc PatchApiregistrationV1ApiServiceStatus(PatchApiregistrationV1ApiServiceStatusRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // partially update the specified ControllerRevision
    rpc PatchAppsV1NamespacedControllerRevision(PatchAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1ControllerRevision) {}

    // partially update the specified DaemonSet
    rpc PatchAppsV1NamespacedDaemonSet(PatchAppsV1NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // partially update status of the specified DaemonSet
    rpc PatchAppsV1NamespacedDaemonSetStatus(PatchAppsV1NamespacedDaemonSetStatusRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // partially update the specified Deployment
    rpc PatchAppsV1NamespacedDeployment(PatchAppsV1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1Deployment) {}

    // partially update scale of the specified Deployment
    rpc PatchAppsV1NamespacedDeploymentScale(PatchAppsV1NamespacedDeploymentScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // partially update status of the specified Deployment
    rpc PatchAppsV1NamespacedDeploymentStatus(PatchAppsV1NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1Deployment) {}

    // partially update the specified ReplicaSet
    rpc PatchAppsV1NamespacedReplicaSet(PatchAppsV1NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // partially update scale of the specified ReplicaSet
    rpc PatchAppsV1NamespacedReplicaSetScale(PatchAppsV1NamespacedReplicaSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // partially update status of the specified ReplicaSet
    rpc PatchAppsV1NamespacedReplicaSetStatus(PatchAppsV1NamespacedReplicaSetStatusRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // partially update the specified StatefulSet
    rpc PatchAppsV1NamespacedStatefulSet(PatchAppsV1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // partially update scale of the specified StatefulSet
    rpc PatchAppsV1NamespacedStatefulSetScale(PatchAppsV1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // partially update status of the specified StatefulSet
    rpc PatchAppsV1NamespacedStatefulSetStatus(PatchAppsV1NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // partially update the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV1NamespacedHorizontalPodAutoscaler(PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // partially update status of the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // partially update the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV2NamespacedHorizontalPodAutoscaler(PatchAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // partially update status of the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus(PatchAutoscalingV2NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // partially update the specified CronJob
    rpc PatchBatchV1NamespacedCronJob(PatchBatchV1NamespacedCronJobRequest) returns (IoK8sApiBatchV1CronJob) {}

    // partially update status of the specified CronJob
    rpc PatchBatchV1NamespacedCronJobStatus(PatchBatchV1NamespacedCronJobStatusRequest) returns (IoK8sApiBatchV1CronJob) {}

    // partially update the specified Job
    rpc PatchBatchV1NamespacedJob(PatchBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // partially update status of the specified Job
    rpc PatchBatchV1NamespacedJobStatus(PatchBatchV1NamespacedJobStatusRequest) returns (IoK8sApiBatchV1Job) {}

    // partially update the specified CertificateSigningRequest
    rpc PatchCertificatesV1CertificateSigningRequest(PatchCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // partially update approval of the specified CertificateSigningRequest
    rpc PatchCertificatesV1CertificateSigningRequestApproval(PatchCertificatesV1CertificateSigningRequestApprovalRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // partially update status of the specified CertificateSigningRequest
    rpc PatchCertificatesV1CertificateSigningRequestStatus(PatchCertificatesV1CertificateSigningRequestStatusRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // partially update the specified ClusterTrustBundle
    rpc PatchCertificatesV1alpha1ClusterTrustBundle(PatchCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApiCertificatesV1alpha1ClusterTrustBundle) {}

    // partially update the specified Lease
    rpc PatchCoordinationV1NamespacedLease(PatchCoordinationV1NamespacedLeaseRequest) returns (IoK8sApiCoordinationV1Lease) {}

    // partially update the specified Namespace
    rpc PatchCoreV1Namespace(PatchCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // partially update status of the specified Namespace
    rpc PatchCoreV1NamespaceStatus(PatchCoreV1NamespaceStatusRequest) returns (IoK8sApiCoreV1Namespace) {}

    // partially update the specified ConfigMap
    rpc PatchCoreV1NamespacedConfigMap(PatchCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // partially update the specified Endpoints
    rpc PatchCoreV1NamespacedEndpoints(PatchCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // partially update the specified Event
    rpc PatchCoreV1NamespacedEvent(PatchCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // partially update the specified LimitRange
    rpc PatchCoreV1NamespacedLimitRange(PatchCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // partially update the specified PersistentVolumeClaim
    rpc PatchCoreV1NamespacedPersistentVolumeClaim(PatchCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // partially update status of the specified PersistentVolumeClaim
    rpc PatchCoreV1NamespacedPersistentVolumeClaimStatus(PatchCoreV1NamespacedPersistentVolumeClaimStatusRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // partially update the specified Pod
    rpc PatchCoreV1NamespacedPod(PatchCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // partially update ephemeralcontainers of the specified Pod
    rpc PatchCoreV1NamespacedPodEphemeralcontainers(PatchCoreV1NamespacedPodEphemeralcontainersRequest) returns (IoK8sApiCoreV1Pod) {}

    // partially update status of the specified Pod
    rpc PatchCoreV1NamespacedPodStatus(PatchCoreV1NamespacedPodStatusRequest) returns (IoK8sApiCoreV1Pod) {}

    // partially update the specified PodTemplate
    rpc PatchCoreV1NamespacedPodTemplate(PatchCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // partially update the specified ReplicationController
    rpc PatchCoreV1NamespacedReplicationController(PatchCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // partially update scale of the specified ReplicationController
    rpc PatchCoreV1NamespacedReplicationControllerScale(PatchCoreV1NamespacedReplicationControllerScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // partially update status of the specified ReplicationController
    rpc PatchCoreV1NamespacedReplicationControllerStatus(PatchCoreV1NamespacedReplicationControllerStatusRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // partially update the specified ResourceQuota
    rpc PatchCoreV1NamespacedResourceQuota(PatchCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // partially update status of the specified ResourceQuota
    rpc PatchCoreV1NamespacedResourceQuotaStatus(PatchCoreV1NamespacedResourceQuotaStatusRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // partially update the specified Secret
    rpc PatchCoreV1NamespacedSecret(PatchCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // partially update the specified Service
    rpc PatchCoreV1NamespacedService(PatchCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // partially update the specified ServiceAccount
    rpc PatchCoreV1NamespacedServiceAccount(PatchCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // partially update status of the specified Service
    rpc PatchCoreV1NamespacedServiceStatus(PatchCoreV1NamespacedServiceStatusRequest) returns (IoK8sApiCoreV1Service) {}

    // partially update the specified Node
    rpc PatchCoreV1Node(PatchCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // partially update status of the specified Node
    rpc PatchCoreV1NodeStatus(PatchCoreV1NodeStatusRequest) returns (IoK8sApiCoreV1Node) {}

    // partially update the specified PersistentVolume
    rpc PatchCoreV1PersistentVolume(PatchCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // partially update status of the specified PersistentVolume
    rpc PatchCoreV1PersistentVolumeStatus(PatchCoreV1PersistentVolumeStatusRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // partially update the specified EndpointSlice
    rpc PatchDiscoveryV1NamespacedEndpointSlice(PatchDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApiDiscoveryV1EndpointSlice) {}

    // partially update the specified Event
    rpc PatchEventsV1NamespacedEvent(PatchEventsV1NamespacedEventRequest) returns (IoK8sApiEventsV1Event) {}

    // partially update the specified FlowSchema
    rpc PatchFlowcontrolApiserverV1beta2FlowSchema(PatchFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // partially update status of the specified FlowSchema
    rpc PatchFlowcontrolApiserverV1beta2FlowSchemaStatus(PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // partially update the specified PriorityLevelConfiguration
    rpc PatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration(PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // partially update status of the specified PriorityLevelConfiguration
    rpc PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus(PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // partially update the specified FlowSchema
    rpc PatchFlowcontrolApiserverV1beta3FlowSchema(PatchFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // partially update status of the specified FlowSchema
    rpc PatchFlowcontrolApiserverV1beta3FlowSchemaStatus(PatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // partially update the specified PriorityLevelConfiguration
    rpc PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration(PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // partially update status of the specified PriorityLevelConfiguration
    rpc PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // partially update the specified StorageVersion
    rpc PatchInternalApiserverV1alpha1StorageVersion(PatchInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // partially update status of the specified StorageVersion
    rpc PatchInternalApiserverV1alpha1StorageVersionStatus(PatchInternalApiserverV1alpha1StorageVersionStatusRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // partially update the specified IngressClass
    rpc PatchNetworkingV1IngressClass(PatchNetworkingV1IngressClassRequest) returns (IoK8sApiNetworkingV1IngressClass) {}

    // partially update the specified Ingress
    rpc PatchNetworkingV1NamespacedIngress(PatchNetworkingV1NamespacedIngressRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // partially update status of the specified Ingress
    rpc PatchNetworkingV1NamespacedIngressStatus(PatchNetworkingV1NamespacedIngressStatusRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // partially update the specified NetworkPolicy
    rpc PatchNetworkingV1NamespacedNetworkPolicy(PatchNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // partially update the specified ClusterCIDR
    rpc PatchNetworkingV1alpha1ClusterCidr(PatchNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApiNetworkingV1alpha1ClusterCIDR) {}

    // partially update the specified IPAddress
    rpc PatchNetworkingV1alpha1IpAddress(PatchNetworkingV1alpha1IpAddressRequest) returns (IoK8sApiNetworkingV1alpha1IPAddress) {}

    // partially update the specified RuntimeClass
    rpc PatchNodeV1RuntimeClass(PatchNodeV1RuntimeClassRequest) returns (IoK8sApiNodeV1RuntimeClass) {}

    // partially update the specified PodDisruptionBudget
    rpc PatchPolicyV1NamespacedPodDisruptionBudget(PatchPolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // partially update status of the specified PodDisruptionBudget
    rpc PatchPolicyV1NamespacedPodDisruptionBudgetStatus(PatchPolicyV1NamespacedPodDisruptionBudgetStatusRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // partially update the specified ClusterRole
    rpc PatchRbacAuthorizationV1ClusterRole(PatchRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // partially update the specified ClusterRoleBinding
    rpc PatchRbacAuthorizationV1ClusterRoleBinding(PatchRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // partially update the specified Role
    rpc PatchRbacAuthorizationV1NamespacedRole(PatchRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // partially update the specified RoleBinding
    rpc PatchRbacAuthorizationV1NamespacedRoleBinding(PatchRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // partially update the specified PodSchedulingContext
    rpc PatchResourceV1alpha2NamespacedPodSchedulingContext(PatchResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // partially update status of the specified PodSchedulingContext
    rpc PatchResourceV1alpha2NamespacedPodSchedulingContextStatus(PatchResourceV1alpha2NamespacedPodSchedulingContextStatusRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // partially update the specified ResourceClaim
    rpc PatchResourceV1alpha2NamespacedResourceClaim(PatchResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // partially update status of the specified ResourceClaim
    rpc PatchResourceV1alpha2NamespacedResourceClaimStatus(PatchResourceV1alpha2NamespacedResourceClaimStatusRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // partially update the specified ResourceClaimTemplate
    rpc PatchResourceV1alpha2NamespacedResourceClaimTemplate(PatchResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplate) {}

    // partially update the specified ResourceClass
    rpc PatchResourceV1alpha2ResourceClass(PatchResourceV1alpha2ResourceClassRequest) returns (IoK8sApiResourceV1alpha2ResourceClass) {}

    // partially update the specified PriorityClass
    rpc PatchSchedulingV1PriorityClass(PatchSchedulingV1PriorityClassRequest) returns (IoK8sApiSchedulingV1PriorityClass) {}

    // partially update the specified CSIDriver
    rpc PatchStorageV1CsiDriver(PatchStorageV1CsiDriverRequest) returns (IoK8sApiStorageV1CSIDriver) {}

    // partially update the specified CSINode
    rpc PatchStorageV1CsiNode(PatchStorageV1CsiNodeRequest) returns (IoK8sApiStorageV1CSINode) {}

    // partially update the specified CSIStorageCapacity
    rpc PatchStorageV1NamespacedCsiStorageCapacity(PatchStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApiStorageV1CSIStorageCapacity) {}

    // partially update the specified StorageClass
    rpc PatchStorageV1StorageClass(PatchStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // partially update the specified VolumeAttachment
    rpc PatchStorageV1VolumeAttachment(PatchStorageV1VolumeAttachmentRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // partially update status of the specified VolumeAttachment
    rpc PatchStorageV1VolumeAttachmentStatus(PatchStorageV1VolumeAttachmentStatusRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // read the specified MutatingWebhookConfiguration
    rpc ReadAdmissionregistrationV1MutatingWebhookConfiguration(ReadAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration) {}

    // read the specified ValidatingWebhookConfiguration
    rpc ReadAdmissionregistrationV1ValidatingWebhookConfiguration(ReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration) {}

    // read the specified ValidatingAdmissionPolicy
    rpc ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // read the specified ValidatingAdmissionPolicyBinding
    rpc ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding) {}

    // read status of the specified ValidatingAdmissionPolicy
    rpc ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus(ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // read the specified CustomResourceDefinition
    rpc ReadApiextensionsV1CustomResourceDefinition(ReadApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // read status of the specified CustomResourceDefinition
    rpc ReadApiextensionsV1CustomResourceDefinitionStatus(ReadApiextensionsV1CustomResourceDefinitionStatusRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // read the specified APIService
    rpc ReadApiregistrationV1ApiService(ReadApiregistrationV1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // read status of the specified APIService
    rpc ReadApiregistrationV1ApiServiceStatus(ReadApiregistrationV1ApiServiceStatusRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // read the specified ControllerRevision
    rpc ReadAppsV1NamespacedControllerRevision(ReadAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1ControllerRevision) {}

    // read the specified DaemonSet
    rpc ReadAppsV1NamespacedDaemonSet(ReadAppsV1NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // read status of the specified DaemonSet
    rpc ReadAppsV1NamespacedDaemonSetStatus(ReadAppsV1NamespacedDaemonSetStatusRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // read the specified Deployment
    rpc ReadAppsV1NamespacedDeployment(ReadAppsV1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1Deployment) {}

    // read scale of the specified Deployment
    rpc ReadAppsV1NamespacedDeploymentScale(ReadAppsV1NamespacedDeploymentScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // read status of the specified Deployment
    rpc ReadAppsV1NamespacedDeploymentStatus(ReadAppsV1NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1Deployment) {}

    // read the specified ReplicaSet
    rpc ReadAppsV1NamespacedReplicaSet(ReadAppsV1NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // read scale of the specified ReplicaSet
    rpc ReadAppsV1NamespacedReplicaSetScale(ReadAppsV1NamespacedReplicaSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // read status of the specified ReplicaSet
    rpc ReadAppsV1NamespacedReplicaSetStatus(ReadAppsV1NamespacedReplicaSetStatusRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // read the specified StatefulSet
    rpc ReadAppsV1NamespacedStatefulSet(ReadAppsV1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // read scale of the specified StatefulSet
    rpc ReadAppsV1NamespacedStatefulSetScale(ReadAppsV1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // read status of the specified StatefulSet
    rpc ReadAppsV1NamespacedStatefulSetStatus(ReadAppsV1NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // read the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV1NamespacedHorizontalPodAutoscaler(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // read status of the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // read the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV2NamespacedHorizontalPodAutoscaler(ReadAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // read status of the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV2NamespacedHorizontalPodAutoscalerStatus(ReadAutoscalingV2NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // read the specified CronJob
    rpc ReadBatchV1NamespacedCronJob(ReadBatchV1NamespacedCronJobRequest) returns (IoK8sApiBatchV1CronJob) {}

    // read status of the specified CronJob
    rpc ReadBatchV1NamespacedCronJobStatus(ReadBatchV1NamespacedCronJobStatusRequest) returns (IoK8sApiBatchV1CronJob) {}

    // read the specified Job
    rpc ReadBatchV1NamespacedJob(ReadBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // read status of the specified Job
    rpc ReadBatchV1NamespacedJobStatus(ReadBatchV1NamespacedJobStatusRequest) returns (IoK8sApiBatchV1Job) {}

    // read the specified CertificateSigningRequest
    rpc ReadCertificatesV1CertificateSigningRequest(ReadCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // read approval of the specified CertificateSigningRequest
    rpc ReadCertificatesV1CertificateSigningRequestApproval(ReadCertificatesV1CertificateSigningRequestApprovalRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // read status of the specified CertificateSigningRequest
    rpc ReadCertificatesV1CertificateSigningRequestStatus(ReadCertificatesV1CertificateSigningRequestStatusRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // read the specified ClusterTrustBundle
    rpc ReadCertificatesV1alpha1ClusterTrustBundle(ReadCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApiCertificatesV1alpha1ClusterTrustBundle) {}

    // read the specified Lease
    rpc ReadCoordinationV1NamespacedLease(ReadCoordinationV1NamespacedLeaseRequest) returns (IoK8sApiCoordinationV1Lease) {}

    // read the specified ComponentStatus
    rpc ReadCoreV1ComponentStatus(ReadCoreV1ComponentStatusRequest) returns (IoK8sApiCoreV1ComponentStatus) {}

    // read the specified Namespace
    rpc ReadCoreV1Namespace(ReadCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // read status of the specified Namespace
    rpc ReadCoreV1NamespaceStatus(ReadCoreV1NamespaceStatusRequest) returns (IoK8sApiCoreV1Namespace) {}

    // read the specified ConfigMap
    rpc ReadCoreV1NamespacedConfigMap(ReadCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // read the specified Endpoints
    rpc ReadCoreV1NamespacedEndpoints(ReadCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // read the specified Event
    rpc ReadCoreV1NamespacedEvent(ReadCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // read the specified LimitRange
    rpc ReadCoreV1NamespacedLimitRange(ReadCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // read the specified PersistentVolumeClaim
    rpc ReadCoreV1NamespacedPersistentVolumeClaim(ReadCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // read status of the specified PersistentVolumeClaim
    rpc ReadCoreV1NamespacedPersistentVolumeClaimStatus(ReadCoreV1NamespacedPersistentVolumeClaimStatusRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // read the specified Pod
    rpc ReadCoreV1NamespacedPod(ReadCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // read ephemeralcontainers of the specified Pod
    rpc ReadCoreV1NamespacedPodEphemeralcontainers(ReadCoreV1NamespacedPodEphemeralcontainersRequest) returns (IoK8sApiCoreV1Pod) {}

    // read log of the specified Pod
    rpc ReadCoreV1NamespacedPodLog(ReadCoreV1NamespacedPodLogRequest) returns (google.protobuf.StringValue) {}

    // read status of the specified Pod
    rpc ReadCoreV1NamespacedPodStatus(ReadCoreV1NamespacedPodStatusRequest) returns (IoK8sApiCoreV1Pod) {}

    // read the specified PodTemplate
    rpc ReadCoreV1NamespacedPodTemplate(ReadCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // read the specified ReplicationController
    rpc ReadCoreV1NamespacedReplicationController(ReadCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // read scale of the specified ReplicationController
    rpc ReadCoreV1NamespacedReplicationControllerScale(ReadCoreV1NamespacedReplicationControllerScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // read status of the specified ReplicationController
    rpc ReadCoreV1NamespacedReplicationControllerStatus(ReadCoreV1NamespacedReplicationControllerStatusRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // read the specified ResourceQuota
    rpc ReadCoreV1NamespacedResourceQuota(ReadCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // read status of the specified ResourceQuota
    rpc ReadCoreV1NamespacedResourceQuotaStatus(ReadCoreV1NamespacedResourceQuotaStatusRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // read the specified Secret
    rpc ReadCoreV1NamespacedSecret(ReadCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // read the specified Service
    rpc ReadCoreV1NamespacedService(ReadCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // read the specified ServiceAccount
    rpc ReadCoreV1NamespacedServiceAccount(ReadCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // read status of the specified Service
    rpc ReadCoreV1NamespacedServiceStatus(ReadCoreV1NamespacedServiceStatusRequest) returns (IoK8sApiCoreV1Service) {}

    // read the specified Node
    rpc ReadCoreV1Node(ReadCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // read status of the specified Node
    rpc ReadCoreV1NodeStatus(ReadCoreV1NodeStatusRequest) returns (IoK8sApiCoreV1Node) {}

    // read the specified PersistentVolume
    rpc ReadCoreV1PersistentVolume(ReadCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // read status of the specified PersistentVolume
    rpc ReadCoreV1PersistentVolumeStatus(ReadCoreV1PersistentVolumeStatusRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // read the specified EndpointSlice
    rpc ReadDiscoveryV1NamespacedEndpointSlice(ReadDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApiDiscoveryV1EndpointSlice) {}

    // read the specified Event
    rpc ReadEventsV1NamespacedEvent(ReadEventsV1NamespacedEventRequest) returns (IoK8sApiEventsV1Event) {}

    // read the specified FlowSchema
    rpc ReadFlowcontrolApiserverV1beta2FlowSchema(ReadFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // read status of the specified FlowSchema
    rpc ReadFlowcontrolApiserverV1beta2FlowSchemaStatus(ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // read the specified PriorityLevelConfiguration
    rpc ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration(ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // read status of the specified PriorityLevelConfiguration
    rpc ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus(ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // read the specified FlowSchema
    rpc ReadFlowcontrolApiserverV1beta3FlowSchema(ReadFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // read status of the specified FlowSchema
    rpc ReadFlowcontrolApiserverV1beta3FlowSchemaStatus(ReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // read the specified PriorityLevelConfiguration
    rpc ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // read status of the specified PriorityLevelConfiguration
    rpc ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // read the specified StorageVersion
    rpc ReadInternalApiserverV1alpha1StorageVersion(ReadInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // read status of the specified StorageVersion
    rpc ReadInternalApiserverV1alpha1StorageVersionStatus(ReadInternalApiserverV1alpha1StorageVersionStatusRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // read the specified IngressClass
    rpc ReadNetworkingV1IngressClass(ReadNetworkingV1IngressClassRequest) returns (IoK8sApiNetworkingV1IngressClass) {}

    // read the specified Ingress
    rpc ReadNetworkingV1NamespacedIngress(ReadNetworkingV1NamespacedIngressRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // read status of the specified Ingress
    rpc ReadNetworkingV1NamespacedIngressStatus(ReadNetworkingV1NamespacedIngressStatusRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // read the specified NetworkPolicy
    rpc ReadNetworkingV1NamespacedNetworkPolicy(ReadNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // read the specified ClusterCIDR
    rpc ReadNetworkingV1alpha1ClusterCidr(ReadNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApiNetworkingV1alpha1ClusterCIDR) {}

    // read the specified IPAddress
    rpc ReadNetworkingV1alpha1IpAddress(ReadNetworkingV1alpha1IpAddressRequest) returns (IoK8sApiNetworkingV1alpha1IPAddress) {}

    // read the specified RuntimeClass
    rpc ReadNodeV1RuntimeClass(ReadNodeV1RuntimeClassRequest) returns (IoK8sApiNodeV1RuntimeClass) {}

    // read the specified PodDisruptionBudget
    rpc ReadPolicyV1NamespacedPodDisruptionBudget(ReadPolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // read status of the specified PodDisruptionBudget
    rpc ReadPolicyV1NamespacedPodDisruptionBudgetStatus(ReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // read the specified ClusterRole
    rpc ReadRbacAuthorizationV1ClusterRole(ReadRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // read the specified ClusterRoleBinding
    rpc ReadRbacAuthorizationV1ClusterRoleBinding(ReadRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // read the specified Role
    rpc ReadRbacAuthorizationV1NamespacedRole(ReadRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // read the specified RoleBinding
    rpc ReadRbacAuthorizationV1NamespacedRoleBinding(ReadRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // read the specified PodSchedulingContext
    rpc ReadResourceV1alpha2NamespacedPodSchedulingContext(ReadResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // read status of the specified PodSchedulingContext
    rpc ReadResourceV1alpha2NamespacedPodSchedulingContextStatus(ReadResourceV1alpha2NamespacedPodSchedulingContextStatusRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // read the specified ResourceClaim
    rpc ReadResourceV1alpha2NamespacedResourceClaim(ReadResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // read status of the specified ResourceClaim
    rpc ReadResourceV1alpha2NamespacedResourceClaimStatus(ReadResourceV1alpha2NamespacedResourceClaimStatusRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // read the specified ResourceClaimTemplate
    rpc ReadResourceV1alpha2NamespacedResourceClaimTemplate(ReadResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplate) {}

    // read the specified ResourceClass
    rpc ReadResourceV1alpha2ResourceClass(ReadResourceV1alpha2ResourceClassRequest) returns (IoK8sApiResourceV1alpha2ResourceClass) {}

    // read the specified PriorityClass
    rpc ReadSchedulingV1PriorityClass(ReadSchedulingV1PriorityClassRequest) returns (IoK8sApiSchedulingV1PriorityClass) {}

    // read the specified CSIDriver
    rpc ReadStorageV1CsiDriver(ReadStorageV1CsiDriverRequest) returns (IoK8sApiStorageV1CSIDriver) {}

    // read the specified CSINode
    rpc ReadStorageV1CsiNode(ReadStorageV1CsiNodeRequest) returns (IoK8sApiStorageV1CSINode) {}

    // read the specified CSIStorageCapacity
    rpc ReadStorageV1NamespacedCsiStorageCapacity(ReadStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApiStorageV1CSIStorageCapacity) {}

    // read the specified StorageClass
    rpc ReadStorageV1StorageClass(ReadStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // read the specified VolumeAttachment
    rpc ReadStorageV1VolumeAttachment(ReadStorageV1VolumeAttachmentRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // read status of the specified VolumeAttachment
    rpc ReadStorageV1VolumeAttachmentStatus(ReadStorageV1VolumeAttachmentStatusRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // replace the specified MutatingWebhookConfiguration
    rpc ReplaceAdmissionregistrationV1MutatingWebhookConfiguration(ReplaceAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration) {}

    // replace the specified ValidatingWebhookConfiguration
    rpc ReplaceAdmissionregistrationV1ValidatingWebhookConfiguration(ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration) {}

    // replace the specified ValidatingAdmissionPolicy
    rpc ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // replace the specified ValidatingAdmissionPolicyBinding
    rpc ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding) {}

    // replace status of the specified ValidatingAdmissionPolicy
    rpc ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus(ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusRequest) returns (IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy) {}

    // replace the specified CustomResourceDefinition
    rpc ReplaceApiextensionsV1CustomResourceDefinition(ReplaceApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // replace status of the specified CustomResourceDefinition
    rpc ReplaceApiextensionsV1CustomResourceDefinitionStatus(ReplaceApiextensionsV1CustomResourceDefinitionStatusRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {}

    // replace the specified APIService
    rpc ReplaceApiregistrationV1ApiService(ReplaceApiregistrationV1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // replace status of the specified APIService
    rpc ReplaceApiregistrationV1ApiServiceStatus(ReplaceApiregistrationV1ApiServiceStatusRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {}

    // replace the specified ControllerRevision
    rpc ReplaceAppsV1NamespacedControllerRevision(ReplaceAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1ControllerRevision) {}

    // replace the specified DaemonSet
    rpc ReplaceAppsV1NamespacedDaemonSet(ReplaceAppsV1NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // replace status of the specified DaemonSet
    rpc ReplaceAppsV1NamespacedDaemonSetStatus(ReplaceAppsV1NamespacedDaemonSetStatusRequest) returns (IoK8sApiAppsV1DaemonSet) {}

    // replace the specified Deployment
    rpc ReplaceAppsV1NamespacedDeployment(ReplaceAppsV1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1Deployment) {}

    // replace scale of the specified Deployment
    rpc ReplaceAppsV1NamespacedDeploymentScale(ReplaceAppsV1NamespacedDeploymentScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // replace status of the specified Deployment
    rpc ReplaceAppsV1NamespacedDeploymentStatus(ReplaceAppsV1NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1Deployment) {}

    // replace the specified ReplicaSet
    rpc ReplaceAppsV1NamespacedReplicaSet(ReplaceAppsV1NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // replace scale of the specified ReplicaSet
    rpc ReplaceAppsV1NamespacedReplicaSetScale(ReplaceAppsV1NamespacedReplicaSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // replace status of the specified ReplicaSet
    rpc ReplaceAppsV1NamespacedReplicaSetStatus(ReplaceAppsV1NamespacedReplicaSetStatusRequest) returns (IoK8sApiAppsV1ReplicaSet) {}

    // replace the specified StatefulSet
    rpc ReplaceAppsV1NamespacedStatefulSet(ReplaceAppsV1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // replace scale of the specified StatefulSet
    rpc ReplaceAppsV1NamespacedStatefulSetScale(ReplaceAppsV1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // replace status of the specified StatefulSet
    rpc ReplaceAppsV1NamespacedStatefulSetStatus(ReplaceAppsV1NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1StatefulSet) {}

    // replace the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler(ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // replace status of the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // replace the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV2NamespacedHorizontalPodAutoscaler(ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // replace status of the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus(ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV2HorizontalPodAutoscaler) {}

    // replace the specified CronJob
    rpc ReplaceBatchV1NamespacedCronJob(ReplaceBatchV1NamespacedCronJobRequest) returns (IoK8sApiBatchV1CronJob) {}

    // replace status of the specified CronJob
    rpc ReplaceBatchV1NamespacedCronJobStatus(ReplaceBatchV1NamespacedCronJobStatusRequest) returns (IoK8sApiBatchV1CronJob) {}

    // replace the specified Job
    rpc ReplaceBatchV1NamespacedJob(ReplaceBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // replace status of the specified Job
    rpc ReplaceBatchV1NamespacedJobStatus(ReplaceBatchV1NamespacedJobStatusRequest) returns (IoK8sApiBatchV1Job) {}

    // replace the specified CertificateSigningRequest
    rpc ReplaceCertificatesV1CertificateSigningRequest(ReplaceCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // replace approval of the specified CertificateSigningRequest
    rpc ReplaceCertificatesV1CertificateSigningRequestApproval(ReplaceCertificatesV1CertificateSigningRequestApprovalRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // replace status of the specified CertificateSigningRequest
    rpc ReplaceCertificatesV1CertificateSigningRequestStatus(ReplaceCertificatesV1CertificateSigningRequestStatusRequest) returns (IoK8sApiCertificatesV1CertificateSigningRequest) {}

    // replace the specified ClusterTrustBundle
    rpc ReplaceCertificatesV1alpha1ClusterTrustBundle(ReplaceCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApiCertificatesV1alpha1ClusterTrustBundle) {}

    // replace the specified Lease
    rpc ReplaceCoordinationV1NamespacedLease(ReplaceCoordinationV1NamespacedLeaseRequest) returns (IoK8sApiCoordinationV1Lease) {}

    // replace the specified Namespace
    rpc ReplaceCoreV1Namespace(ReplaceCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // replace finalize of the specified Namespace
    rpc ReplaceCoreV1NamespaceFinalize(ReplaceCoreV1NamespaceFinalizeRequest) returns (IoK8sApiCoreV1Namespace) {}

    // replace status of the specified Namespace
    rpc ReplaceCoreV1NamespaceStatus(ReplaceCoreV1NamespaceStatusRequest) returns (IoK8sApiCoreV1Namespace) {}

    // replace the specified ConfigMap
    rpc ReplaceCoreV1NamespacedConfigMap(ReplaceCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // replace the specified Endpoints
    rpc ReplaceCoreV1NamespacedEndpoints(ReplaceCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // replace the specified Event
    rpc ReplaceCoreV1NamespacedEvent(ReplaceCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // replace the specified LimitRange
    rpc ReplaceCoreV1NamespacedLimitRange(ReplaceCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // replace the specified PersistentVolumeClaim
    rpc ReplaceCoreV1NamespacedPersistentVolumeClaim(ReplaceCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // replace status of the specified PersistentVolumeClaim
    rpc ReplaceCoreV1NamespacedPersistentVolumeClaimStatus(ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // replace the specified Pod
    rpc ReplaceCoreV1NamespacedPod(ReplaceCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // replace ephemeralcontainers of the specified Pod
    rpc ReplaceCoreV1NamespacedPodEphemeralcontainers(ReplaceCoreV1NamespacedPodEphemeralcontainersRequest) returns (IoK8sApiCoreV1Pod) {}

    // replace status of the specified Pod
    rpc ReplaceCoreV1NamespacedPodStatus(ReplaceCoreV1NamespacedPodStatusRequest) returns (IoK8sApiCoreV1Pod) {}

    // replace the specified PodTemplate
    rpc ReplaceCoreV1NamespacedPodTemplate(ReplaceCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // replace the specified ReplicationController
    rpc ReplaceCoreV1NamespacedReplicationController(ReplaceCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // replace scale of the specified ReplicationController
    rpc ReplaceCoreV1NamespacedReplicationControllerScale(ReplaceCoreV1NamespacedReplicationControllerScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // replace status of the specified ReplicationController
    rpc ReplaceCoreV1NamespacedReplicationControllerStatus(ReplaceCoreV1NamespacedReplicationControllerStatusRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // replace the specified ResourceQuota
    rpc ReplaceCoreV1NamespacedResourceQuota(ReplaceCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // replace status of the specified ResourceQuota
    rpc ReplaceCoreV1NamespacedResourceQuotaStatus(ReplaceCoreV1NamespacedResourceQuotaStatusRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // replace the specified Secret
    rpc ReplaceCoreV1NamespacedSecret(ReplaceCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // replace the specified Service
    rpc ReplaceCoreV1NamespacedService(ReplaceCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // replace the specified ServiceAccount
    rpc ReplaceCoreV1NamespacedServiceAccount(ReplaceCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // replace status of the specified Service
    rpc ReplaceCoreV1NamespacedServiceStatus(ReplaceCoreV1NamespacedServiceStatusRequest) returns (IoK8sApiCoreV1Service) {}

    // replace the specified Node
    rpc ReplaceCoreV1Node(ReplaceCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // replace status of the specified Node
    rpc ReplaceCoreV1NodeStatus(ReplaceCoreV1NodeStatusRequest) returns (IoK8sApiCoreV1Node) {}

    // replace the specified PersistentVolume
    rpc ReplaceCoreV1PersistentVolume(ReplaceCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // replace status of the specified PersistentVolume
    rpc ReplaceCoreV1PersistentVolumeStatus(ReplaceCoreV1PersistentVolumeStatusRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // replace the specified EndpointSlice
    rpc ReplaceDiscoveryV1NamespacedEndpointSlice(ReplaceDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApiDiscoveryV1EndpointSlice) {}

    // replace the specified Event
    rpc ReplaceEventsV1NamespacedEvent(ReplaceEventsV1NamespacedEventRequest) returns (IoK8sApiEventsV1Event) {}

    // replace the specified FlowSchema
    rpc ReplaceFlowcontrolApiserverV1beta2FlowSchema(ReplaceFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // replace status of the specified FlowSchema
    rpc ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatus(ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRequest) returns (IoK8sApiFlowcontrolV1beta2FlowSchema) {}

    // replace the specified PriorityLevelConfiguration
    rpc ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration(ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // replace status of the specified PriorityLevelConfiguration
    rpc ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus(ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest) returns (IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration) {}

    // replace the specified FlowSchema
    rpc ReplaceFlowcontrolApiserverV1beta3FlowSchema(ReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // replace status of the specified FlowSchema
    rpc ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus(ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) returns (IoK8sApiFlowcontrolV1beta3FlowSchema) {}

    // replace the specified PriorityLevelConfiguration
    rpc ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // replace status of the specified PriorityLevelConfiguration
    rpc ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) returns (IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) {}

    // replace the specified StorageVersion
    rpc ReplaceInternalApiserverV1alpha1StorageVersion(ReplaceInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // replace status of the specified StorageVersion
    rpc ReplaceInternalApiserverV1alpha1StorageVersionStatus(ReplaceInternalApiserverV1alpha1StorageVersionStatusRequest) returns (IoK8sApiApiserverinternalV1alpha1StorageVersion) {}

    // replace the specified IngressClass
    rpc ReplaceNetworkingV1IngressClass(ReplaceNetworkingV1IngressClassRequest) returns (IoK8sApiNetworkingV1IngressClass) {}

    // replace the specified Ingress
    rpc ReplaceNetworkingV1NamespacedIngress(ReplaceNetworkingV1NamespacedIngressRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // replace status of the specified Ingress
    rpc ReplaceNetworkingV1NamespacedIngressStatus(ReplaceNetworkingV1NamespacedIngressStatusRequest) returns (IoK8sApiNetworkingV1Ingress) {}

    // replace the specified NetworkPolicy
    rpc ReplaceNetworkingV1NamespacedNetworkPolicy(ReplaceNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // replace the specified ClusterCIDR
    rpc ReplaceNetworkingV1alpha1ClusterCidr(ReplaceNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApiNetworkingV1alpha1ClusterCIDR) {}

    // replace the specified IPAddress
    rpc ReplaceNetworkingV1alpha1IpAddress(ReplaceNetworkingV1alpha1IpAddressRequest) returns (IoK8sApiNetworkingV1alpha1IPAddress) {}

    // replace the specified RuntimeClass
    rpc ReplaceNodeV1RuntimeClass(ReplaceNodeV1RuntimeClassRequest) returns (IoK8sApiNodeV1RuntimeClass) {}

    // replace the specified PodDisruptionBudget
    rpc ReplacePolicyV1NamespacedPodDisruptionBudget(ReplacePolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // replace status of the specified PodDisruptionBudget
    rpc ReplacePolicyV1NamespacedPodDisruptionBudgetStatus(ReplacePolicyV1NamespacedPodDisruptionBudgetStatusRequest) returns (IoK8sApiPolicyV1PodDisruptionBudget) {}

    // replace the specified ClusterRole
    rpc ReplaceRbacAuthorizationV1ClusterRole(ReplaceRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // replace the specified ClusterRoleBinding
    rpc ReplaceRbacAuthorizationV1ClusterRoleBinding(ReplaceRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // replace the specified Role
    rpc ReplaceRbacAuthorizationV1NamespacedRole(ReplaceRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // replace the specified RoleBinding
    rpc ReplaceRbacAuthorizationV1NamespacedRoleBinding(ReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // replace the specified PodSchedulingContext
    rpc ReplaceResourceV1alpha2NamespacedPodSchedulingContext(ReplaceResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // replace status of the specified PodSchedulingContext
    rpc ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatus(ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatusRequest) returns (IoK8sApiResourceV1alpha2PodSchedulingContext) {}

    // replace the specified ResourceClaim
    rpc ReplaceResourceV1alpha2NamespacedResourceClaim(ReplaceResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // replace status of the specified ResourceClaim
    rpc ReplaceResourceV1alpha2NamespacedResourceClaimStatus(ReplaceResourceV1alpha2NamespacedResourceClaimStatusRequest) returns (IoK8sApiResourceV1alpha2ResourceClaim) {}

    // replace the specified ResourceClaimTemplate
    rpc ReplaceResourceV1alpha2NamespacedResourceClaimTemplate(ReplaceResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApiResourceV1alpha2ResourceClaimTemplate) {}

    // replace the specified ResourceClass
    rpc ReplaceResourceV1alpha2ResourceClass(ReplaceResourceV1alpha2ResourceClassRequest) returns (IoK8sApiResourceV1alpha2ResourceClass) {}

    // replace the specified PriorityClass
    rpc ReplaceSchedulingV1PriorityClass(ReplaceSchedulingV1PriorityClassRequest) returns (IoK8sApiSchedulingV1PriorityClass) {}

    // replace the specified CSIDriver
    rpc ReplaceStorageV1CsiDriver(ReplaceStorageV1CsiDriverRequest) returns (IoK8sApiStorageV1CSIDriver) {}

    // replace the specified CSINode
    rpc ReplaceStorageV1CsiNode(ReplaceStorageV1CsiNodeRequest) returns (IoK8sApiStorageV1CSINode) {}

    // replace the specified CSIStorageCapacity
    rpc ReplaceStorageV1NamespacedCsiStorageCapacity(ReplaceStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApiStorageV1CSIStorageCapacity) {}

    // replace the specified StorageClass
    rpc ReplaceStorageV1StorageClass(ReplaceStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // replace the specified VolumeAttachment
    rpc ReplaceStorageV1VolumeAttachment(ReplaceStorageV1VolumeAttachmentRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // replace status of the specified VolumeAttachment
    rpc ReplaceStorageV1VolumeAttachmentStatus(ReplaceStorageV1VolumeAttachmentStatusRequest) returns (IoK8sApiStorageV1VolumeAttachment) {}

    // watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAdmissionregistrationV1MutatingWebhookConfiguration(WatchAdmissionregistrationV1MutatingWebhookConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAdmissionregistrationV1MutatingWebhookConfigurationList(WatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAdmissionregistrationV1ValidatingWebhookConfiguration(WatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAdmissionregistrationV1ValidatingWebhookConfigurationList(WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ValidatingAdmissionPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy(WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ValidatingAdmissionPolicyBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding(WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ValidatingAdmissionPolicyBinding. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList(WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ValidatingAdmissionPolicy. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList(WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchApiextensionsV1CustomResourceDefinition(WatchApiextensionsV1CustomResourceDefinitionRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchApiextensionsV1CustomResourceDefinitionList(WatchApiextensionsV1CustomResourceDefinitionListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchApiregistrationV1ApiService(WatchApiregistrationV1ApiServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchApiregistrationV1ApiServiceList(WatchApiregistrationV1ApiServiceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1ControllerRevisionListForAllNamespaces(WatchAppsV1ControllerRevisionListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1DaemonSetListForAllNamespaces(WatchAppsV1DaemonSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1DeploymentListForAllNamespaces(WatchAppsV1DeploymentListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAppsV1NamespacedControllerRevision(WatchAppsV1NamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1NamespacedControllerRevisionList(WatchAppsV1NamespacedControllerRevisionListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAppsV1NamespacedDaemonSet(WatchAppsV1NamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1NamespacedDaemonSetList(WatchAppsV1NamespacedDaemonSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAppsV1NamespacedDeployment(WatchAppsV1NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1NamespacedDeploymentList(WatchAppsV1NamespacedDeploymentListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAppsV1NamespacedReplicaSet(WatchAppsV1NamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1NamespacedReplicaSetList(WatchAppsV1NamespacedReplicaSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAppsV1NamespacedStatefulSet(WatchAppsV1NamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1NamespacedStatefulSetList(WatchAppsV1NamespacedStatefulSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1ReplicaSetListForAllNamespaces(WatchAppsV1ReplicaSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAppsV1StatefulSetListForAllNamespaces(WatchAppsV1StatefulSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAutoscalingV1NamespacedHorizontalPodAutoscaler(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces(WatchAutoscalingV2HorizontalPodAutoscalerListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchAutoscalingV2NamespacedHorizontalPodAutoscaler(WatchAutoscalingV2NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchAutoscalingV2NamespacedHorizontalPodAutoscalerList(WatchAutoscalingV2NamespacedHorizontalPodAutoscalerListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchBatchV1CronJobListForAllNamespaces(WatchBatchV1CronJobListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchBatchV1JobListForAllNamespaces(WatchBatchV1JobListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchBatchV1NamespacedCronJob(WatchBatchV1NamespacedCronJobRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchBatchV1NamespacedCronJobList(WatchBatchV1NamespacedCronJobListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchBatchV1NamespacedJob(WatchBatchV1NamespacedJobRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchBatchV1NamespacedJobList(WatchBatchV1NamespacedJobListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCertificatesV1CertificateSigningRequest(WatchCertificatesV1CertificateSigningRequestRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCertificatesV1CertificateSigningRequestList(WatchCertificatesV1CertificateSigningRequestListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterTrustBundle. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCertificatesV1alpha1ClusterTrustBundle(WatchCertificatesV1alpha1ClusterTrustBundleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterTrustBundle. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCertificatesV1alpha1ClusterTrustBundleList(WatchCertificatesV1alpha1ClusterTrustBundleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoordinationV1LeaseListForAllNamespaces(WatchCoordinationV1LeaseListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Lease. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoordinationV1NamespacedLease(WatchCoordinationV1NamespacedLeaseRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoordinationV1NamespacedLeaseList(WatchCoordinationV1NamespacedLeaseListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1ConfigMapListForAllNamespaces(WatchCoreV1ConfigMapListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1EndpointsListForAllNamespaces(WatchCoreV1EndpointsListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1EventListForAllNamespaces(WatchCoreV1EventListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1LimitRangeListForAllNamespaces(WatchCoreV1LimitRangeListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1Namespace(WatchCoreV1NamespaceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespaceList(WatchCoreV1NamespaceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedConfigMap(WatchCoreV1NamespacedConfigMapRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedConfigMapList(WatchCoreV1NamespacedConfigMapListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedEndpoints(WatchCoreV1NamespacedEndpointsRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedEndpointsList(WatchCoreV1NamespacedEndpointsListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedEvent(WatchCoreV1NamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedEventList(WatchCoreV1NamespacedEventListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedLimitRange(WatchCoreV1NamespacedLimitRangeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedLimitRangeList(WatchCoreV1NamespacedLimitRangeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedPersistentVolumeClaim(WatchCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedPersistentVolumeClaimList(WatchCoreV1NamespacedPersistentVolumeClaimListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedPod(WatchCoreV1NamespacedPodRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedPodList(WatchCoreV1NamespacedPodListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedPodTemplate(WatchCoreV1NamespacedPodTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedPodTemplateList(WatchCoreV1NamespacedPodTemplateListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedReplicationController(WatchCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedReplicationControllerList(WatchCoreV1NamespacedReplicationControllerListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedResourceQuota(WatchCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedResourceQuotaList(WatchCoreV1NamespacedResourceQuotaListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedSecret(WatchCoreV1NamespacedSecretRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedSecretList(WatchCoreV1NamespacedSecretListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedService(WatchCoreV1NamespacedServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1NamespacedServiceAccount(WatchCoreV1NamespacedServiceAccountRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedServiceAccountList(WatchCoreV1NamespacedServiceAccountListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NamespacedServiceList(WatchCoreV1NamespacedServiceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1Node(WatchCoreV1NodeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1NodeList(WatchCoreV1NodeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchCoreV1PersistentVolume(WatchCoreV1PersistentVolumeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1PersistentVolumeClaimListForAllNamespaces(WatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1PersistentVolumeList(WatchCoreV1PersistentVolumeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1PodListForAllNamespaces(WatchCoreV1PodListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1PodTemplateListForAllNamespaces(WatchCoreV1PodTemplateListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1ReplicationControllerListForAllNamespaces(WatchCoreV1ReplicationControllerListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1ResourceQuotaListForAllNamespaces(WatchCoreV1ResourceQuotaListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1SecretListForAllNamespaces(WatchCoreV1SecretListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1ServiceAccountListForAllNamespaces(WatchCoreV1ServiceAccountListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchCoreV1ServiceListForAllNamespaces(WatchCoreV1ServiceListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchDiscoveryV1EndpointSliceListForAllNamespaces(WatchDiscoveryV1EndpointSliceListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchDiscoveryV1NamespacedEndpointSlice(WatchDiscoveryV1NamespacedEndpointSliceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchDiscoveryV1NamespacedEndpointSliceList(WatchDiscoveryV1NamespacedEndpointSliceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchEventsV1EventListForAllNamespaces(WatchEventsV1EventListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchEventsV1NamespacedEvent(WatchEventsV1NamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchEventsV1NamespacedEventList(WatchEventsV1NamespacedEventListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchFlowcontrolApiserverV1beta2FlowSchema(WatchFlowcontrolApiserverV1beta2FlowSchemaRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchFlowcontrolApiserverV1beta2FlowSchemaList(WatchFlowcontrolApiserverV1beta2FlowSchemaListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration(WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList(WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchFlowcontrolApiserverV1beta3FlowSchema(WatchFlowcontrolApiserverV1beta3FlowSchemaRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchFlowcontrolApiserverV1beta3FlowSchemaList(WatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration(WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList(WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StorageVersion. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchInternalApiserverV1alpha1StorageVersion(WatchInternalApiserverV1alpha1StorageVersionRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StorageVersion. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchInternalApiserverV1alpha1StorageVersionList(WatchInternalApiserverV1alpha1StorageVersionListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind IngressClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchNetworkingV1IngressClass(WatchNetworkingV1IngressClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of IngressClass. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1IngressClassList(WatchNetworkingV1IngressClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1IngressListForAllNamespaces(WatchNetworkingV1IngressListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchNetworkingV1NamespacedIngress(WatchNetworkingV1NamespacedIngressRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1NamespacedIngressList(WatchNetworkingV1NamespacedIngressListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchNetworkingV1NamespacedNetworkPolicy(WatchNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1NamespacedNetworkPolicyList(WatchNetworkingV1NamespacedNetworkPolicyListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1NetworkPolicyListForAllNamespaces(WatchNetworkingV1NetworkPolicyListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterCIDR. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchNetworkingV1alpha1ClusterCidr(WatchNetworkingV1alpha1ClusterCidrRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterCIDR. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1alpha1ClusterCidrList(WatchNetworkingV1alpha1ClusterCidrListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind IPAddress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchNetworkingV1alpha1IpAddress(WatchNetworkingV1alpha1IpAddressRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of IPAddress. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNetworkingV1alpha1IpAddressList(WatchNetworkingV1alpha1IpAddressListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchNodeV1RuntimeClass(WatchNodeV1RuntimeClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchNodeV1RuntimeClassList(WatchNodeV1RuntimeClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchPolicyV1NamespacedPodDisruptionBudget(WatchPolicyV1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchPolicyV1NamespacedPodDisruptionBudgetList(WatchPolicyV1NamespacedPodDisruptionBudgetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchPolicyV1PodDisruptionBudgetListForAllNamespaces(WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchRbacAuthorizationV1ClusterRole(WatchRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchRbacAuthorizationV1ClusterRoleBinding(WatchRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchRbacAuthorizationV1ClusterRoleBindingList(WatchRbacAuthorizationV1ClusterRoleBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchRbacAuthorizationV1ClusterRoleList(WatchRbacAuthorizationV1ClusterRoleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchRbacAuthorizationV1NamespacedRole(WatchRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchRbacAuthorizationV1NamespacedRoleBinding(WatchRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchRbacAuthorizationV1NamespacedRoleBindingList(WatchRbacAuthorizationV1NamespacedRoleBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchRbacAuthorizationV1NamespacedRoleList(WatchRbacAuthorizationV1NamespacedRoleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchRbacAuthorizationV1RoleListForAllNamespaces(WatchRbacAuthorizationV1RoleListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchResourceV1alpha2NamespacedPodSchedulingContext(WatchResourceV1alpha2NamespacedPodSchedulingContextRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2NamespacedPodSchedulingContextList(WatchResourceV1alpha2NamespacedPodSchedulingContextListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchResourceV1alpha2NamespacedResourceClaim(WatchResourceV1alpha2NamespacedResourceClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2NamespacedResourceClaimList(WatchResourceV1alpha2NamespacedResourceClaimListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchResourceV1alpha2NamespacedResourceClaimTemplate(WatchResourceV1alpha2NamespacedResourceClaimTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2NamespacedResourceClaimTemplateList(WatchResourceV1alpha2NamespacedResourceClaimTemplateListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2PodSchedulingContextListForAllNamespaces(WatchResourceV1alpha2PodSchedulingContextListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2ResourceClaimListForAllNamespaces(WatchResourceV1alpha2ResourceClaimListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespaces(WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ResourceClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchResourceV1alpha2ResourceClass(WatchResourceV1alpha2ResourceClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceClass. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchResourceV1alpha2ResourceClassList(WatchResourceV1alpha2ResourceClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchSchedulingV1PriorityClass(WatchSchedulingV1PriorityClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchSchedulingV1PriorityClassList(WatchSchedulingV1PriorityClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CSIDriver. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchStorageV1CsiDriver(WatchStorageV1CsiDriverRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchStorageV1CsiDriverList(WatchStorageV1CsiDriverListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CSINode. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchStorageV1CsiNode(WatchStorageV1CsiNodeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CSINode. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchStorageV1CsiNodeList(WatchStorageV1CsiNodeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchStorageV1CsiStorageCapacityListForAllNamespaces(WatchStorageV1CsiStorageCapacityListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchStorageV1NamespacedCsiStorageCapacity(WatchStorageV1NamespacedCsiStorageCapacityRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchStorageV1NamespacedCsiStorageCapacityList(WatchStorageV1NamespacedCsiStorageCapacityListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchStorageV1StorageClass(WatchStorageV1StorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchStorageV1StorageClassList(WatchStorageV1StorageClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
    rpc WatchStorageV1VolumeAttachment(WatchStorageV1VolumeAttachmentRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
    rpc WatchStorageV1VolumeAttachmentList(WatchStorageV1VolumeAttachmentListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}
}